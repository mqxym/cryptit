{
  "version": 3,
  "sources": ["node:path", "../../node_modules/argon2-browser/dist/argon2.js", "../../node_modules/argon2-browser/lib/argon2.js", "../../packages/core/src/errors/index.ts", "../../packages/core/src/config/SchemeRegistry.ts", "../../packages/core/src/algorithms/encryption/aes-gmc/AESGCM.ts", "../../node_modules/@noble/ciphers/esm/utils.js", "../../node_modules/@noble/ciphers/esm/_arx.js", "../../node_modules/@noble/ciphers/esm/_poly1305.js", "../../node_modules/@noble/ciphers/esm/chacha.js", "../../packages/core/src/algorithms/encryption/xchacha20poly1305/XChaCha20-Poly1305.ts", "../../packages/core/src/algorithms/kdf/argon2-wrapper.ts", "../../packages/core/src/algorithms/kdf/Argon2.ts", "../../packages/core/src/config/defaults.ts", "../../packages/core/src/header/constants.ts", "../../packages/core/src/util/bytes.ts", "../../packages/core/src/header/encoder.ts", "../../packages/core/src/header/decoder.ts", "../../packages/core/src/stream/EncryptTransform.ts", "../../packages/core/src/stream/DecryptTransform.ts", "../../packages/core/src/stream/StreamProcessor.ts", "../../packages/core/src/util/logger.ts", "../../packages/core/src/engine/EngineManager.ts", "../../packages/core/src/index.ts", "../../packages/browser-runtime/src/provider.ts", "../../packages/browser-runtime/src/index.ts"],
  "sourcesContent": [
    "function assertPath(path){if(typeof path!==\"string\")throw new TypeError(\"Path must be a string. Received \"+JSON.stringify(path))}function normalizeStringPosix(path,allowAboveRoot){var res=\"\",lastSegmentLength=0,lastSlash=-1,dots=0,code;for(var i=0;i<=path.length;++i){if(i<path.length)code=path.charCodeAt(i);else if(code===47)break;else code=47;if(code===47){if(lastSlash===i-1||dots===1);else if(lastSlash!==i-1&&dots===2){if(res.length<2||lastSegmentLength!==2||res.charCodeAt(res.length-1)!==46||res.charCodeAt(res.length-2)!==46){if(res.length>2){var lastSlashIndex=res.lastIndexOf(\"/\");if(lastSlashIndex!==res.length-1){if(lastSlashIndex===-1)res=\"\",lastSegmentLength=0;else res=res.slice(0,lastSlashIndex),lastSegmentLength=res.length-1-res.lastIndexOf(\"/\");lastSlash=i,dots=0;continue}}else if(res.length===2||res.length===1){res=\"\",lastSegmentLength=0,lastSlash=i,dots=0;continue}}if(allowAboveRoot){if(res.length>0)res+=\"/..\";else res=\"..\";lastSegmentLength=2}}else{if(res.length>0)res+=\"/\"+path.slice(lastSlash+1,i);else res=path.slice(lastSlash+1,i);lastSegmentLength=i-lastSlash-1}lastSlash=i,dots=0}else if(code===46&&dots!==-1)++dots;else dots=-1}return res}function _format(sep,pathObject){var dir=pathObject.dir||pathObject.root,base=pathObject.base||(pathObject.name||\"\")+(pathObject.ext||\"\");if(!dir)return base;if(dir===pathObject.root)return dir+base;return dir+sep+base}function resolve(){var resolvedPath=\"\",resolvedAbsolute=!1,cwd;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path;if(i>=0)path=arguments[i];else{if(cwd===void 0)cwd=process.cwd();path=cwd}if(assertPath(path),path.length===0)continue;resolvedPath=path+\"/\"+resolvedPath,resolvedAbsolute=path.charCodeAt(0)===47}if(resolvedPath=normalizeStringPosix(resolvedPath,!resolvedAbsolute),resolvedAbsolute)if(resolvedPath.length>0)return\"/\"+resolvedPath;else return\"/\";else if(resolvedPath.length>0)return resolvedPath;else return\".\"}function normalize(path){if(assertPath(path),path.length===0)return\".\";var isAbsolute=path.charCodeAt(0)===47,trailingSeparator=path.charCodeAt(path.length-1)===47;if(path=normalizeStringPosix(path,!isAbsolute),path.length===0&&!isAbsolute)path=\".\";if(path.length>0&&trailingSeparator)path+=\"/\";if(isAbsolute)return\"/\"+path;return path}function isAbsolute(path){return assertPath(path),path.length>0&&path.charCodeAt(0)===47}function join(){if(arguments.length===0)return\".\";var joined;for(var i=0;i<arguments.length;++i){var arg=arguments[i];if(assertPath(arg),arg.length>0)if(joined===void 0)joined=arg;else joined+=\"/\"+arg}if(joined===void 0)return\".\";return normalize(joined)}function relative(from,to){if(assertPath(from),assertPath(to),from===to)return\"\";if(from=resolve(from),to=resolve(to),from===to)return\"\";var fromStart=1;for(;fromStart<from.length;++fromStart)if(from.charCodeAt(fromStart)!==47)break;var fromEnd=from.length,fromLen=fromEnd-fromStart,toStart=1;for(;toStart<to.length;++toStart)if(to.charCodeAt(toStart)!==47)break;var toEnd=to.length,toLen=toEnd-toStart,length=fromLen<toLen?fromLen:toLen,lastCommonSep=-1,i=0;for(;i<=length;++i){if(i===length){if(toLen>length){if(to.charCodeAt(toStart+i)===47)return to.slice(toStart+i+1);else if(i===0)return to.slice(toStart+i)}else if(fromLen>length){if(from.charCodeAt(fromStart+i)===47)lastCommonSep=i;else if(i===0)lastCommonSep=0}break}var fromCode=from.charCodeAt(fromStart+i),toCode=to.charCodeAt(toStart+i);if(fromCode!==toCode)break;else if(fromCode===47)lastCommonSep=i}var out=\"\";for(i=fromStart+lastCommonSep+1;i<=fromEnd;++i)if(i===fromEnd||from.charCodeAt(i)===47)if(out.length===0)out+=\"..\";else out+=\"/..\";if(out.length>0)return out+to.slice(toStart+lastCommonSep);else{if(toStart+=lastCommonSep,to.charCodeAt(toStart)===47)++toStart;return to.slice(toStart)}}function _makeLong(path){return path}function dirname(path){if(assertPath(path),path.length===0)return\".\";var code=path.charCodeAt(0),hasRoot=code===47,end=-1,matchedSlash=!0;for(var i=path.length-1;i>=1;--i)if(code=path.charCodeAt(i),code===47){if(!matchedSlash){end=i;break}}else matchedSlash=!1;if(end===-1)return hasRoot?\"/\":\".\";if(hasRoot&&end===1)return\"//\";return path.slice(0,end)}function basename(path,ext){if(ext!==void 0&&typeof ext!==\"string\")throw new TypeError('\"ext\" argument must be a string');assertPath(path);var start=0,end=-1,matchedSlash=!0,i;if(ext!==void 0&&ext.length>0&&ext.length<=path.length){if(ext.length===path.length&&ext===path)return\"\";var extIdx=ext.length-1,firstNonSlashEnd=-1;for(i=path.length-1;i>=0;--i){var code=path.charCodeAt(i);if(code===47){if(!matchedSlash){start=i+1;break}}else{if(firstNonSlashEnd===-1)matchedSlash=!1,firstNonSlashEnd=i+1;if(extIdx>=0)if(code===ext.charCodeAt(extIdx)){if(--extIdx===-1)end=i}else extIdx=-1,end=firstNonSlashEnd}}if(start===end)end=firstNonSlashEnd;else if(end===-1)end=path.length;return path.slice(start,end)}else{for(i=path.length-1;i>=0;--i)if(path.charCodeAt(i)===47){if(!matchedSlash){start=i+1;break}}else if(end===-1)matchedSlash=!1,end=i+1;if(end===-1)return\"\";return path.slice(start,end)}}function extname(path){assertPath(path);var startDot=-1,startPart=0,end=-1,matchedSlash=!0,preDotState=0;for(var i=path.length-1;i>=0;--i){var code=path.charCodeAt(i);if(code===47){if(!matchedSlash){startPart=i+1;break}continue}if(end===-1)matchedSlash=!1,end=i+1;if(code===46){if(startDot===-1)startDot=i;else if(preDotState!==1)preDotState=1}else if(startDot!==-1)preDotState=-1}if(startDot===-1||end===-1||preDotState===0||preDotState===1&&startDot===end-1&&startDot===startPart+1)return\"\";return path.slice(startDot,end)}function format(pathObject){if(pathObject===null||typeof pathObject!==\"object\")throw new TypeError('The \"pathObject\" argument must be of type Object. Received type '+typeof pathObject);return _format(\"/\",pathObject)}function parse(path){assertPath(path);var ret={root:\"\",dir:\"\",base:\"\",ext:\"\",name:\"\"};if(path.length===0)return ret;var code=path.charCodeAt(0),isAbsolute2=code===47,start;if(isAbsolute2)ret.root=\"/\",start=1;else start=0;var startDot=-1,startPart=0,end=-1,matchedSlash=!0,i=path.length-1,preDotState=0;for(;i>=start;--i){if(code=path.charCodeAt(i),code===47){if(!matchedSlash){startPart=i+1;break}continue}if(end===-1)matchedSlash=!1,end=i+1;if(code===46){if(startDot===-1)startDot=i;else if(preDotState!==1)preDotState=1}else if(startDot!==-1)preDotState=-1}if(startDot===-1||end===-1||preDotState===0||preDotState===1&&startDot===end-1&&startDot===startPart+1){if(end!==-1)if(startPart===0&&isAbsolute2)ret.base=ret.name=path.slice(1,end);else ret.base=ret.name=path.slice(startPart,end)}else{if(startPart===0&&isAbsolute2)ret.name=path.slice(1,startDot),ret.base=path.slice(1,end);else ret.name=path.slice(startPart,startDot),ret.base=path.slice(startPart,end);ret.ext=path.slice(startDot,end)}if(startPart>0)ret.dir=path.slice(0,startPart-1);else if(isAbsolute2)ret.dir=\"/\";return ret}var sep=\"/\",delimiter=\":\",posix=((p)=>(p.posix=p,p))({resolve,normalize,isAbsolute,join,relative,_makeLong,dirname,basename,extname,format,parse,sep,delimiter,win32:null,posix:null});var path_default=posix;export{sep,resolve,relative,posix,parse,normalize,join,isAbsolute,format,extname,dirname,delimiter,path_default as default,basename,_makeLong};",
    "var Module=typeof self!==\"undefined\"&&typeof self.Module!==\"undefined\"?self.Module:{};var jsModule=Module;var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram=\"./this.program\";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window===\"object\";ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";ENVIRONMENT_IS_NODE=typeof process===\"object\"&&typeof process.versions===\"object\"&&typeof process.versions.node===\"string\";ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;var nodeFS;var nodePath;if(ENVIRONMENT_IS_NODE){if(ENVIRONMENT_IS_WORKER){scriptDirectory=require(\"path\").dirname(scriptDirectory)+\"/\"}else{scriptDirectory=__dirname+\"/\"}read_=function shell_read(filename,binary){if(!nodeFS)nodeFS=require(\"fs\");if(!nodePath)nodePath=require(\"path\");filename=nodePath[\"normalize\"](filename);return nodeFS[\"readFileSync\"](filename,binary?null:\"utf8\")};readBinary=function readBinary(filename){var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};if(process[\"argv\"].length>1){thisProgram=process[\"argv\"][1].replace(/\\\\/g,\"/\")}arguments_=process[\"argv\"].slice(2);if(typeof module!==\"undefined\"){module[\"exports\"]=Module}process[\"on\"](\"uncaughtException\",function(ex){if(!(ex instanceof ExitStatus)){throw ex}});process[\"on\"](\"unhandledRejection\",abort);quit_=function(status){process[\"exit\"](status)};Module[\"inspect\"]=function(){return\"[Emscripten Module object]\"}}else if(ENVIRONMENT_IS_SHELL){if(typeof read!=\"undefined\"){read_=function shell_read(f){return read(f)}}readBinary=function readBinary(f){var data;if(typeof readbuffer===\"function\"){return new Uint8Array(readbuffer(f))}data=read(f,\"binary\");assert(typeof data===\"object\");return data};if(typeof scriptArgs!=\"undefined\"){arguments_=scriptArgs}else if(typeof arguments!=\"undefined\"){arguments_=arguments}if(typeof quit===\"function\"){quit_=function(status){quit(status)}}if(typeof print!==\"undefined\"){if(typeof console===\"undefined\")console={};console.log=print;console.warn=console.error=typeof printErr!==\"undefined\"?printErr:print}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(typeof document!==\"undefined\"&&document.currentScript){scriptDirectory=document.currentScript.src}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}{read_=function(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=function(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=function(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=function(title){document.title=title}}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];var noExitRuntime=Module[\"noExitRuntime\"]||true;if(typeof WebAssembly!==\"object\"){abort(\"no native wasm support detected\")}var wasmMemory;var ABORT=false;var EXITSTATUS;function assert(condition,text){if(!condition){abort(\"Assertion failed: \"+text)}}var ALLOC_NORMAL=0;var ALLOC_STACK=1;function allocate(slab,allocator){var ret;if(allocator==ALLOC_STACK){ret=stackAlloc(slab.length)}else{ret=_malloc(slab.length)}if(slab.subarray||slab.slice){HEAPU8.set(slab,ret)}else{HEAPU8.set(new Uint8Array(slab),ret)}return ret}var UTF8Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf8\"):undefined;function UTF8ArrayToString(heap,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heap[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heap.subarray&&UTF8Decoder){return UTF8Decoder.decode(heap.subarray(idx,endPtr))}else{var str=\"\";while(idx<endPtr){var u0=heap[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heap[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heap[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|heap[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):\"\"}function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module[\"HEAP8\"]=HEAP8=new Int8Array(buf);Module[\"HEAP16\"]=HEAP16=new Int16Array(buf);Module[\"HEAP32\"]=HEAP32=new Int32Array(buf);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buf);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buf);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buf);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buf);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buf)}var INITIAL_MEMORY=Module[\"INITIAL_MEMORY\"]||16777216;var wasmTable;var __ATPRERUN__=[];var __ATINIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnInit(cb){__ATINIT__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}what+=\"\";err(what);ABORT=true;EXITSTATUS=1;what=\"abort(\"+what+\"). Build with -s ASSERTIONS=1 for more info.\";var e=new WebAssembly.RuntimeError(what);throw e}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return filename.startsWith(dataURIPrefix)}function isFileURI(filename){return filename.startsWith(\"file://\")}var wasmBinaryFile=\"argon2.wasm\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(file){try{if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(file)}else{throw\"both async and sync fetching of the wasm failed\"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)){if(typeof fetch===\"function\"&&!isFileURI(wasmBinaryFile)){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary(wasmBinaryFile)})}else{if(readAsync){return new Promise(function(resolve,reject){readAsync(wasmBinaryFile,function(response){resolve(new Uint8Array(response))},reject)})}}}return Promise.resolve().then(function(){return getBinary(wasmBinaryFile)})}function createWasm(){var info={\"a\":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;wasmMemory=Module[\"asm\"][\"c\"];updateGlobalBufferAndViews(wasmMemory.buffer);wasmTable=Module[\"asm\"][\"k\"];addOnInit(Module[\"asm\"][\"d\"]);removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");function receiveInstantiationResult(result){receiveInstance(result[\"instance\"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){var result=WebAssembly.instantiate(binary,info);return result}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&!isFileURI(wasmBinaryFile)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiationResult,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");return instantiateArrayBuffer(receiveInstantiationResult)})})}else{return instantiateArrayBuffer(receiveInstantiationResult)}}if(Module[\"instantiateWasm\"]){try{var exports=Module[\"instantiateWasm\"](info,receiveInstance);return exports}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}instantiateAsync();return{}}function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback(Module);continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){wasmTable.get(func)()}else{wasmTable.get(func)(callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){var oldSize=HEAPU8.length;requestedSize=requestedSize>>>0;var maxHeapSize=2147418112;if(requestedSize>maxHeapSize){return false}for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(requestedSize,overGrownHeapSize),65536));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}var asmLibraryArg={\"a\":_emscripten_memcpy_big,\"b\":_emscripten_resize_heap};var asm=createWasm();var ___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=function(){return(___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=Module[\"asm\"][\"d\"]).apply(null,arguments)};var _argon2_hash=Module[\"_argon2_hash\"]=function(){return(_argon2_hash=Module[\"_argon2_hash\"]=Module[\"asm\"][\"e\"]).apply(null,arguments)};var _malloc=Module[\"_malloc\"]=function(){return(_malloc=Module[\"_malloc\"]=Module[\"asm\"][\"f\"]).apply(null,arguments)};var _free=Module[\"_free\"]=function(){return(_free=Module[\"_free\"]=Module[\"asm\"][\"g\"]).apply(null,arguments)};var _argon2_verify=Module[\"_argon2_verify\"]=function(){return(_argon2_verify=Module[\"_argon2_verify\"]=Module[\"asm\"][\"h\"]).apply(null,arguments)};var _argon2_error_message=Module[\"_argon2_error_message\"]=function(){return(_argon2_error_message=Module[\"_argon2_error_message\"]=Module[\"asm\"][\"i\"]).apply(null,arguments)};var _argon2_encodedlen=Module[\"_argon2_encodedlen\"]=function(){return(_argon2_encodedlen=Module[\"_argon2_encodedlen\"]=Module[\"asm\"][\"j\"]).apply(null,arguments)};var _argon2_hash_ext=Module[\"_argon2_hash_ext\"]=function(){return(_argon2_hash_ext=Module[\"_argon2_hash_ext\"]=Module[\"asm\"][\"l\"]).apply(null,arguments)};var _argon2_verify_ext=Module[\"_argon2_verify_ext\"]=function(){return(_argon2_verify_ext=Module[\"_argon2_verify_ext\"]=Module[\"asm\"][\"m\"]).apply(null,arguments)};var stackAlloc=Module[\"stackAlloc\"]=function(){return(stackAlloc=Module[\"stackAlloc\"]=Module[\"asm\"][\"n\"]).apply(null,arguments)};Module[\"allocate\"]=allocate;Module[\"UTF8ToString\"]=UTF8ToString;Module[\"ALLOC_NORMAL\"]=ALLOC_NORMAL;var calledRun;function ExitStatus(status){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+status+\")\";this.status=status}dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0){return}function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}Module[\"run\"]=run;if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}run();if(typeof module!==\"undefined\")module.exports=Module;Module.unloadRuntime=function(){if(typeof self!==\"undefined\"){delete self.Module}Module=jsModule=wasmMemory=wasmTable=asm=buffer=HEAP8=HEAPU8=HEAP16=HEAPU16=HEAP32=HEAPU32=HEAPF32=HEAPF64=undefined;if(typeof module!==\"undefined\"){delete module.exports}};\n",
    "(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        root.argon2 = factory();\n    }\n})(typeof self !== 'undefined' ? self : this, function () {\n    const global = typeof self !== 'undefined' ? self : this;\n\n    /**\n     * @enum\n     */\n    const ArgonType = {\n        Argon2d: 0,\n        Argon2i: 1,\n        Argon2id: 2,\n    };\n\n    function loadModule(mem) {\n        if (loadModule._promise) {\n            return loadModule._promise;\n        }\n        if (loadModule._module) {\n            return Promise.resolve(loadModule._module);\n        }\n        let promise;\n        if (\n            global.process &&\n            global.process.versions &&\n            global.process.versions.node\n        ) {\n            promise = loadWasmModule().then(\n                (Module) =>\n                    new Promise((resolve) => {\n                        Module.postRun = () => resolve(Module);\n                    })\n            );\n        } else {\n            promise = loadWasmBinary().then((wasmBinary) => {\n                const wasmMemory = mem ? createWasmMemory(mem) : undefined;\n                return initWasm(wasmBinary, wasmMemory);\n            });\n        }\n        loadModule._promise = promise;\n        return promise.then((Module) => {\n            loadModule._module = Module;\n            delete loadModule._promise;\n            return Module;\n        });\n    }\n\n    function initWasm(wasmBinary, wasmMemory) {\n        return new Promise((resolve) => {\n            global.Module = {\n                wasmBinary,\n                wasmMemory,\n                postRun() {\n                    resolve(Module);\n                },\n            };\n            return loadWasmModule();\n        });\n    }\n\n    function loadWasmModule() {\n        if (global.loadArgon2WasmModule) {\n            return global.loadArgon2WasmModule();\n        }\n        if (typeof require === 'function') {\n            return Promise.resolve(require('../dist/argon2.js'));\n        }\n        return import('../dist/argon2.js');\n    }\n\n    function loadWasmBinary() {\n        if (global.loadArgon2WasmBinary) {\n            return global.loadArgon2WasmBinary();\n        }\n        if (typeof require === 'function') {\n            return Promise.resolve(require('../dist/argon2.wasm')).then(\n                (wasmModule) => {\n                    return decodeWasmBinary(wasmModule);\n                }\n            );\n        }\n        const wasmPath =\n            global.argon2WasmPath ||\n            'node_modules/argon2-browser/dist/argon2.wasm';\n        return fetch(wasmPath)\n            .then((response) => response.arrayBuffer())\n            .then((ab) => new Uint8Array(ab));\n    }\n\n    function decodeWasmBinary(base64) {\n        const text = atob(base64);\n        const binary = new Uint8Array(new ArrayBuffer(text.length));\n        for (let i = 0; i < text.length; i++) {\n            binary[i] = text.charCodeAt(i);\n        }\n        return binary;\n    }\n\n    function createWasmMemory(mem) {\n        const KB = 1024;\n        const MB = 1024 * KB;\n        const GB = 1024 * MB;\n        const WASM_PAGE_SIZE = 64 * KB;\n\n        const totalMemory = (2 * GB - 64 * KB) / WASM_PAGE_SIZE;\n        const initialMemory = Math.min(\n            Math.max(Math.ceil((mem * KB) / WASM_PAGE_SIZE), 256) + 256,\n            totalMemory\n        );\n\n        return new WebAssembly.Memory({\n            initial: initialMemory,\n            maximum: totalMemory,\n        });\n    }\n\n    function allocateArray(Module, arr) {\n        return Module.allocate(arr, 'i8', Module.ALLOC_NORMAL);\n    }\n\n    function allocateArrayStr(Module, arr) {\n        const nullTerminatedArray = new Uint8Array([...arr, 0]);\n        return allocateArray(Module, nullTerminatedArray);\n    }\n\n    function encodeUtf8(str) {\n        if (typeof str !== 'string') {\n            return str;\n        }\n        if (typeof TextEncoder === 'function') {\n            return new TextEncoder().encode(str);\n        } else if (typeof Buffer === 'function') {\n            return Buffer.from(str);\n        } else {\n            throw new Error(\"Don't know how to encode UTF8\");\n        }\n    }\n\n    /**\n     * Argon2 hash\n     * @param {string|Uint8Array} params.pass - password string\n     * @param {string|Uint8Array} params.salt - salt string\n     * @param {number} [params.time=1] - the number of iterations\n     * @param {number} [params.mem=1024] - used memory, in KiB\n     * @param {number} [params.hashLen=24] - desired hash length\n     * @param {number} [params.parallelism=1] - desired parallelism\n     * @param {number} [params.type=argon2.ArgonType.Argon2d] - hash type:\n     *      argon2.ArgonType.Argon2d\n     *      argon2.ArgonType.Argon2i\n     *      argon2.ArgonType.Argon2id\n     *\n     * @return Promise\n     *\n     * @example\n     *  argon2.hash({ pass: 'password', salt: 'somesalt' })\n     *      .then(h => console.log(h.hash, h.hashHex, h.encoded))\n     *      .catch(e => console.error(e.message, e.code))\n     */\n    function argon2Hash(params) {\n        const mCost = params.mem || 1024;\n        return loadModule(mCost).then((Module) => {\n            const tCost = params.time || 1;\n            const parallelism = params.parallelism || 1;\n            const pwdEncoded = encodeUtf8(params.pass);\n            const pwd = allocateArrayStr(Module, pwdEncoded);\n            const pwdlen = pwdEncoded.length;\n            const saltEncoded = encodeUtf8(params.salt);\n            const salt = allocateArrayStr(Module, saltEncoded);\n            const saltlen = saltEncoded.length;\n            const argon2Type = params.type || ArgonType.Argon2d;\n            const hash = Module.allocate(\n                new Array(params.hashLen || 24),\n                'i8',\n                Module.ALLOC_NORMAL\n            );\n            const secret = params.secret\n                ? allocateArray(Module, params.secret)\n                : 0;\n            const secretlen = params.secret ? params.secret.byteLength : 0;\n            const ad = params.ad ? allocateArray(Module, params.ad) : 0;\n            const adlen = params.ad ? params.ad.byteLength : 0;\n            const hashlen = params.hashLen || 24;\n            const encodedlen = Module._argon2_encodedlen(\n                tCost,\n                mCost,\n                parallelism,\n                saltlen,\n                hashlen,\n                argon2Type\n            );\n            const encoded = Module.allocate(\n                new Array(encodedlen + 1),\n                'i8',\n                Module.ALLOC_NORMAL\n            );\n            const version = 0x13;\n            let err;\n            let res;\n            try {\n                res = Module._argon2_hash_ext(\n                    tCost,\n                    mCost,\n                    parallelism,\n                    pwd,\n                    pwdlen,\n                    salt,\n                    saltlen,\n                    hash,\n                    hashlen,\n                    encoded,\n                    encodedlen,\n                    argon2Type,\n                    secret,\n                    secretlen,\n                    ad,\n                    adlen,\n                    version\n                );\n            } catch (e) {\n                err = e;\n            }\n            let result;\n            if (res === 0 && !err) {\n                let hashStr = '';\n                const hashArr = new Uint8Array(hashlen);\n                for (let i = 0; i < hashlen; i++) {\n                    const byte = Module.HEAP8[hash + i];\n                    hashArr[i] = byte;\n                    hashStr += ('0' + (0xff & byte).toString(16)).slice(-2);\n                }\n                const encodedStr = Module.UTF8ToString(encoded);\n                result = {\n                    hash: hashArr,\n                    hashHex: hashStr,\n                    encoded: encodedStr,\n                };\n            } else {\n                try {\n                    if (!err) {\n                        err = Module.UTF8ToString(\n                            Module._argon2_error_message(res)\n                        );\n                    }\n                } catch (e) {}\n                result = { message: err, code: res };\n            }\n            try {\n                Module._free(pwd);\n                Module._free(salt);\n                Module._free(hash);\n                Module._free(encoded);\n                if (ad) {\n                    Module._free(ad);\n                }\n                if (secret) {\n                    Module._free(secret);\n                }\n            } catch (e) {}\n            if (err) {\n                throw result;\n            } else {\n                return result;\n            }\n        });\n    }\n\n    /**\n     * Argon2 verify function\n     * @param {string} params.pass - password string\n     * @param {string|Uint8Array} params.encoded - encoded hash\n     * @param {number} [params.type=argon2.ArgonType.Argon2d] - hash type:\n     *      argon2.ArgonType.Argon2d\n     *      argon2.ArgonType.Argon2i\n     *      argon2.ArgonType.Argon2id\n     *\n     * @returns Promise\n     *\n     * @example\n     *  argon2.verify({ pass: 'password', encoded: 'encoded-hash' })\n     *      .then(() => console.log('OK'))\n     *      .catch(e => console.error(e.message, e.code))\n     */\n    function argon2Verify(params) {\n        return loadModule().then((Module) => {\n            const pwdEncoded = encodeUtf8(params.pass);\n            const pwd = allocateArrayStr(Module, pwdEncoded);\n            const pwdlen = pwdEncoded.length;\n            const secret = params.secret\n                ? allocateArray(Module, params.secret)\n                : 0;\n            const secretlen = params.secret ? params.secret.byteLength : 0;\n            const ad = params.ad ? allocateArray(Module, params.ad) : 0;\n            const adlen = params.ad ? params.ad.byteLength : 0;\n            const encEncoded = encodeUtf8(params.encoded);\n            const enc = allocateArrayStr(Module, encEncoded);\n            let argon2Type = params.type;\n            if (argon2Type === undefined) {\n                let typeStr = params.encoded.split('$')[1];\n                if (typeStr) {\n                    typeStr = typeStr.replace('a', 'A');\n                    argon2Type = ArgonType[typeStr] || ArgonType.Argon2d;\n                }\n            }\n            let err;\n            let res;\n            try {\n                res = Module._argon2_verify_ext(\n                    enc,\n                    pwd,\n                    pwdlen,\n                    secret,\n                    secretlen,\n                    ad,\n                    adlen,\n                    argon2Type\n                );\n            } catch (e) {\n                err = e;\n            }\n            let result;\n            if (res || err) {\n                try {\n                    if (!err) {\n                        err = Module.UTF8ToString(\n                            Module._argon2_error_message(res)\n                        );\n                    }\n                } catch (e) {}\n                result = { message: err, code: res };\n            }\n            try {\n                Module._free(pwd);\n                Module._free(enc);\n            } catch (e) {}\n            if (err) {\n                throw result;\n            } else {\n                return result;\n            }\n        });\n    }\n\n    function unloadRuntime() {\n        if (loadModule._module) {\n            loadModule._module.unloadRuntime();\n            delete loadModule._promise;\n            delete loadModule._module;\n        }\n    }\n\n    return {\n        ArgonType,\n        hash: argon2Hash,\n        verify: argon2Verify,\n        unloadRuntime,\n    };\n});\n",
    "/* ------------------------------------------------------------------\n   Centralised error hierarchy - keeps stack traces out of user-space\n   ------------------------------------------------------------------ */\n\nexport class CryptitError extends Error {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, new.target.prototype);   // fix instanceof\n    this.name  = new.target.name;\n    this.stack = undefined;                              // no stack traces\n  }\n}\n\nexport class InvalidHeaderError   extends CryptitError {}\nexport class DecodingError        extends CryptitError {}\nexport class EncodingError        extends CryptitError {}\nexport class SchemeError         extends CryptitError {}\nexport class HeaderDecodeError    extends CryptitError {}\nexport class KeyDerivationError   extends CryptitError {}\nexport class EncryptionError      extends CryptitError {}\nexport class DecryptionError      extends CryptitError {}",
    "// packages/core/src/config/SchemeRegistry.ts\nimport { SchemeDescriptor } from \"../types/index.js\";\nimport { SchemeError } from \"../errors/index.js\";\n\nexport class SchemeRegistry {\n  private static readonly byId = new Map<number, SchemeDescriptor>();\n\n  static register(s: SchemeDescriptor): void {\n    if (this.byId.has(s.id)) throw new SchemeError(`Scheme ${s.id} already registered`);\n    this.byId.set(s.id, s);\n  }\n  static get(id: number): SchemeDescriptor {\n    const v = this.byId.get(id);\n    if (!v) throw new SchemeError(`Unknown scheme: ${id}`);\n    return v;\n  }\n  // default current scheme\n  static get current(): SchemeDescriptor { return this.get(0); }\n}",
    "// packages/core/src/algorithms/encryption/aes-gmc/AESGCM.ts\nimport { CryptoProvider }    from '../../../providers/CryptoProvider.js';\nimport { EncryptionAlgorithm } from '../../../types/index.js';\nimport { DecryptionError }   from '../../../errors/index.js';\n\nexport class AESGCM implements EncryptionAlgorithm {\n  private key!: CryptoKey;\n\n  constructor(private readonly p: CryptoProvider) {}\n\n  async setKey(k: CryptoKey) { this.key = k; }\n\n  async encryptChunk(plain: Uint8Array): Promise<Uint8Array> {\n    const iv = this.p.getRandomValues(new Uint8Array(12));\n    const cipher = new Uint8Array(\n      await this.p.subtle.encrypt({ name: 'AES-GCM', iv }, this.key, plain),\n    );\n    plain.fill(0)\n    const out = new Uint8Array(iv.length + cipher.length);\n    out.set(iv);\n    out.set(cipher, iv.length);\n    return out;\n  }\n\n  async decryptChunk(data: Uint8Array): Promise<Uint8Array> {\n    const iv     = data.slice(0, 12);\n    const cipher = data.slice(12);\n    try {\n      const plain = await this.p.subtle.decrypt(\n        { name: 'AES-GCM', iv },\n        this.key,\n        cipher,\n      );\n      return new Uint8Array(plain);\n    } catch {\n      throw new DecryptionError(\n        'Decryption failed: wrong passphrase or corrupted ciphertext',\n      );\n    }\n  }\n}",
    "/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-ciphers - MIT License (c) 2023 Paul Miller (paulmillr.com) */\n/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */\nexport function isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n/** Asserts something is boolean. */\nexport function abool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`boolean expected, not ${b}`);\n}\n/** Asserts something is positive integer. */\nexport function anumber(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error('positive integer expected, got ' + n);\n}\n/** Asserts something is Uint8Array. */\nexport function abytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n/**\n * Asserts something is hash\n * TODO: remove\n * @deprecated\n */\nexport function ahash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.createHasher');\n    anumber(h.outputLen);\n    anumber(h.blockLen);\n}\n/** Asserts a hash instance has not been destroyed / finished */\nexport function aexists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\n/** Asserts output is properly-sized byte array */\nexport function aoutput(out, instance) {\n    abytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error('digestInto() expects output buffer of length at least ' + min);\n    }\n}\n/** Cast u8 / u16 / u32 to u8. */\nexport function u8(arr) {\n    return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** Cast u8 / u16 / u32 to u32. */\nexport function u32(arr) {\n    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n/** Zeroize a byte array. Warning: JS provides no guarantees. */\nexport function clean(...arrays) {\n    for (let i = 0; i < arrays.length; i++) {\n        arrays[i].fill(0);\n    }\n}\n/** Create DataView of an array for easy byte-level manipulation. */\nexport function createView(arr) {\n    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\nconst hasHexBuiltin = /* @__PURE__ */ (() => \n// @ts-ignore\ntypeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function')();\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * Convert byte array to hex string. Uses built-in function, when available.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return bytes.toHex();\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * Convert hex string to byte array. Uses built-in function, when available.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return Uint8Array.fromHex(hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n// Used in micro\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    return BigInt(hex === '' ? '0' : '0x' + hex); // Big Endian\n}\n// Used in ff1\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\n// Used in micro, ff1\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\n// TODO: remove\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n/**\n * Converts string to bytes using UTF8 encoding.\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('string expected');\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(new Uint8Array([97, 98, 99])) // 'abc'\n */\nexport function bytesToUtf8(bytes) {\n    return new TextDecoder().decode(bytes);\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    else if (isBytes(data))\n        data = copyBytes(data);\n    else\n        throw new Error('Uint8Array expected, got ' + typeof data);\n    return data;\n}\n/**\n * Checks if two U8A use same underlying buffer and overlaps.\n * This is invalid and can corrupt data.\n */\nexport function overlapBytes(a, b) {\n    return (a.buffer === b.buffer && // best we can do, may fail with an obscure Proxy\n        a.byteOffset < b.byteOffset + b.byteLength && // a starts before b end\n        b.byteOffset < a.byteOffset + a.byteLength // b starts before a end\n    );\n}\n/**\n * If input and output overlap and input starts before output, we will overwrite end of input before\n * we start processing it, so this is not supported for most ciphers (except chacha/salse, which designed with this)\n */\nexport function complexOverlapBytes(input, output) {\n    // This is very cursed. It works somehow, but I'm completely unsure,\n    // reasoning about overlapping aligned windows is very hard.\n    if (overlapBytes(input, output) && input.byteOffset < output.byteOffset)\n        throw new Error('complex overlap of input and output is not supported');\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\nexport function checkOpts(defaults, opts) {\n    if (opts == null || typeof opts !== 'object')\n        throw new Error('options must be defined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\n/** Compares 2 uint8array-s in kinda constant time. */\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n// TODO: remove\n/** For runtime check if class implements interface. */\nexport class Hash {\n}\n/**\n * Wraps a cipher: validates args, ensures encrypt() can only be called once.\n * @__NO_SIDE_EFFECTS__\n */\nexport const wrapCipher = (params, constructor) => {\n    function wrappedCipher(key, ...args) {\n        // Validate key\n        abytes(key);\n        // Big-Endian hardware is rare. Just in case someone still decides to run ciphers:\n        if (!isLE)\n            throw new Error('Non little-endian hardware is not yet supported');\n        // Validate nonce if nonceLength is present\n        if (params.nonceLength !== undefined) {\n            const nonce = args[0];\n            if (!nonce)\n                throw new Error('nonce / iv required');\n            if (params.varSizeNonce)\n                abytes(nonce);\n            else\n                abytes(nonce, params.nonceLength);\n        }\n        // Validate AAD if tagLength present\n        const tagl = params.tagLength;\n        if (tagl && args[1] !== undefined) {\n            abytes(args[1]);\n        }\n        const cipher = constructor(key, ...args);\n        const checkOutput = (fnLength, output) => {\n            if (output !== undefined) {\n                if (fnLength !== 2)\n                    throw new Error('cipher output not supported');\n                abytes(output);\n            }\n        };\n        // Create wrapped cipher with validation and single-use encryption\n        let called = false;\n        const wrCipher = {\n            encrypt(data, output) {\n                if (called)\n                    throw new Error('cannot encrypt() twice with same key + nonce');\n                called = true;\n                abytes(data);\n                checkOutput(cipher.encrypt.length, output);\n                return cipher.encrypt(data, output);\n            },\n            decrypt(data, output) {\n                abytes(data);\n                if (tagl && data.length < tagl)\n                    throw new Error('invalid ciphertext length: smaller than tagLength=' + tagl);\n                checkOutput(cipher.decrypt.length, output);\n                return cipher.decrypt(data, output);\n            },\n        };\n        return wrCipher;\n    }\n    Object.assign(wrappedCipher, params);\n    return wrappedCipher;\n};\n/**\n * By default, returns u8a of length.\n * When out is available, it checks it for validity and uses it.\n */\nexport function getOutput(expectedLength, out, onlyAligned = true) {\n    if (out === undefined)\n        return new Uint8Array(expectedLength);\n    if (out.length !== expectedLength)\n        throw new Error('invalid output length, expected ' + expectedLength + ', got: ' + out.length);\n    if (onlyAligned && !isAligned32(out))\n        throw new Error('invalid output, must be aligned');\n    return out;\n}\n/** Polyfill for Safari 14. */\nexport function setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\nexport function u64Lengths(dataLength, aadLength, isLE) {\n    abool(isLE);\n    const num = new Uint8Array(16);\n    const view = createView(num);\n    setBigUint64(view, 0, BigInt(aadLength), isLE);\n    setBigUint64(view, 8, BigInt(dataLength), isLE);\n    return num;\n}\n// Is byte array aligned to 4 byte offset (u32)?\nexport function isAligned32(bytes) {\n    return bytes.byteOffset % 4 === 0;\n}\n// copy bytes to new u8a (aligned). Because Buffer.slice is broken.\nexport function copyBytes(bytes) {\n    return Uint8Array.from(bytes);\n}\n//# sourceMappingURL=utils.js.map",
    "/**\n * Basic utils for ARX (add-rotate-xor) salsa and chacha ciphers.\n\nRFC8439 requires multi-step cipher stream, where\nauthKey starts with counter: 0, actual msg with counter: 1.\n\nFor this, we need a way to re-use nonce / counter:\n\n    const counter = new Uint8Array(4);\n    chacha(..., counter, ...); // counter is now 1\n    chacha(..., counter, ...); // counter is now 2\n\nThis is complicated:\n\n- 32-bit counters are enough, no need for 64-bit: max ArrayBuffer size in JS is 4GB\n- Original papers don't allow mutating counters\n- Counter overflow is undefined [^1]\n- Idea A: allow providing (nonce | counter) instead of just nonce, re-use it\n- Caveat: Cannot be re-used through all cases:\n- * chacha has (counter | nonce)\n- * xchacha has (nonce16 | counter | nonce16)\n- Idea B: separate nonce / counter and provide separate API for counter re-use\n- Caveat: there are different counter sizes depending on an algorithm.\n- salsa & chacha also differ in structures of key & sigma:\n  salsa20:      s[0] | k(4) | s[1] | nonce(2) | ctr(2) | s[2] | k(4) | s[3]\n  chacha:       s(4) | k(8) | ctr(1) | nonce(3)\n  chacha20orig: s(4) | k(8) | ctr(2) | nonce(2)\n- Idea C: helper method such as `setSalsaState(key, nonce, sigma, data)`\n- Caveat: we can't re-use counter array\n\nxchacha [^2] uses the subkey and remaining 8 byte nonce with ChaCha20 as normal\n(prefixed by 4 NUL bytes, since [RFC8439] specifies a 12-byte nonce).\n\n[^1]: https://mailarchive.ietf.org/arch/msg/cfrg/gsOnTJzcbgG6OqD8Sc0GO5aR_tU/\n[^2]: https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha#appendix-A.2\n\n * @module\n */\n// prettier-ignore\nimport { abool, abytes, anumber, checkOpts, clean, copyBytes, u32 } from \"./utils.js\";\n// We can't make top-level var depend on utils.utf8ToBytes\n// because it's not present in all envs. Creating a similar fn here\nconst _utf8ToBytes = (str) => Uint8Array.from(str.split('').map((c) => c.charCodeAt(0)));\nconst sigma16 = _utf8ToBytes('expand 16-byte k');\nconst sigma32 = _utf8ToBytes('expand 32-byte k');\nconst sigma16_32 = u32(sigma16);\nconst sigma32_32 = u32(sigma32);\nexport function rotl(a, b) {\n    return (a << b) | (a >>> (32 - b));\n}\n// Is byte array aligned to 4 byte offset (u32)?\nfunction isAligned32(b) {\n    return b.byteOffset % 4 === 0;\n}\n// Salsa and Chacha block length is always 512-bit\nconst BLOCK_LEN = 64;\nconst BLOCK_LEN32 = 16;\n// new Uint32Array([2**32])   // => Uint32Array(1) [ 0 ]\n// new Uint32Array([2**32-1]) // => Uint32Array(1) [ 4294967295 ]\nconst MAX_COUNTER = 2 ** 32 - 1;\nconst U32_EMPTY = new Uint32Array();\nfunction runCipher(core, sigma, key, nonce, data, output, counter, rounds) {\n    const len = data.length;\n    const block = new Uint8Array(BLOCK_LEN);\n    const b32 = u32(block);\n    // Make sure that buffers aligned to 4 bytes\n    const isAligned = isAligned32(data) && isAligned32(output);\n    const d32 = isAligned ? u32(data) : U32_EMPTY;\n    const o32 = isAligned ? u32(output) : U32_EMPTY;\n    for (let pos = 0; pos < len; counter++) {\n        core(sigma, key, nonce, b32, counter, rounds);\n        if (counter >= MAX_COUNTER)\n            throw new Error('arx: counter overflow');\n        const take = Math.min(BLOCK_LEN, len - pos);\n        // aligned to 4 bytes\n        if (isAligned && take === BLOCK_LEN) {\n            const pos32 = pos / 4;\n            if (pos % 4 !== 0)\n                throw new Error('arx: invalid block position');\n            for (let j = 0, posj; j < BLOCK_LEN32; j++) {\n                posj = pos32 + j;\n                o32[posj] = d32[posj] ^ b32[j];\n            }\n            pos += BLOCK_LEN;\n            continue;\n        }\n        for (let j = 0, posj; j < take; j++) {\n            posj = pos + j;\n            output[posj] = data[posj] ^ block[j];\n        }\n        pos += take;\n    }\n}\n/** Creates ARX-like (ChaCha, Salsa) cipher stream from core function. */\nexport function createCipher(core, opts) {\n    const { allowShortKeys, extendNonceFn, counterLength, counterRight, rounds } = checkOpts({ allowShortKeys: false, counterLength: 8, counterRight: false, rounds: 20 }, opts);\n    if (typeof core !== 'function')\n        throw new Error('core must be a function');\n    anumber(counterLength);\n    anumber(rounds);\n    abool(counterRight);\n    abool(allowShortKeys);\n    return (key, nonce, data, output, counter = 0) => {\n        abytes(key);\n        abytes(nonce);\n        abytes(data);\n        const len = data.length;\n        if (output === undefined)\n            output = new Uint8Array(len);\n        abytes(output);\n        anumber(counter);\n        if (counter < 0 || counter >= MAX_COUNTER)\n            throw new Error('arx: counter overflow');\n        if (output.length < len)\n            throw new Error(`arx: output (${output.length}) is shorter than data (${len})`);\n        const toClean = [];\n        // Key & sigma\n        // key=16 -> sigma16, k=key|key\n        // key=32 -> sigma32, k=key\n        let l = key.length;\n        let k;\n        let sigma;\n        if (l === 32) {\n            toClean.push((k = copyBytes(key)));\n            sigma = sigma32_32;\n        }\n        else if (l === 16 && allowShortKeys) {\n            k = new Uint8Array(32);\n            k.set(key);\n            k.set(key, 16);\n            sigma = sigma16_32;\n            toClean.push(k);\n        }\n        else {\n            throw new Error(`arx: invalid 32-byte key, got length=${l}`);\n        }\n        // Nonce\n        // salsa20:      8   (8-byte counter)\n        // chacha20orig: 8   (8-byte counter)\n        // chacha20:     12  (4-byte counter)\n        // xsalsa20:     24  (16 -> hsalsa,  8 -> old nonce)\n        // xchacha20:    24  (16 -> hchacha, 8 -> old nonce)\n        // Align nonce to 4 bytes\n        if (!isAligned32(nonce))\n            toClean.push((nonce = copyBytes(nonce)));\n        const k32 = u32(k);\n        // hsalsa & hchacha: handle extended nonce\n        if (extendNonceFn) {\n            if (nonce.length !== 24)\n                throw new Error(`arx: extended nonce must be 24 bytes`);\n            extendNonceFn(sigma, k32, u32(nonce.subarray(0, 16)), k32);\n            nonce = nonce.subarray(16);\n        }\n        // Handle nonce counter\n        const nonceNcLen = 16 - counterLength;\n        if (nonceNcLen !== nonce.length)\n            throw new Error(`arx: nonce must be ${nonceNcLen} or 16 bytes`);\n        // Pad counter when nonce is 64 bit\n        if (nonceNcLen !== 12) {\n            const nc = new Uint8Array(12);\n            nc.set(nonce, counterRight ? 0 : 12 - nonce.length);\n            nonce = nc;\n            toClean.push(nonce);\n        }\n        const n32 = u32(nonce);\n        runCipher(core, sigma, k32, n32, data, output, counter, rounds);\n        clean(...toClean);\n        return output;\n    };\n}\n//# sourceMappingURL=_arx.js.map",
    "/**\n * Poly1305 ([PDF](https://cr.yp.to/mac/poly1305-20050329.pdf),\n * [wiki](https://en.wikipedia.org/wiki/Poly1305))\n * is a fast and parallel secret-key message-authentication code suitable for\n * a wide variety of applications. It was standardized in\n * [RFC 8439](https://datatracker.ietf.org/doc/html/rfc8439) and is now used in TLS 1.3.\n *\n * Polynomial MACs are not perfect for every situation:\n * they lack Random Key Robustness: the MAC can be forged, and can't be used in PAKE schemes.\n * See [invisible salamanders attack](https://keymaterial.net/2020/09/07/invisible-salamanders-in-aes-gcm-siv/).\n * To combat invisible salamanders, `hash(key)` can be included in ciphertext,\n * however, this would violate ciphertext indistinguishability:\n * an attacker would know which key was used - so `HKDF(key, i)`\n * could be used instead.\n *\n * Check out [original website](https://cr.yp.to/mac.html).\n * @module\n */\nimport { Hash, abytes, aexists, aoutput, clean, toBytes } from \"./utils.js\";\n// Based on Public Domain poly1305-donna https://github.com/floodyberry/poly1305-donna\nconst u8to16 = (a, i) => (a[i++] & 0xff) | ((a[i++] & 0xff) << 8);\nclass Poly1305 {\n    constructor(key) {\n        this.blockLen = 16;\n        this.outputLen = 16;\n        this.buffer = new Uint8Array(16);\n        this.r = new Uint16Array(10);\n        this.h = new Uint16Array(10);\n        this.pad = new Uint16Array(8);\n        this.pos = 0;\n        this.finished = false;\n        key = toBytes(key);\n        abytes(key, 32);\n        const t0 = u8to16(key, 0);\n        const t1 = u8to16(key, 2);\n        const t2 = u8to16(key, 4);\n        const t3 = u8to16(key, 6);\n        const t4 = u8to16(key, 8);\n        const t5 = u8to16(key, 10);\n        const t6 = u8to16(key, 12);\n        const t7 = u8to16(key, 14);\n        // https://github.com/floodyberry/poly1305-donna/blob/e6ad6e091d30d7f4ec2d4f978be1fcfcbce72781/poly1305-donna-16.h#L47\n        this.r[0] = t0 & 0x1fff;\n        this.r[1] = ((t0 >>> 13) | (t1 << 3)) & 0x1fff;\n        this.r[2] = ((t1 >>> 10) | (t2 << 6)) & 0x1f03;\n        this.r[3] = ((t2 >>> 7) | (t3 << 9)) & 0x1fff;\n        this.r[4] = ((t3 >>> 4) | (t4 << 12)) & 0x00ff;\n        this.r[5] = (t4 >>> 1) & 0x1ffe;\n        this.r[6] = ((t4 >>> 14) | (t5 << 2)) & 0x1fff;\n        this.r[7] = ((t5 >>> 11) | (t6 << 5)) & 0x1f81;\n        this.r[8] = ((t6 >>> 8) | (t7 << 8)) & 0x1fff;\n        this.r[9] = (t7 >>> 5) & 0x007f;\n        for (let i = 0; i < 8; i++)\n            this.pad[i] = u8to16(key, 16 + 2 * i);\n    }\n    process(data, offset, isLast = false) {\n        const hibit = isLast ? 0 : 1 << 11;\n        const { h, r } = this;\n        const r0 = r[0];\n        const r1 = r[1];\n        const r2 = r[2];\n        const r3 = r[3];\n        const r4 = r[4];\n        const r5 = r[5];\n        const r6 = r[6];\n        const r7 = r[7];\n        const r8 = r[8];\n        const r9 = r[9];\n        const t0 = u8to16(data, offset + 0);\n        const t1 = u8to16(data, offset + 2);\n        const t2 = u8to16(data, offset + 4);\n        const t3 = u8to16(data, offset + 6);\n        const t4 = u8to16(data, offset + 8);\n        const t5 = u8to16(data, offset + 10);\n        const t6 = u8to16(data, offset + 12);\n        const t7 = u8to16(data, offset + 14);\n        let h0 = h[0] + (t0 & 0x1fff);\n        let h1 = h[1] + (((t0 >>> 13) | (t1 << 3)) & 0x1fff);\n        let h2 = h[2] + (((t1 >>> 10) | (t2 << 6)) & 0x1fff);\n        let h3 = h[3] + (((t2 >>> 7) | (t3 << 9)) & 0x1fff);\n        let h4 = h[4] + (((t3 >>> 4) | (t4 << 12)) & 0x1fff);\n        let h5 = h[5] + ((t4 >>> 1) & 0x1fff);\n        let h6 = h[6] + (((t4 >>> 14) | (t5 << 2)) & 0x1fff);\n        let h7 = h[7] + (((t5 >>> 11) | (t6 << 5)) & 0x1fff);\n        let h8 = h[8] + (((t6 >>> 8) | (t7 << 8)) & 0x1fff);\n        let h9 = h[9] + ((t7 >>> 5) | hibit);\n        let c = 0;\n        let d0 = c + h0 * r0 + h1 * (5 * r9) + h2 * (5 * r8) + h3 * (5 * r7) + h4 * (5 * r6);\n        c = d0 >>> 13;\n        d0 &= 0x1fff;\n        d0 += h5 * (5 * r5) + h6 * (5 * r4) + h7 * (5 * r3) + h8 * (5 * r2) + h9 * (5 * r1);\n        c += d0 >>> 13;\n        d0 &= 0x1fff;\n        let d1 = c + h0 * r1 + h1 * r0 + h2 * (5 * r9) + h3 * (5 * r8) + h4 * (5 * r7);\n        c = d1 >>> 13;\n        d1 &= 0x1fff;\n        d1 += h5 * (5 * r6) + h6 * (5 * r5) + h7 * (5 * r4) + h8 * (5 * r3) + h9 * (5 * r2);\n        c += d1 >>> 13;\n        d1 &= 0x1fff;\n        let d2 = c + h0 * r2 + h1 * r1 + h2 * r0 + h3 * (5 * r9) + h4 * (5 * r8);\n        c = d2 >>> 13;\n        d2 &= 0x1fff;\n        d2 += h5 * (5 * r7) + h6 * (5 * r6) + h7 * (5 * r5) + h8 * (5 * r4) + h9 * (5 * r3);\n        c += d2 >>> 13;\n        d2 &= 0x1fff;\n        let d3 = c + h0 * r3 + h1 * r2 + h2 * r1 + h3 * r0 + h4 * (5 * r9);\n        c = d3 >>> 13;\n        d3 &= 0x1fff;\n        d3 += h5 * (5 * r8) + h6 * (5 * r7) + h7 * (5 * r6) + h8 * (5 * r5) + h9 * (5 * r4);\n        c += d3 >>> 13;\n        d3 &= 0x1fff;\n        let d4 = c + h0 * r4 + h1 * r3 + h2 * r2 + h3 * r1 + h4 * r0;\n        c = d4 >>> 13;\n        d4 &= 0x1fff;\n        d4 += h5 * (5 * r9) + h6 * (5 * r8) + h7 * (5 * r7) + h8 * (5 * r6) + h9 * (5 * r5);\n        c += d4 >>> 13;\n        d4 &= 0x1fff;\n        let d5 = c + h0 * r5 + h1 * r4 + h2 * r3 + h3 * r2 + h4 * r1;\n        c = d5 >>> 13;\n        d5 &= 0x1fff;\n        d5 += h5 * r0 + h6 * (5 * r9) + h7 * (5 * r8) + h8 * (5 * r7) + h9 * (5 * r6);\n        c += d5 >>> 13;\n        d5 &= 0x1fff;\n        let d6 = c + h0 * r6 + h1 * r5 + h2 * r4 + h3 * r3 + h4 * r2;\n        c = d6 >>> 13;\n        d6 &= 0x1fff;\n        d6 += h5 * r1 + h6 * r0 + h7 * (5 * r9) + h8 * (5 * r8) + h9 * (5 * r7);\n        c += d6 >>> 13;\n        d6 &= 0x1fff;\n        let d7 = c + h0 * r7 + h1 * r6 + h2 * r5 + h3 * r4 + h4 * r3;\n        c = d7 >>> 13;\n        d7 &= 0x1fff;\n        d7 += h5 * r2 + h6 * r1 + h7 * r0 + h8 * (5 * r9) + h9 * (5 * r8);\n        c += d7 >>> 13;\n        d7 &= 0x1fff;\n        let d8 = c + h0 * r8 + h1 * r7 + h2 * r6 + h3 * r5 + h4 * r4;\n        c = d8 >>> 13;\n        d8 &= 0x1fff;\n        d8 += h5 * r3 + h6 * r2 + h7 * r1 + h8 * r0 + h9 * (5 * r9);\n        c += d8 >>> 13;\n        d8 &= 0x1fff;\n        let d9 = c + h0 * r9 + h1 * r8 + h2 * r7 + h3 * r6 + h4 * r5;\n        c = d9 >>> 13;\n        d9 &= 0x1fff;\n        d9 += h5 * r4 + h6 * r3 + h7 * r2 + h8 * r1 + h9 * r0;\n        c += d9 >>> 13;\n        d9 &= 0x1fff;\n        c = ((c << 2) + c) | 0;\n        c = (c + d0) | 0;\n        d0 = c & 0x1fff;\n        c = c >>> 13;\n        d1 += c;\n        h[0] = d0;\n        h[1] = d1;\n        h[2] = d2;\n        h[3] = d3;\n        h[4] = d4;\n        h[5] = d5;\n        h[6] = d6;\n        h[7] = d7;\n        h[8] = d8;\n        h[9] = d9;\n    }\n    finalize() {\n        const { h, pad } = this;\n        const g = new Uint16Array(10);\n        let c = h[1] >>> 13;\n        h[1] &= 0x1fff;\n        for (let i = 2; i < 10; i++) {\n            h[i] += c;\n            c = h[i] >>> 13;\n            h[i] &= 0x1fff;\n        }\n        h[0] += c * 5;\n        c = h[0] >>> 13;\n        h[0] &= 0x1fff;\n        h[1] += c;\n        c = h[1] >>> 13;\n        h[1] &= 0x1fff;\n        h[2] += c;\n        g[0] = h[0] + 5;\n        c = g[0] >>> 13;\n        g[0] &= 0x1fff;\n        for (let i = 1; i < 10; i++) {\n            g[i] = h[i] + c;\n            c = g[i] >>> 13;\n            g[i] &= 0x1fff;\n        }\n        g[9] -= 1 << 13;\n        let mask = (c ^ 1) - 1;\n        for (let i = 0; i < 10; i++)\n            g[i] &= mask;\n        mask = ~mask;\n        for (let i = 0; i < 10; i++)\n            h[i] = (h[i] & mask) | g[i];\n        h[0] = (h[0] | (h[1] << 13)) & 0xffff;\n        h[1] = ((h[1] >>> 3) | (h[2] << 10)) & 0xffff;\n        h[2] = ((h[2] >>> 6) | (h[3] << 7)) & 0xffff;\n        h[3] = ((h[3] >>> 9) | (h[4] << 4)) & 0xffff;\n        h[4] = ((h[4] >>> 12) | (h[5] << 1) | (h[6] << 14)) & 0xffff;\n        h[5] = ((h[6] >>> 2) | (h[7] << 11)) & 0xffff;\n        h[6] = ((h[7] >>> 5) | (h[8] << 8)) & 0xffff;\n        h[7] = ((h[8] >>> 8) | (h[9] << 5)) & 0xffff;\n        let f = h[0] + pad[0];\n        h[0] = f & 0xffff;\n        for (let i = 1; i < 8; i++) {\n            f = (((h[i] + pad[i]) | 0) + (f >>> 16)) | 0;\n            h[i] = f & 0xffff;\n        }\n        clean(g);\n    }\n    update(data) {\n        aexists(this);\n        data = toBytes(data);\n        abytes(data);\n        const { buffer, blockLen } = this;\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input\n            if (take === blockLen) {\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(data, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(buffer, 0, false);\n                this.pos = 0;\n            }\n        }\n        return this;\n    }\n    destroy() {\n        clean(this.h, this.r, this.buffer, this.pad);\n    }\n    digestInto(out) {\n        aexists(this);\n        aoutput(out, this);\n        this.finished = true;\n        const { buffer, h } = this;\n        let { pos } = this;\n        if (pos) {\n            buffer[pos++] = 1;\n            for (; pos < 16; pos++)\n                buffer[pos] = 0;\n            this.process(buffer, 0, true);\n        }\n        this.finalize();\n        let opos = 0;\n        for (let i = 0; i < 8; i++) {\n            out[opos++] = h[i] >>> 0;\n            out[opos++] = h[i] >>> 8;\n        }\n        return out;\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n}\nexport function wrapConstructorWithKey(hashCons) {\n    const hashC = (msg, key) => hashCons(key).update(toBytes(msg)).digest();\n    const tmp = hashCons(new Uint8Array(32));\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (key) => hashCons(key);\n    return hashC;\n}\n/** Poly1305 MAC from RFC 8439. */\nexport const poly1305 = wrapConstructorWithKey((key) => new Poly1305(key));\n//# sourceMappingURL=_poly1305.js.map",
    "/**\n * [ChaCha20](https://cr.yp.to/chacha.html) stream cipher, released\n * in 2008. Developed after Salsa20, ChaCha aims to increase diffusion per round.\n * It was standardized in [RFC 8439](https://datatracker.ietf.org/doc/html/rfc8439) and\n * is now used in TLS 1.3.\n *\n * [XChaCha20](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha)\n * extended-nonce variant is also provided. Similar to XSalsa, it's safe to use with\n * randomly-generated nonces.\n *\n * Check out [PDF](http://cr.yp.to/chacha/chacha-20080128.pdf) and\n * [wiki](https://en.wikipedia.org/wiki/Salsa20).\n * @module\n */\nimport { createCipher, rotl } from \"./_arx.js\";\nimport { poly1305 } from \"./_poly1305.js\";\nimport { clean, equalBytes, getOutput, u64Lengths, wrapCipher, } from \"./utils.js\";\n/**\n * ChaCha core function.\n */\n// prettier-ignore\nfunction chachaCore(s, k, n, out, cnt, rounds = 20) {\n    let y00 = s[0], y01 = s[1], y02 = s[2], y03 = s[3], // \"expa\"   \"nd 3\"  \"2-by\"  \"te k\"\n    y04 = k[0], y05 = k[1], y06 = k[2], y07 = k[3], // Key      Key     Key     Key\n    y08 = k[4], y09 = k[5], y10 = k[6], y11 = k[7], // Key      Key     Key     Key\n    y12 = cnt, y13 = n[0], y14 = n[1], y15 = n[2]; // Counter  Counter\tNonce   Nonce\n    // Save state to temporary variables\n    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;\n    for (let r = 0; r < rounds; r += 2) {\n        x00 = (x00 + x04) | 0;\n        x12 = rotl(x12 ^ x00, 16);\n        x08 = (x08 + x12) | 0;\n        x04 = rotl(x04 ^ x08, 12);\n        x00 = (x00 + x04) | 0;\n        x12 = rotl(x12 ^ x00, 8);\n        x08 = (x08 + x12) | 0;\n        x04 = rotl(x04 ^ x08, 7);\n        x01 = (x01 + x05) | 0;\n        x13 = rotl(x13 ^ x01, 16);\n        x09 = (x09 + x13) | 0;\n        x05 = rotl(x05 ^ x09, 12);\n        x01 = (x01 + x05) | 0;\n        x13 = rotl(x13 ^ x01, 8);\n        x09 = (x09 + x13) | 0;\n        x05 = rotl(x05 ^ x09, 7);\n        x02 = (x02 + x06) | 0;\n        x14 = rotl(x14 ^ x02, 16);\n        x10 = (x10 + x14) | 0;\n        x06 = rotl(x06 ^ x10, 12);\n        x02 = (x02 + x06) | 0;\n        x14 = rotl(x14 ^ x02, 8);\n        x10 = (x10 + x14) | 0;\n        x06 = rotl(x06 ^ x10, 7);\n        x03 = (x03 + x07) | 0;\n        x15 = rotl(x15 ^ x03, 16);\n        x11 = (x11 + x15) | 0;\n        x07 = rotl(x07 ^ x11, 12);\n        x03 = (x03 + x07) | 0;\n        x15 = rotl(x15 ^ x03, 8);\n        x11 = (x11 + x15) | 0;\n        x07 = rotl(x07 ^ x11, 7);\n        x00 = (x00 + x05) | 0;\n        x15 = rotl(x15 ^ x00, 16);\n        x10 = (x10 + x15) | 0;\n        x05 = rotl(x05 ^ x10, 12);\n        x00 = (x00 + x05) | 0;\n        x15 = rotl(x15 ^ x00, 8);\n        x10 = (x10 + x15) | 0;\n        x05 = rotl(x05 ^ x10, 7);\n        x01 = (x01 + x06) | 0;\n        x12 = rotl(x12 ^ x01, 16);\n        x11 = (x11 + x12) | 0;\n        x06 = rotl(x06 ^ x11, 12);\n        x01 = (x01 + x06) | 0;\n        x12 = rotl(x12 ^ x01, 8);\n        x11 = (x11 + x12) | 0;\n        x06 = rotl(x06 ^ x11, 7);\n        x02 = (x02 + x07) | 0;\n        x13 = rotl(x13 ^ x02, 16);\n        x08 = (x08 + x13) | 0;\n        x07 = rotl(x07 ^ x08, 12);\n        x02 = (x02 + x07) | 0;\n        x13 = rotl(x13 ^ x02, 8);\n        x08 = (x08 + x13) | 0;\n        x07 = rotl(x07 ^ x08, 7);\n        x03 = (x03 + x04) | 0;\n        x14 = rotl(x14 ^ x03, 16);\n        x09 = (x09 + x14) | 0;\n        x04 = rotl(x04 ^ x09, 12);\n        x03 = (x03 + x04) | 0;\n        x14 = rotl(x14 ^ x03, 8);\n        x09 = (x09 + x14) | 0;\n        x04 = rotl(x04 ^ x09, 7);\n    }\n    // Write output\n    let oi = 0;\n    out[oi++] = (y00 + x00) | 0;\n    out[oi++] = (y01 + x01) | 0;\n    out[oi++] = (y02 + x02) | 0;\n    out[oi++] = (y03 + x03) | 0;\n    out[oi++] = (y04 + x04) | 0;\n    out[oi++] = (y05 + x05) | 0;\n    out[oi++] = (y06 + x06) | 0;\n    out[oi++] = (y07 + x07) | 0;\n    out[oi++] = (y08 + x08) | 0;\n    out[oi++] = (y09 + x09) | 0;\n    out[oi++] = (y10 + x10) | 0;\n    out[oi++] = (y11 + x11) | 0;\n    out[oi++] = (y12 + x12) | 0;\n    out[oi++] = (y13 + x13) | 0;\n    out[oi++] = (y14 + x14) | 0;\n    out[oi++] = (y15 + x15) | 0;\n}\n/**\n * hchacha helper method, used primarily in xchacha, to hash\n * key and nonce into key' and nonce'.\n * Same as chachaCore, but there doesn't seem to be a way to move the block\n * out without 25% performance hit.\n */\n// prettier-ignore\nexport function hchacha(s, k, i, o32) {\n    let x00 = s[0], x01 = s[1], x02 = s[2], x03 = s[3], x04 = k[0], x05 = k[1], x06 = k[2], x07 = k[3], x08 = k[4], x09 = k[5], x10 = k[6], x11 = k[7], x12 = i[0], x13 = i[1], x14 = i[2], x15 = i[3];\n    for (let r = 0; r < 20; r += 2) {\n        x00 = (x00 + x04) | 0;\n        x12 = rotl(x12 ^ x00, 16);\n        x08 = (x08 + x12) | 0;\n        x04 = rotl(x04 ^ x08, 12);\n        x00 = (x00 + x04) | 0;\n        x12 = rotl(x12 ^ x00, 8);\n        x08 = (x08 + x12) | 0;\n        x04 = rotl(x04 ^ x08, 7);\n        x01 = (x01 + x05) | 0;\n        x13 = rotl(x13 ^ x01, 16);\n        x09 = (x09 + x13) | 0;\n        x05 = rotl(x05 ^ x09, 12);\n        x01 = (x01 + x05) | 0;\n        x13 = rotl(x13 ^ x01, 8);\n        x09 = (x09 + x13) | 0;\n        x05 = rotl(x05 ^ x09, 7);\n        x02 = (x02 + x06) | 0;\n        x14 = rotl(x14 ^ x02, 16);\n        x10 = (x10 + x14) | 0;\n        x06 = rotl(x06 ^ x10, 12);\n        x02 = (x02 + x06) | 0;\n        x14 = rotl(x14 ^ x02, 8);\n        x10 = (x10 + x14) | 0;\n        x06 = rotl(x06 ^ x10, 7);\n        x03 = (x03 + x07) | 0;\n        x15 = rotl(x15 ^ x03, 16);\n        x11 = (x11 + x15) | 0;\n        x07 = rotl(x07 ^ x11, 12);\n        x03 = (x03 + x07) | 0;\n        x15 = rotl(x15 ^ x03, 8);\n        x11 = (x11 + x15) | 0;\n        x07 = rotl(x07 ^ x11, 7);\n        x00 = (x00 + x05) | 0;\n        x15 = rotl(x15 ^ x00, 16);\n        x10 = (x10 + x15) | 0;\n        x05 = rotl(x05 ^ x10, 12);\n        x00 = (x00 + x05) | 0;\n        x15 = rotl(x15 ^ x00, 8);\n        x10 = (x10 + x15) | 0;\n        x05 = rotl(x05 ^ x10, 7);\n        x01 = (x01 + x06) | 0;\n        x12 = rotl(x12 ^ x01, 16);\n        x11 = (x11 + x12) | 0;\n        x06 = rotl(x06 ^ x11, 12);\n        x01 = (x01 + x06) | 0;\n        x12 = rotl(x12 ^ x01, 8);\n        x11 = (x11 + x12) | 0;\n        x06 = rotl(x06 ^ x11, 7);\n        x02 = (x02 + x07) | 0;\n        x13 = rotl(x13 ^ x02, 16);\n        x08 = (x08 + x13) | 0;\n        x07 = rotl(x07 ^ x08, 12);\n        x02 = (x02 + x07) | 0;\n        x13 = rotl(x13 ^ x02, 8);\n        x08 = (x08 + x13) | 0;\n        x07 = rotl(x07 ^ x08, 7);\n        x03 = (x03 + x04) | 0;\n        x14 = rotl(x14 ^ x03, 16);\n        x09 = (x09 + x14) | 0;\n        x04 = rotl(x04 ^ x09, 12);\n        x03 = (x03 + x04) | 0;\n        x14 = rotl(x14 ^ x03, 8);\n        x09 = (x09 + x14) | 0;\n        x04 = rotl(x04 ^ x09, 7);\n    }\n    let oi = 0;\n    o32[oi++] = x00;\n    o32[oi++] = x01;\n    o32[oi++] = x02;\n    o32[oi++] = x03;\n    o32[oi++] = x12;\n    o32[oi++] = x13;\n    o32[oi++] = x14;\n    o32[oi++] = x15;\n}\n/**\n * Original, non-RFC chacha20 from DJB. 8-byte nonce, 8-byte counter.\n */\nexport const chacha20orig = /* @__PURE__ */ createCipher(chachaCore, {\n    counterRight: false,\n    counterLength: 8,\n    allowShortKeys: true,\n});\n/**\n * ChaCha stream cipher. Conforms to RFC 8439 (IETF, TLS). 12-byte nonce, 4-byte counter.\n * With 12-byte nonce, it's not safe to use fill it with random (CSPRNG), due to collision chance.\n */\nexport const chacha20 = /* @__PURE__ */ createCipher(chachaCore, {\n    counterRight: false,\n    counterLength: 4,\n    allowShortKeys: false,\n});\n/**\n * XChaCha eXtended-nonce ChaCha. 24-byte nonce.\n * With 24-byte nonce, it's safe to use fill it with random (CSPRNG).\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha\n */\nexport const xchacha20 = /* @__PURE__ */ createCipher(chachaCore, {\n    counterRight: false,\n    counterLength: 8,\n    extendNonceFn: hchacha,\n    allowShortKeys: false,\n});\n/**\n * Reduced 8-round chacha, described in original paper.\n */\nexport const chacha8 = /* @__PURE__ */ createCipher(chachaCore, {\n    counterRight: false,\n    counterLength: 4,\n    rounds: 8,\n});\n/**\n * Reduced 12-round chacha, described in original paper.\n */\nexport const chacha12 = /* @__PURE__ */ createCipher(chachaCore, {\n    counterRight: false,\n    counterLength: 4,\n    rounds: 12,\n});\nconst ZEROS16 = /* @__PURE__ */ new Uint8Array(16);\n// Pad to digest size with zeros\nconst updatePadded = (h, msg) => {\n    h.update(msg);\n    const left = msg.length % 16;\n    if (left)\n        h.update(ZEROS16.subarray(left));\n};\nconst ZEROS32 = /* @__PURE__ */ new Uint8Array(32);\nfunction computeTag(fn, key, nonce, data, AAD) {\n    const authKey = fn(key, nonce, ZEROS32);\n    const h = poly1305.create(authKey);\n    if (AAD)\n        updatePadded(h, AAD);\n    updatePadded(h, data);\n    const num = u64Lengths(data.length, AAD ? AAD.length : 0, true);\n    h.update(num);\n    const res = h.digest();\n    clean(authKey, num);\n    return res;\n}\n/**\n * AEAD algorithm from RFC 8439.\n * Salsa20 and chacha (RFC 8439) use poly1305 differently.\n * We could have composed them similar to:\n * https://github.com/paulmillr/scure-base/blob/b266c73dde977b1dd7ef40ef7a23cc15aab526b3/index.ts#L250\n * But it's hard because of authKey:\n * In salsa20, authKey changes position in salsa stream.\n * In chacha, authKey can't be computed inside computeTag, it modifies the counter.\n */\nexport const _poly1305_aead = (xorStream) => (key, nonce, AAD) => {\n    const tagLength = 16;\n    return {\n        encrypt(plaintext, output) {\n            const plength = plaintext.length;\n            output = getOutput(plength + tagLength, output, false);\n            output.set(plaintext);\n            const oPlain = output.subarray(0, -tagLength);\n            xorStream(key, nonce, oPlain, oPlain, 1);\n            const tag = computeTag(xorStream, key, nonce, oPlain, AAD);\n            output.set(tag, plength); // append tag\n            clean(tag);\n            return output;\n        },\n        decrypt(ciphertext, output) {\n            output = getOutput(ciphertext.length - tagLength, output, false);\n            const data = ciphertext.subarray(0, -tagLength);\n            const passedTag = ciphertext.subarray(-tagLength);\n            const tag = computeTag(xorStream, key, nonce, data, AAD);\n            if (!equalBytes(passedTag, tag))\n                throw new Error('invalid tag');\n            output.set(ciphertext.subarray(0, -tagLength));\n            xorStream(key, nonce, output, output, 1); // start stream with i=1\n            clean(tag);\n            return output;\n        },\n    };\n};\n/**\n * ChaCha20-Poly1305 from RFC 8439.\n *\n * Unsafe to use random nonces under the same key, due to collision chance.\n * Prefer XChaCha instead.\n */\nexport const chacha20poly1305 = /* @__PURE__ */ wrapCipher({ blockSize: 64, nonceLength: 12, tagLength: 16 }, _poly1305_aead(chacha20));\n/**\n * XChaCha20-Poly1305 extended-nonce chacha.\n *\n * Can be safely used with random nonces (CSPRNG).\n * See [IRTF draft](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha).\n */\nexport const xchacha20poly1305 = /* @__PURE__ */ wrapCipher({ blockSize: 64, nonceLength: 24, tagLength: 16 }, _poly1305_aead(xchacha20));\n//# sourceMappingURL=chacha.js.map",
    "import { xchacha20poly1305 } from '@noble/ciphers/chacha.js';\nimport { CryptoProvider } from '../../../providers/CryptoProvider.js';\nimport { EncryptionAlgorithm } from '../../../types/index.js';\nimport { DecryptionError } from '../../../errors/index.js';\n\nexport class XChaCha20Poly1305 implements EncryptionAlgorithm {\n  private key!: Uint8Array;\n\n  constructor(private readonly p: CryptoProvider) {}\n\n  /**\n   * Export the raw key material for use with @noble/ciphers\n   */\n  async setKey(k: CryptoKey) {\n    this.key = new Uint8Array(await this.p.subtle.exportKey('raw', k));\n  }\n\n  /**\n   * Encrypts a chunk with XChaCha20-Poly1305:\n   * - Generates a 24-byte nonce\n   * - Prepends nonce to ciphertext || tag\n   */\n  async encryptChunk(plain: Uint8Array): Promise<Uint8Array> {\n    const nonce = this.p.getRandomValues(new Uint8Array(24));\n    const cipher = xchacha20poly1305(this.key, nonce);\n    const cipherAndTag = cipher.encrypt(plain);\n    plain.fill(0);\n    const out = new Uint8Array(nonce.length + cipherAndTag.length);\n    out.set(nonce, 0);\n    out.set(cipherAndTag, nonce.length);\n    return out;\n  }\n\n  /**\n   * Decrypts a chunk with XChaCha20-Poly1305:\n   * - Extracts nonce (first 24 bytes)\n   * - Decrypts ciphertext || tag\n   * - Throws on authentication failure\n   */\n  async decryptChunk(data: Uint8Array): Promise<Uint8Array> {\n    const nonce = data.slice(0, 24);\n    const cipherAndTag = data.slice(24);\n    const cipher = xchacha20poly1305(this.key, nonce);\n    try {\n      return cipher.decrypt(cipherAndTag);\n    } catch {\n      throw new DecryptionError(\n        'Decryption failed: wrong passphrase or corrupted ciphertext'\n      );\n    }\n  }\n}",
    "// packages/core/src/algorithms/argon2.ts\n/**\n * Environment-agnostic Argon2-id wrapper.\n *  • Node / Bun  → native `argon2` addon (fastest)\n *  • Browser     → antelle/argon2-browser (WASM)\n */\n\nimport * as Argon2Browser from 'argon2-browser';\n\nimport { KeyDerivationError } from '../../errors/index.js';\n\n/** Minimal subset of tuning parameters we expose */\nexport interface Argon2Tuning {\n  time: number; // iterations\n  mem: number; // kibibytes\n  parallelism: number; // lanes\n}\n\nexport type ArgonHash = { hash: Uint8Array };\n\ntype Argon2HashResult = {\n  // raw bytes of the derived key\n  hash: Uint8Array;\n  // hex-encoded string of the derived key\n  hashHex: string;\n  // the full Argon2 encoded string (salt, params, hash)\n  encoded: string;\n};\n/**\n * Derive a 32-byte hash with Argon2-id.\n *\n * @param password   UTF-8 string or raw bytes\n * @param salt       random salt\n * @param opts       memory/time/parallelism\n * @param env        'node' (incl. Bun) or 'browser'\n */\nexport async function argon2id(\n  password: Uint8Array | string,\n  salt: Uint8Array,\n  opts: Argon2Tuning,\n  env: 'node' | 'browser'\n): Promise<ArgonHash> {\n  // ————————————————————————————  Node / Bun  ————————————————————————————\n  if (env === 'node') {\n    const argon2 = await import('argon2');\n    const pwdBuf = typeof password === 'string' ? Buffer.from(password, 'utf8') : Buffer.from(password);\n\n    const saltBuf = Buffer.from(salt);\n\n    const raw: Buffer = await argon2.hash(pwdBuf, {\n      salt: saltBuf,\n      timeCost: opts.time,\n      memoryCost: opts.mem,\n      parallelism: opts.parallelism,\n      hashLength: 32,\n      raw: true,\n      type: argon2.argon2id,\n    });\n    \n    saltBuf.fill(0);\n    pwdBuf.fill(0);\n\n    return { hash: new Uint8Array(raw) };\n  }\n\n  // ————————————————————————————  Browser  ————————————————————————————\n  if (env === 'browser') {\n    if (!('loadArgon2WasmBinary' in globalThis)) {\n      (globalThis as any).loadArgon2WasmBinary = () =>\n        fetch('argon2.wasm')\n          .then((res) => {\n            if (!res.ok) throw new Error('Failed to load argon2.wasm');\n            return res.arrayBuffer();\n          })\n          .then((buf) => new Uint8Array(buf));\n    }\n\n    return Argon2Browser.hash({\n      pass: password,\n      salt: salt,\n      time: opts.time,\n      mem: opts.mem,\n      parallelism: opts.parallelism,\n      hashLen: 32,\n      type: Argon2Browser.ArgonType.Argon2id,\n    })\n      .then((result: Argon2HashResult) => {\n        if (!result || !result.hash) {\n          throw new KeyDerivationError('Failed to produce key derivation');\n        }\n        return { hash: result.hash };\n      })\n      .catch((error: unknown) => {\n        // Narrow the error to extract a message\n        const message = error instanceof Error ? error.message : typeof error === 'string' ? error : 'Unknown error';\n\n        throw new KeyDerivationError(`argon2-browser failure: ${message}`);\n      });\n  }\n\n  throw new Error(`Unsupported environment: ${env}`);\n}\n",
    "// packages/core/src/algorithms/kdf/Argon2.ts\nimport type { KeyDerivation } from '../../types/index.js';\nimport { argon2id, type Argon2Tuning } from './argon2-wrapper.js';\nimport type { CryptoProvider } from '../../providers/CryptoProvider.js';\n\n/**\n * Argon2-id Key-Derivation Function\n */\nexport class Argon2KDF implements KeyDerivation<'low' | 'middle' | 'high'> {\n  readonly name = 'argon2id';\n\n  constructor(\n    private readonly presets: Readonly<Record<'low' | 'middle' | 'high', Argon2Tuning>>,\n    private exportExtractable: Boolean = false\n  ) {}\n\n  async derive(\n    passphrase: Uint8Array | string,\n    salt: Uint8Array,\n    difficulty: 'low' | 'middle' | 'high',\n    provider: CryptoProvider,\n  ): Promise<CryptoKey> {\n    const { hash } = await argon2id(\n      passphrase,\n      salt,\n      this.presets[difficulty],\n      provider.isNode ? 'node' : 'browser'\n    );\n    if (this.exportExtractable) {\n      return provider.subtle.importKey(\n        'raw',\n        hash,\n        { name: 'AES-GCM', length: 256 },\n        true,\n        ['encrypt', 'decrypt']\n      );\n    } else {\n      return provider.subtle.importKey(\n        'raw',\n        hash,\n        { name: 'AES-GCM', length: 256 },\n        false,\n        ['encrypt', 'decrypt']\n      );\n    }\n  }\n}",
    "import { SchemeRegistry } from './SchemeRegistry.js';\nimport { AESGCM } from '../algorithms/encryption/aes-gmc/AESGCM.js';\nimport { XChaCha20Poly1305 } from '../algorithms/encryption/xchacha20poly1305/XChaCha20-Poly1305.js';\nimport { Argon2KDF } from '../algorithms/kdf/Argon2.js';\nimport { SchemeDescriptor } from '../types/index.js';\n\nexport const DEFAULT_DIFFICULTIES = {\n  low   : { time:  5, mem:  64 * 1024, parallelism: 1 },\n  middle: { time: 20, mem:  64 * 1024, parallelism: 1 },\n  high  : { time: 40, mem:  64 * 1024, parallelism: 1 },\n} as const;\n\nconst v0: SchemeDescriptor = {\n  id: 0,\n  cipher: AESGCM,\n  kdf: new Argon2KDF(DEFAULT_DIFFICULTIES),\n  saltLengths: { low: 12, high: 16 },\n  difficulties: DEFAULT_DIFFICULTIES,\n  defaultChunkSize: 512 * 1024,\n};\n\nSchemeRegistry.register(v0);\n\nexport const VERSION_1_DIFFICULTIES = {\n  low   : { time:  5, mem:  64 * 1024, parallelism: 2 }, //Browser has no parallelism effect\n  middle: { time: 10, mem:  96 * 1024, parallelism: 4 }, //Browser has no parallelism effect\n  high  : { time: 20, mem:  96 * 1024, parallelism: 4 }, //Browser has no parallelism effect\n} as const;\n\nconst v1: SchemeDescriptor = {\n  id: 1,\n  cipher: XChaCha20Poly1305,\n  kdf: new Argon2KDF(VERSION_1_DIFFICULTIES, true),\n  saltLengths: { low: 12, high: 16 },\n  difficulties: VERSION_1_DIFFICULTIES,\n  defaultChunkSize: 512 * 1024,\n};\n\nSchemeRegistry.register(v1);\n\nexport type SaltStrength = 'low' | 'high';\nexport type Difficulty = keyof typeof DEFAULT_DIFFICULTIES;",
    "// packages/core/src/header/constants.ts\nexport const HEADER_START_BYTE = 0x01;          // magic",
    "import { EncodingError, DecodingError } from \"../errors/index.js\";\n\n/**\n * Tiny run-time test - are we really in Node/Bun\n */\nfunction isNodeLike(): boolean {\n  return (\n    typeof process !== 'undefined' &&\n    typeof process.versions === 'object' &&\n    // `browserify` & friends set `process.browser = true`\n    (process as any).browser !== true\n  );\n}\n\n/* ------------------------------------------------------------------ */\n\nexport function concat(...chunks: Uint8Array[]): Uint8Array {\n  const total = chunks.reduce((n, c) => n + c.byteLength, 0);\n  const out   = new Uint8Array(total);\n  let offset  = 0;\n  for (const c of chunks) {\n    out.set(c, offset);\n    offset += c.byteLength;\n  }\n  return out;\n}\n\n/* ----------  Base64 encode  --------------------------------------- */\nexport function base64Encode(...chunks: Uint8Array[]): string {\n  try {\n    const data = concat(...chunks);\n\n    if (isNodeLike()) {\n      // genuine Node / Bun\n      return (Buffer as any).from(data).toString('base64');\n    }\n\n    // Browser (skip any injected Buffer polyfill)\n    let binary = '';\n    for (let i = 0; i < data.length; i++) binary += String.fromCharCode(data[i]);\n    return btoa(binary);\n  } catch (err: any) {\n    const msg = \"Base64 Enconding Error\";\n    throw new EncodingError(msg);\n  }\n  \n}\n\n/* ----------  Base64 decode  --------------------------------------- */\nexport function base64Decode(b64: string): Uint8Array {\n  try {\n    if (!/^[A-Za-z0-9+/]+={0,2}$/.test(b64) || b64.length % 4 !== 0) {\n      throw new Error('invalid base64');\n    }\n    \n    if (isNodeLike()) {\n      return new Uint8Array((Buffer as any).from(b64, 'base64'));\n    }\n\n    const bin = atob(b64);\n    const out = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; i++) out[i] = bin.charCodeAt(i);\n    return out;\n  } catch (err: any) {\n      throw new DecodingError(\n      `Invalid Base64: length=${b64.length}, content='${b64.slice(0,12)}…'`,\n    );\n  }  \n}\n\nexport function secureOverwriteString(str: string): string {\n    const length = str.length;\n    const randomBytes = new Uint8Array(length);\n    crypto.getRandomValues(randomBytes);\n\n    return Array.from(randomBytes, byte =>\n        String.fromCharCode(33 + (byte % 94)) // printable ASCII range\n    ).join('');\n}",
    "// packages/core/src/header/encoder.ts\nimport { HEADER_START_BYTE } from './constants.js';\nimport { concat } from '../util/bytes.js';\n\nexport function encodeHeader(\n  scheme: number,\n  difficulty: string,\n  saltStrength: 'low' | 'high',\n  salt: Uint8Array,\n): Uint8Array {\n  const diffCode = { low: 0, middle: 1, high: 2 }[difficulty] ?? 0;\n  const infoByte = (scheme << 5) | ((saltStrength === 'high' ? 1 : 0) << 2) | diffCode;\n  return concat(new Uint8Array([HEADER_START_BYTE, infoByte]), salt);\n}",
    "// packages/core/src/header/decoder.ts\nimport { HEADER_START_BYTE } from './constants.js';\nimport { SchemeRegistry }   from '../config/SchemeRegistry.js';\nimport { InvalidHeaderError, HeaderDecodeError } from '../errors/index.js';\n\nexport function decodeHeader(buf: Uint8Array) {\n  if (buf[0] !== HEADER_START_BYTE) throw new InvalidHeaderError('Invalid input format. The input is unknown.');\n\n  try {\n    const info         = buf[1];\n    const scheme      = info >> 5;\n    const saltStrength = ((info >> 2) & 1) ? 'high' : 'low';\n    const diffCode     = info & 0b11;\n    const difficulty   = (['low', 'middle', 'high'] as const)[diffCode];\n    const saltLen      = SchemeRegistry.get(scheme).saltLengths[saltStrength];\n    const salt         = buf.slice(2, 2 + saltLen);\n\n    return { scheme, difficulty, saltStrength, salt, headerLen: 2 + saltLen };\n\n  } catch (err) {\n    throw new HeaderDecodeError(\n      err instanceof Error ? err.message : String(err),\n    );\n  }\n}",
    "// packages/core/src/stream/EncryptTransform.ts\nimport type { EncryptionAlgorithm } from '../types/index.js';\n\n/**\n * TransformStream that:\n *   • collects plaintext into fixed‐size blocks\n *   • encrypts each block\n *   • emits: [4-byte length ‖ encryptedBlock]\n */\nexport class EncryptTransform {\n  private buffer = new Uint8Array(0);\n\n  constructor(\n    private readonly engine: EncryptionAlgorithm,\n    private readonly chunkSize = 512 * 1024,\n  ) {}\n\n  toTransformStream(): TransformStream<Uint8Array | ArrayBuffer | Blob, Uint8Array> {\n    return new TransformStream({\n      transform: async (chunk, ctl) => {\n        await this.transform(\n          await this.asUint8Array(chunk),\n          ctl,\n        );\n      },\n      flush: async ctl => this.flush(ctl),\n    });\n  }\n\n  private async transform(\n    bytes: Uint8Array,\n    ctl: TransformStreamDefaultController<Uint8Array>,\n  ) {\n    const combined = new Uint8Array(this.buffer.length + bytes.length);\n    combined.set(this.buffer);\n    combined.set(bytes, this.buffer.length);\n\n    let offset = 0;\n    while (combined.length - offset >= this.chunkSize) {\n      const block = combined.slice(offset, offset + this.chunkSize);\n      offset += this.chunkSize;\n\n      const encrypted = await this.engine.encryptChunk(block);\n\n      const header = new Uint8Array(4);\n      new DataView(header.buffer).setUint32(0, encrypted.length, false);\n\n      const out = new Uint8Array(4 + encrypted.length);\n      out.set(header);\n      out.set(encrypted, header.length);\n\n      ctl.enqueue(out);\n    }\n\n    this.buffer = combined.slice(offset);\n  }\n\n  private async flush(ctl: TransformStreamDefaultController<Uint8Array>) {\n    if (!this.buffer.length) return;\n    const encrypted = await this.engine.encryptChunk(this.buffer);\n\n    const header = new Uint8Array(4);\n    new DataView(header.buffer).setUint32(0, encrypted.length, false);\n\n    const out = new Uint8Array(4 + encrypted.length);\n    out.set(header);\n    out.set(encrypted, 4);\n\n    ctl.enqueue(out);\n    this.buffer = new Uint8Array(0);\n  }\n\n  private async asUint8Array(\n    input: Uint8Array | ArrayBuffer | Blob,\n  ): Promise<Uint8Array> {\n    if (input instanceof Uint8Array) return input;\n    if (input instanceof ArrayBuffer) return new Uint8Array(input);\n    return new Uint8Array(await input.arrayBuffer());\n  }\n}",
    "// packages/core/src/stream/DecryptTransform.ts\nimport type { EncryptionAlgorithm } from '../types/index.js';\nimport { DecryptionError } from '../errors/index.js';\n\n/**\n * Counterpart to EncryptTransform.\n * Streams framed ciphertext → raw plaintext.\n */\nexport class DecryptTransform {\n  private buffer = new Uint8Array(0);\n\n  constructor(\n    private readonly engine: EncryptionAlgorithm,\n    private readonly chunkSize = 512 * 1024,\n  ) {}\n\n  toTransformStream(): TransformStream<Uint8Array | ArrayBuffer | Blob, Uint8Array> {\n    return new TransformStream({\n      transform: async (chunk, ctl) => {\n        await this.transform(\n          await this.asUint8Array(chunk),\n          ctl,\n        );\n      },\n      flush: async ctl => this.flush(ctl),\n    });\n  }\n\n  private async transform(\n    bytes: Uint8Array,\n    ctl: TransformStreamDefaultController<Uint8Array>,\n  ) {\n    const combined = new Uint8Array(this.buffer.length + bytes.length);\n    combined.set(this.buffer);\n    combined.set(bytes, this.buffer.length);\n\n    let offset = 0;\n    while (true) {\n      if (combined.length - offset < 4) break;\n      const cipherLen = new DataView(\n        combined.buffer,\n        combined.byteOffset + offset,\n        4,\n      ).getUint32(0, false);\n        if (cipherLen > this.chunkSize * 2) {\n          throw new DecryptionError(\n            `Frame length ${cipherLen} exceeds maximum allowed ${this.chunkSize * 2}`,\n          );\n        }\n      if (combined.length - offset - 4 < cipherLen) break;\n\n      offset += 4;\n      const cipher = combined.slice(offset, offset + cipherLen);\n      offset += cipherLen;\n\n      try {\n        const plain = await this.engine.decryptChunk(cipher);\n        ctl.enqueue(plain);\n      } catch (err) {\n        throw err instanceof DecryptionError\n          ? err\n         : new DecryptionError(\n              'Decryption failed: Wrong passphrase or corrupted ciphertext',\n            );\n      }\n    }\n\n    this.buffer = combined.slice(offset);\n  }\n\n  private async flush(ctl: TransformStreamDefaultController<Uint8Array>) {\n    await this.transform(new Uint8Array(0), ctl);\n    this.buffer = new Uint8Array(0);\n  }\n\n  private async asUint8Array(\n    input: Uint8Array | ArrayBuffer | Blob,\n  ): Promise<Uint8Array> {\n    if (input instanceof Uint8Array) return input;\n    if (input instanceof ArrayBuffer) return new Uint8Array(input);\n    return new Uint8Array(await input.arrayBuffer());\n  }\n}",
    "// packages/core/src/stream/StreamProcessor.ts\nimport { EncryptTransform } from './EncryptTransform.js';\nimport { DecryptTransform } from './DecryptTransform.js';\nimport type { EncryptionAlgorithm } from '../types/index.js';\n\nexport class StreamProcessor {\n  constructor(\n    private readonly engine: EncryptionAlgorithm,\n    private readonly chunkSize = 512 * 1024,\n  ) {}\n\n  encryptionStream(): TransformStream<Uint8Array, Uint8Array> {\n    const enc = new EncryptTransform(this.engine, this.chunkSize)\n                  .toTransformStream();\n    return {\n      writable: enc.writable,\n      readable: enc.readable,\n    } as TransformStream<Uint8Array, Uint8Array>;\n  }\n\n  decryptionStream(headerLen: number): TransformStream<Uint8Array, Uint8Array> {\n    let skip = headerLen;\n    const strip = new TransformStream<Uint8Array, Uint8Array>({\n      transform(chunk, ctl) {\n        if (skip === 0) {\n          ctl.enqueue(chunk);\n          return;\n        }\n        if (chunk.byteLength <= skip) {\n          skip -= chunk.byteLength;\n          return;\n        }\n        ctl.enqueue(chunk.slice(skip));\n        skip = 0;\n      },\n    });\n\n    const decryptTs = new DecryptTransform(this.engine, this.chunkSize)\n                        .toTransformStream();\n\n    return {\n      writable: strip.writable,\n      readable: strip.readable.pipeThrough(decryptTs),\n    } as TransformStream<Uint8Array, Uint8Array>;\n  }\n\n  async collect(\n    readable: ReadableStream<Uint8Array>,\n    transform: TransformStream<Uint8Array, Uint8Array>,\n    prefix: Uint8Array | null = null,\n  ): Promise<Uint8Array> {\n    const reader = readable.pipeThrough(transform).getReader();\n    const chunks: Uint8Array[] = [];\n    if (prefix?.length) chunks.push(prefix);\n\n    try {\n      while (true) {\n        const { value, done } = await reader.read();\n        if (done) break;\n        chunks.push(value);\n      }\n\n      await reader.closed;\n    } finally {\n      reader.releaseLock();\n    }\n\n    const total = chunks.reduce((n, c) => n + c.byteLength, 0);\n    const out   = new Uint8Array(total);\n    let offset  = 0;\n    for (const c of chunks) {\n      out.set(c, offset);\n      offset += c.byteLength;\n    }\n    return out;\n  }\n}",
    "/* ------------------------------------------------------------------\n   Tiny, dependency-free logger with five verbosity levels\n   ------------------------------------------------------------------ */\nexport type Verbosity = 0 | 1 | 2 | 3 | 4;  // 0 = errors only … 4 = trace\n\nexport interface Logger {\n  level : Verbosity;\n  log(lvl: Verbosity, msg: string): void;\n}\n\nexport function createLogger(\n  level: Verbosity = 0,\n  sink : (msg: string) => void = console.info,\n): Logger {\n  return {\n    level,\n    log(lvl, msg) {\n      if (lvl <= level) sink(`${lvl}| ${msg}`);\n    },\n  };\n}\n/*\nconst loggerSingleton: Logger = createLogger();\n\nexport default loggerSingleton;*/",
    "import { SchemeRegistry } from '../config/SchemeRegistry.js';\nimport type {\n  SchemeDescriptor,\n  EncryptionAlgorithm,\n  KeyDerivation,\n} from '../types/index.js';\nimport type { CryptoProvider } from '../providers/CryptoProvider.js';\nimport { KeyDerivationError } from '../errors/index.js';\nimport { secureOverwriteString } from '../util/bytes.js';\n\nexport interface Engine {\n  desc      : SchemeDescriptor;\n  cipher    : EncryptionAlgorithm;\n  kdf       : KeyDerivation;\n  chunkSize : number;\n  provider  : CryptoProvider;\n}\n\nconst _cache = new WeakMap<CryptoProvider, Map<number, Engine>>();\n\nexport class EngineManager {\n  static getEngine(provider: CryptoProvider, schemeId: number): Engine {\n    let perProvider = _cache.get(provider);\n    if (!perProvider) {\n      perProvider = new Map<number, Engine>();\n      _cache.set(provider, perProvider);\n    }\n\n    let engine = perProvider.get(schemeId);\n    if (engine) return engine;\n\n    const desc   = SchemeRegistry.get(schemeId);\n    engine = {\n      desc,\n      cipher   : new desc.cipher(provider),\n      kdf      : desc.kdf,\n      chunkSize: desc.defaultChunkSize,\n      provider,\n    };\n    perProvider.set(schemeId, engine);\n    return engine;\n  }\n\n  static async deriveKey(\n    engine : Engine,\n    pass   : string,\n    salt   : Uint8Array,\n    diff   : string,\n  ): Promise<void> {\n    try {\n      const key = await engine.kdf.derive(pass, salt, diff as any, engine.provider);\n      \n      pass = secureOverwriteString(pass);\n      pass = null as any;\n      \n      await engine.cipher.setKey(key);\n    } catch (err) {\n      const msg = err instanceof Error ? err.message : String(err);\n      throw new KeyDerivationError(msg);\n    }\n  }\n}",
    "// packages/core/src/index.ts\n\nimport './config/defaults.js';\n\nimport type { CryptoProvider }    from './providers/CryptoProvider.js';\nimport { Difficulty, SaltStrength } from './config/defaults.js';\nimport { encodeHeader }             from './header/encoder.js';\nimport { decodeHeader }             from './header/decoder.js';\nimport {\n  EncryptionAlgorithm,\n  KeyDerivation,\n  SchemeDescriptor,\n} from './types/index.js';\nimport { SchemeRegistry }          from './config/SchemeRegistry.js';\nimport { base64Encode, base64Decode, concat, secureOverwriteString } from './util/bytes.js';\nimport { StreamProcessor }          from './stream/StreamProcessor.js';\nimport { EncryptTransform }         from './stream/EncryptTransform.js';\nimport { DecryptTransform }         from './stream/DecryptTransform.js';\n\nimport {\n  createLogger,\n  type Verbosity,\n  type Logger,\n} from './util/logger.js';\n\nimport {\n  EncryptionError,\n  DecryptionError,\n  KeyDerivationError,\n  InvalidHeaderError,\n  HeaderDecodeError,\n  DecodingError,\n} from './errors/index.js';\n\nimport { EngineManager, type Engine } from './engine/EngineManager.js';\n\n// ────────────────────────────────────────────────────────────────────────────\n//  Public configuration shape\n// ────────────────────────────────────────────────────────────────────────────\n\n/**\n * Result of creating an encryption stream: header and paired streams.\n */\nexport interface EncryptStreamResult {\n  /** Binary header for decryption initialization */\n  header   : Uint8Array;\n  /** Writable stream to feed plaintext data */\n  writable : WritableStream<Uint8Array>;\n  /** Readable stream emitting ciphertext data */\n  readable : ReadableStream<Uint8Array>;\n}\n\n/**\n * Options for configuring Cryptit instance behavior.\n */\nexport interface CryptitOptions {\n  /** Version identifier (0…7) to use; defaults to registry's current scheme */\n  scheme?      : number;\n  /** Salt strength: 'low' | 'middle' | 'high'; defaults to descriptor's default */\n  saltStrength? : SaltStrength;\n  /** Key derivation difficulty; defaults to descriptor's default */\n  difficulty?   : Difficulty;\n  /** Chunk size for streaming operations; defaults to descriptor's default */\n  chunkSize?    : number;\n  /** Verbosity level 0-4 for logging (0 = errors only) */\n  verbose?      : Verbosity;\n  /** Optional custom logger callback (receives formatted messages) */\n  logger?       : (msg: string) => void;\n}\n\n/**\n * Cryptit provides high-level encryption/decryption utilities for text, blobs, and streams.\n */\nexport class Cryptit {\n  // — runtime-mutable --------------------------------------------------------\n  private v          : SchemeDescriptor;\n  private cipher     : EncryptionAlgorithm;\n  private kdf        : KeyDerivation;\n  private chunkSize  : number;\n  private stream     : StreamProcessor;\n\n  private difficulty   : Difficulty;\n  private saltStrength : SaltStrength;\n\n  private readonly engines = new Map<number, Engine>();\n\n  // — diagnostics ------------------------------------------------------------\n  private readonly log : Logger;\n\n  /**\n   * Create a new Cryptit instance with given crypto provider and options.\n   * @param provider - Underlying crypto provider for key derivation and randomness\n   * @param opt - Configuration options for scheme, salts, logging, etc.\n   */\n  constructor(\n    private readonly provider: CryptoProvider,\n    opt: CryptitOptions = {},\n  ) {\n    this.v          = SchemeRegistry.get(opt.scheme ?? SchemeRegistry.current.id);\n    this.cipher     = new this.v.cipher(provider);\n    this.kdf        = this.v.kdf;\n    this.chunkSize  = opt.chunkSize ?? this.v.defaultChunkSize;\n    this.stream     = new StreamProcessor(this.cipher, this.chunkSize);\n\n    this.difficulty     = opt.difficulty   ?? 'middle';\n    this.saltStrength   = opt.saltStrength ?? 'high';\n\n    this.log = createLogger(opt.verbose ?? 0, opt.logger);\n  }\n\n  // ════════════════════════════════════════════════════════════════════════\n  //  PUBLIC  - Informational helpers\n  // ════════════════════════════════════════════════════════════════════════\n\n  /**\n   * Check if the provided input contains a valid Cryptit header.\n   * @param input - Base64 string, Uint8Array, or Blob to inspect\n   * @returns True if header is valid; false otherwise\n   */\n  static async isEncrypted(\n    input: string | Uint8Array | Blob,\n  ): Promise<boolean> {\n    try {\n      await Cryptit.peekHeader(input);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Decode the Cryptit header and return readable metadata.\n   * @param input - Base64 string, Uint8Array, or Blob to decode\n   * @returns Object containing scheme, difficulty, salt (Base64), and salt length\n   */\n  static async headerDecode(\n    input: string | Uint8Array | Blob,\n  ): Promise<{ scheme: number; difficulty: Difficulty; salt: string; saltLength: number; }> {\n    const hdr = await Cryptit.peekHeader(input);\n    const h   = decodeHeader(hdr);\n    return {\n      scheme    : h.scheme,\n      difficulty : h.difficulty,\n      salt       : base64Encode(h.salt),\n      saltLength : h.salt.byteLength,\n    };\n  }\n\n  // ════════════════════════════════════════════════════════════════════════\n  //  PUBLIC  - Setters / getters for run-time flexibility\n  // ════════════════════════════════════════════════════════════════════════\n  /** Set the difficulty level for subsequent operations. */\n  setDifficulty(d: Difficulty): void         { this.difficulty = d; }\n  /** Get the current difficulty setting. */\n  getDifficulty(): Difficulty                { return this.difficulty; }\n\n  /**\n   * Change the protocol scheme for future encrypt/decrypt actions.\n   * @param id - Version identifier from registry\n   */\n  setScheme(id: number): void {\n    this.v       = SchemeRegistry.get(id);\n    this.cipher  = new this.v.cipher(this.provider);\n    this.kdf     = this.v.kdf;\n    this.stream  = new StreamProcessor(this.cipher, this.chunkSize);\n  }\n  /** Retrieve the active protocol scheme identifier. */\n  getScheme(): number                       { return this.v.id; }\n\n  /**\n   * Override salt length (in bytes) for new operations (advanced use).\n   * @param len - Custom salt length in bytes\n   */\n  setSaltDifficulty(d: SaltStrength): void           { this.saltStrength = d; }\n  /** Get the effective salt length for the current strength. */\n  getSaltDifficulty(): SaltStrength {\n    return this.saltStrength;\n  }\n\n  /**\n   * Configure chunk size (bytes) for streaming transforms.\n   * @param bytes - Desired chunk size in bytes\n   */\n  setChunkSize(bytes: number): void {\n    this.chunkSize = bytes;\n    this.stream    = new StreamProcessor(this.cipher, this.chunkSize);\n  }\n  /** Retrieve the current streaming chunk size. */\n  getChunkSize(): number                     { return this.chunkSize; }\n\n  /**\n   * Adjust verbosity level of internal logger at runtime.\n   * @param level - Logger verbosity (0-4)\n   */\n  setVerbose(level: Verbosity): void         { (this.log as any).level = level; }\n  /** Get the current logger verbosity setting. */\n  getVerbose(): Verbosity                    { return this.log.level; }\n\n  // ════════════════════════════════════════════════════════════════════════\n  //  TEXT convenience\n  // ════════════════════════════════════════════════════════════════════════\n\n  /**\n   * Encrypt plaintext (string or Uint8Array) and return Base64-encoded result.\n   * @param plain - Data to encrypt (text or bytes)\n   * @param pass - Passphrase for key derivation\n   * @returns Base64 string containing header and ciphertext\n   * @throws EncryptionError on failure\n   */\n  async encryptText(plain: string | Uint8Array, pass: string): Promise<string> {\n    try {\n      this.log.log(1, `Start text encryption, scheme: ${this.getScheme()}`);\n      this.log.log(2, 'Deriving key for text encryption');\n      const salt = this.genSalt();\n      await this.deriveKey(pass, salt);\n      \n      pass = secureOverwriteString(pass);\n      pass = null as any;\n      \n      this.log.log(3, `Salt generated: ${base64Encode(salt)}, KDF difficulty: ${this.difficulty}`);\n\n      this.log.log(2, 'Encrypting text data');\n      const cipher = await this.cipher.encryptChunk(\n        typeof plain === 'string' ? new TextEncoder().encode(plain) : plain,\n      );\n      this.log.log(3, 'Encoding header');\n      const header = encodeHeader(this.v.id, this.difficulty, this.saltStrength, salt);\n      this.log.log(3, 'Encoding text');\n      const result = base64Encode(header, cipher);\n      this.log.log(1, 'Decryption finished');\n      return result;\n\n    } catch (err) {\n      throw new EncryptionError(\n        err instanceof Error ? err.message : String(err),\n      );\n    }\n  }\n\n  /**\n   * Decrypt a Base64-encoded ciphertext string using the provided passphrase.\n   * @param b64 - Base64 string containing header and ciphertext\n   * @param pass - Passphrase for key derivation\n   * @returns Decrypted plaintext string\n   * @throws DecryptionError on failure or invalid header\n   */\n  async decryptText(b64: string, pass: string): Promise<string> {\n    try {\n      this.log.log(1, `Start text decryption, Version ${this.getScheme()}`);\n      this.log.log(3, 'Start text decoding');\n      const data   = base64Decode(b64);\n      this.log.log(3, 'Start header decoding');\n\n      await Cryptit.peekHeader(b64);\n      const hdr    = decodeHeader(data);\n\n      this.log.log(3, 'Trying to get engine');\n\n      const engine = EngineManager.getEngine(this.provider, hdr.scheme);\n\n      this.log.log(2, `Deriving key via engine for scheme: ${hdr.scheme}`);\n      this.log.log(3, `Salt use: ${base64Encode(hdr.salt)}, KDF difficulty: ${hdr.difficulty}`);\n\n      await EngineManager.deriveKey(engine, pass, hdr.salt, hdr.difficulty);\n      \n      pass = secureOverwriteString(pass);\n      pass = null as any;\n\n      this.log.log(2, 'Decrypting text data');\n      const plainBytes = await engine.cipher.decryptChunk(\n        data.slice(hdr.headerLen),\n      );\n      this.log.log(3, 'Decoding text');\n      const text = new TextDecoder().decode(plainBytes);\n      this.log.log(1, 'Decryption finished');\n      return text;\n\n    } catch (err) {\n      if (\n        err instanceof DecryptionError   ||\n        err instanceof InvalidHeaderError||\n        err instanceof HeaderDecodeError ||\n        err instanceof DecodingError ||\n        err instanceof KeyDerivationError\n      ) throw err;\n\n      throw new DecryptionError(\n        'Decryption failed: wrong passphrase or corrupted ciphertext',\n      );\n    }\n  }\n\n  /* ──────────────────────────────────────────────────────────\n     Encrypt a whole Blob and return an opaque binary Blob\n     ────────────────────────────────────────────────────────── */\n  /**\n   * Encrypt a Blob (file) and return a new Blob with embedded header.\n   * @param file - Input Blob to encrypt\n   * @param pass - Passphrase for key derivation\n   * @returns Encrypted Blob (application/octet-stream)\n   * @throws EncryptionError on failure\n   */\n  async encryptFile(file: Blob, pass: string): Promise<Blob> {\n    try {\n\n      if (file.size === 0) {\n        const salt = this.genSalt();\n        await this.deriveKey(pass, salt);\n\n        pass = secureOverwriteString(pass);\n        pass = null as any;\n\n        const header = encodeHeader(\n          this.v.id,\n          this.difficulty,\n          this.saltStrength,\n          salt,\n        );\n        /* nothing to encrypt ⇒ header alone is a valid container */\n        return new Blob([header], { type: 'application/octet-stream' });\n      }\n      this.log.log(2, 'Deriving key for file encryption');\n      const salt = this.genSalt();\n      await this.deriveKey(pass, salt);\n\n      pass = secureOverwriteString(pass);\n      pass = null as any;\n\n      const header = encodeHeader(this.v.id, this.difficulty, this.saltStrength, salt);\n\n      const cipher = await this.stream.collect(\n        file.stream() as ReadableStream<Uint8Array>,\n        new EncryptTransform(this.cipher, this.chunkSize).toTransformStream(),\n        header,\n      );\n\n      return new Blob([cipher], { type: 'application/octet-stream' });\n\n    } catch (err) {\n      throw new EncryptionError(\n        err instanceof Error ? err.message : String(err),\n      );\n    }\n  }\n\n  /* ──────────────────────────────────────────────────────────\n     Decrypt a Blob that carries its own header (any scheme)\n     ────────────────────────────────────────────────────────── */\n  /**\n   * Decrypt an encrypted Blob using the embedded header for parameters.\n   * @param file - Encrypted Blob containing header + ciphertext\n   * @param pass - Passphrase for key derivation\n   * @returns Decrypted Blob (application/octet-stream)\n   * @throws DecryptionError on failure or invalid header\n   */\n  async decryptFile(file: Blob, pass: string): Promise<Blob> {\n    try {\n      const header = await Cryptit.peekHeader(file);\n      const parsed = decodeHeader(header);\n      const engine = EngineManager.getEngine(this.provider, parsed.scheme);\n\n      await EngineManager.deriveKey(engine, pass, parsed.salt, parsed.difficulty);\n\n      pass = secureOverwriteString(pass);\n      pass = null as any;\n\n      // ── 0-byte optimisation ────────────────────────────────────────\n      if (file.size === parsed.headerLen) {\n        /* container carries header only - nothing to decrypt */\n        return new Blob([], { type: 'application/octet-stream' });\n      }\n\n      this.log.log(2, 'Decrypting file data');\n      const streamProc = new StreamProcessor(engine.cipher, engine.chunkSize);\n      const plain = await streamProc.collect(\n        file.slice(parsed.headerLen).stream() as ReadableStream<Uint8Array>,\n        new DecryptTransform(engine.cipher, engine.chunkSize).toTransformStream(),\n      );\n\n      return new Blob([plain], { type: 'application/octet-stream' });\n\n    } catch (err) {\n      if (err instanceof DecryptionError) throw err;\n      throw new DecryptionError(\n        err instanceof Error ? err.message : String(err),\n      );\n    }\n  }\n\n  /* ──────────────────────────────────────────────────────────\n     Streaming encryption: returns header + TransformStream\n     ────────────────────────────────────────────────────────── */\n  /**\n   * Initialize streaming encryption, returning header and transform streams.\n   * @param pass - Passphrase for key derivation\n   * @returns Streams and header for real-time encryption\n   */\n  async createEncryptionStream(pass: string): Promise<EncryptStreamResult> {\n    this.log.log(2, 'Deriving key for stream encryption');\n    const salt = this.genSalt();\n    await this.deriveKey(pass, salt);\n\n    pass = secureOverwriteString(pass);\n    pass = null as any;\n\n    const header = encodeHeader(this.v.id, this.difficulty, this.saltStrength, salt);\n    const tf     = this.stream.encryptionStream();\n\n    return { header, writable: tf.writable, readable: tf.readable };\n  }\n\n  /* ──────────────────────────────────────────────────────────\n     Streaming decryption (auto-detect header, any scheme)\n     ────────────────────────────────────────────────────────── */\n  /**\n   * Create a TransformStream for decrypting incoming ciphertext with header auto-detection.\n   * @param passp - Passphrase for key derivation\n   * @returns TransformStream encrypting Uint8Array chunks to Uint8Array plaintext chunks\n   */\n  async createDecryptionStream(\n    pass: string,\n  ): Promise<TransformStream<Uint8Array, Uint8Array>> {\n\n    const self = this;\n    let   buf: Uint8Array<ArrayBufferLike>  = new Uint8Array(0);\n    let   downstream: TransformStream<Uint8Array, Uint8Array> | null = null;\n\n    async function pipeOut(\n      readable: ReadableStream<Uint8Array>,\n      ctl: TransformStreamDefaultController<Uint8Array>,\n    ) {\n      const rd = readable.getReader();\n      while (true) {\n        const { value, done } = await rd.read();\n        if (done) break;\n        ctl.enqueue(value);\n      }\n    }\n\n    return new TransformStream<Uint8Array, Uint8Array>({\n      async transform(chunk, ctl) {\n        if (!downstream) {\n          \n          buf = concat(buf, chunk);\n          if (buf.length < 2) return;\n\n          const header             = buf.slice(0, 30); // Raw estimate\n          const { salt, difficulty } = decodeHeader(header);\n\n          const scheme      = buf[1] >> 5;\n          const saltStrength = ((buf[1] >> 2) & 1) ? 'high' : 'low';\n          const saltLen      = SchemeRegistry.get(scheme).saltLengths[saltStrength];\n          const hdrLen       = 2 + saltLen;\n          if (buf.length < hdrLen) return;\n        \n          const engine  = EngineManager.getEngine(self.provider, scheme);\n          await EngineManager.deriveKey(engine, pass, salt, difficulty);\n\n          pass = secureOverwriteString(pass);\n          pass = null as any;\n\n          downstream = new DecryptTransform(engine.cipher, engine.chunkSize).toTransformStream();\n          pipeOut(downstream.readable, ctl);\n\n          const remainder = buf.slice(hdrLen);\n          if (remainder.length) {\n            const w = downstream.writable.getWriter();\n            await w.write(remainder);\n            w.releaseLock();\n          }\n          return;\n        }\n\n        const writer = downstream.writable.getWriter();\n        await writer.write(chunk);\n        writer.releaseLock();\n      },\n\n      async flush() {\n        if (downstream) {\n          const writer = downstream.writable.getWriter();\n          await writer.close();\n          writer.releaseLock();\n        }\n      },\n    });\n  }\n\n  // ════════════════════════════════════════════════════════════════════════\n  //  Helpers\n  // ════════════════════════════════════════════════════════════════════════\n\n  /**\n   * Derive cryptographic key from passphrase and salt using configured KDF.\n   * @param pass - Passphrase to derive key from\n   * @param salt - Random salt value\n   * @param diff - Difficulty level for KDF (optional)\n   * @throws KeyDerivationError on KDF failure\n   */\n  private async deriveKey(\n    pass: string,\n    salt: Uint8Array,\n    diff: Difficulty = this.difficulty,\n  ): Promise<void> {\n    const start = performance.now();\n    try {\n      const key = await this.kdf.derive(pass, salt, diff, this.provider);\n      \n      pass = secureOverwriteString(pass);\n      pass = null as any;\n      \n      await this.cipher.setKey(key);\n      this.log.log(3, `Key derivation completed in ${(performance.now() - start).toFixed(1)} ms`);\n    } catch (err) {\n      throw new KeyDerivationError(\n        err instanceof Error ? err.message : String(err),\n      );\n    }\n  }\n\n  /** Generate a secure random salt according to configured length. */\n  private genSalt(): Uint8Array {\n    const len = this.v.saltLengths[this.saltStrength];\n    return this.provider.getRandomValues(new Uint8Array(len));\n  }\n\n  // ────────────────────────────────────────────────────────────────────\n  //  Static helper - read just enough bytes to parse the header\n  // ────────────────────────────────────────────────────────────────────\n  /**\n   * Read minimal bytes to extract and validate Cryptit header.\n   * @param input - Base64 string, Uint8Array, or Blob containing header\n   * @returns Uint8Array slice of the header bytes\n   * @throws HeaderDecodeError or InvalidHeaderError on invalid input\n   */\n  private static async peekHeader(\n    input: string | Uint8Array | Blob,\n  ): Promise<Uint8Array> {\n    // Handle Base64 text input\n    if (typeof input === 'string') {\n      input = base64Decode(input);\n    }\n\n    // Handle raw Uint8Array input\n    if (input instanceof Uint8Array) {\n      if (input.length < 2) throw new InvalidHeaderError('Input too short');\n      const { headerLen } = decodeHeader(\n        input.length >= 16 ? input : Uint8Array.from(input),\n      );\n      if (input.length < headerLen) throw new InvalidHeaderError('Incomplete header');\n      return input.slice(0, headerLen);\n    }\n\n    // Handle Blob/File input\n    if (input instanceof Blob) {\n      const first2 = new Uint8Array(await input.slice(0, 2).arrayBuffer());\n      if (first2[0] !== 0x01) throw new InvalidHeaderError('Invalid input format. The input is unknown.');\n\n      const info        = first2[1];\n      const scheme     = info >> 5;\n      const saltStrength= ((info >> 2) & 1) ? 'high' : 'low';\n      const saltLen     = SchemeRegistry.get(scheme).saltLengths[saltStrength];\n\n      const header = new Uint8Array(\n        await input.slice(0, 2 + saltLen).arrayBuffer(),\n      );\n      decodeHeader(header); // validate header contents\n      return header;\n    }\n\n    throw new HeaderDecodeError('Unsupported input type');\n  }\n}\n",
    "// packages/browser-runtime/src/provider.ts\nimport type { CryptoProvider } from \"../../core/src/providers/CryptoProvider.js\";\n\n/**\n * Crypto shim for modern browsers (and Bun when used in “browser” code-paths).\n */\nexport const browserProvider: CryptoProvider = {\n  subtle: globalThis.crypto.subtle,\n  getRandomValues(buf) {\n    return globalThis.crypto.getRandomValues(buf);\n  },\n  isNode: false\n};",
    "import { Cryptit, type CryptitOptions } from '../../core/src/index.js';\nimport { browserProvider }              from './provider.js';\n\nexport function createCryptit(cfg?: CryptitOptions): Cryptit {\n  return new Cryptit(browserProvider, cfg);\n}\n\nexport { Cryptit }         from '../../core/src/index.js';\nexport type { CryptitOptions } from '../../core/src/index.js';"
  ],
  "mappings": "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",
  "debugId": "28D08F1E75E4E44A64756E2164756E21",
  "names": []
}
{
  "version": 3,
  "sources": ["../../node_modules/commander/lib/error.js", "../../node_modules/commander/lib/argument.js", "../../node_modules/commander/lib/help.js", "../../node_modules/commander/lib/option.js", "../../node_modules/commander/lib/suggestSimilar.js", "../../node_modules/commander/lib/command.js", "../../node_modules/commander/index.js", "../../node_modules/argon2-browser/dist/argon2.js", "../../node_modules/argon2-browser/lib/argon2.js", "../../node_modules/@phc/format/index.js", "../../node_modules/node-gyp-build/node-gyp-build.js", "../../node_modules/node-gyp-build/index.js", "../../node_modules/argon2/argon2.cjs", "../../node_modules/commander/esm.mjs", "../../packages/node-runtime/src/cli.ts", "../../packages/core/src/algorithms/argon2.ts", "../../packages/core/src/config/defaults.ts", "../../packages/core/src/algorithms/aesgmc/AESGCMEncryption.ts", "../../packages/core/src/header/constants.ts", "../../packages/core/src/header/encoder.ts", "../../packages/core/src/header/decoder.ts", "../../packages/core/src/stream/EncryptTransform.ts", "../../packages/core/src/stream/DecryptTransform.ts", "../../packages/core/src/stream/StreamProcessor.ts", "../../packages/core/src/index.ts", "../../packages/node-runtime/src/provider.ts", "../../packages/node-runtime/src/index.ts"],
  "sourcesContent": [
    "/**\n * CommanderError class\n * @class\n */\nclass CommanderError extends Error {\n  /**\n   * Constructs the CommanderError class\n   * @param {number} exitCode suggested exit code which could be used with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   * @constructor\n   */\n  constructor(exitCode, code, message) {\n    super(message);\n    // properly capture stack trace in Node.js\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.exitCode = exitCode;\n    this.nestedError = undefined;\n  }\n}\n\n/**\n * InvalidArgumentError class\n * @class\n */\nclass InvalidArgumentError extends CommanderError {\n  /**\n   * Constructs the InvalidArgumentError class\n   * @param {string} [message] explanation of why argument is invalid\n   * @constructor\n   */\n  constructor(message) {\n    super(1, 'commander.invalidArgument', message);\n    // properly capture stack trace in Node.js\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n  }\n}\n\nexports.CommanderError = CommanderError;\nexports.InvalidArgumentError = InvalidArgumentError;\n",
    "const { InvalidArgumentError } = require('./error.js');\n\nclass Argument {\n  /**\n   * Initialize a new command argument with the given name and description.\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   */\n\n  constructor(name, description) {\n    this.description = description || '';\n    this.variadic = false;\n    this.parseArg = undefined;\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.argChoices = undefined;\n\n    switch (name[0]) {\n      case '<': // e.g. <required>\n        this.required = true;\n        this._name = name.slice(1, -1);\n        break;\n      case '[': // e.g. [optional]\n        this.required = false;\n        this._name = name.slice(1, -1);\n        break;\n      default:\n        this.required = true;\n        this._name = name;\n        break;\n    }\n\n    if (this._name.length > 3 && this._name.slice(-3) === '...') {\n      this.variadic = true;\n      this._name = this._name.slice(0, -3);\n    }\n  }\n\n  /**\n   * Return argument name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    return this._name;\n  }\n\n  /**\n   * @api private\n   */\n\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    return previous.concat(value);\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {*} value\n   * @param {string} [description]\n   * @return {Argument}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  }\n\n  /**\n   * Set the custom handler for processing CLI command arguments into argument values.\n   *\n   * @param {Function} [fn]\n   * @return {Argument}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  }\n\n  /**\n   * Only allow argument value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Argument}\n   */\n\n  choices(values) {\n    this.argChoices = values.slice();\n    this.parseArg = (arg, previous) => {\n      if (!this.argChoices.includes(arg)) {\n        throw new InvalidArgumentError(`Allowed choices are ${this.argChoices.join(', ')}.`);\n      }\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  }\n\n  /**\n   * Make argument required.\n   */\n  argRequired() {\n    this.required = true;\n    return this;\n  }\n\n  /**\n   * Make argument optional.\n   */\n  argOptional() {\n    this.required = false;\n    return this;\n  }\n}\n\n/**\n * Takes an argument and returns its human readable equivalent for help usage.\n *\n * @param {Argument} arg\n * @return {string}\n * @api private\n */\n\nfunction humanReadableArgName(arg) {\n  const nameOutput = arg.name() + (arg.variadic === true ? '...' : '');\n\n  return arg.required\n    ? '<' + nameOutput + '>'\n    : '[' + nameOutput + ']';\n}\n\nexports.Argument = Argument;\nexports.humanReadableArgName = humanReadableArgName;\n",
    "const { humanReadableArgName } = require('./argument.js');\n\n/**\n * TypeScript import types for JSDoc, used by Visual Studio Code IntelliSense and `npm run typescript-checkJS`\n * https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#import-types\n * @typedef { import(\"./argument.js\").Argument } Argument\n * @typedef { import(\"./command.js\").Command } Command\n * @typedef { import(\"./option.js\").Option } Option\n */\n\n// Although this is a class, methods are static in style to allow override using subclass or just functions.\nclass Help {\n  constructor() {\n    this.helpWidth = undefined;\n    this.sortSubcommands = false;\n    this.sortOptions = false;\n    this.showGlobalOptions = false;\n  }\n\n  /**\n   * Get an array of the visible subcommands. Includes a placeholder for the implicit help command, if there is one.\n   *\n   * @param {Command} cmd\n   * @returns {Command[]}\n   */\n\n  visibleCommands(cmd) {\n    const visibleCommands = cmd.commands.filter(cmd => !cmd._hidden);\n    if (cmd._hasImplicitHelpCommand()) {\n      // Create a command matching the implicit help command.\n      const [, helpName, helpArgs] = cmd._helpCommandnameAndArgs.match(/([^ ]+) *(.*)/);\n      const helpCommand = cmd.createCommand(helpName)\n        .helpOption(false);\n      helpCommand.description(cmd._helpCommandDescription);\n      if (helpArgs) helpCommand.arguments(helpArgs);\n      visibleCommands.push(helpCommand);\n    }\n    if (this.sortSubcommands) {\n      visibleCommands.sort((a, b) => {\n        // @ts-ignore: overloaded return type\n        return a.name().localeCompare(b.name());\n      });\n    }\n    return visibleCommands;\n  }\n\n  /**\n   * Compare options for sort.\n   *\n   * @param {Option} a\n   * @param {Option} b\n   * @returns number\n   */\n  compareOptions(a, b) {\n    const getSortKey = (option) => {\n      // WYSIWYG for order displayed in help. Short used for comparison if present. No special handling for negated.\n      return option.short ? option.short.replace(/^-/, '') : option.long.replace(/^--/, '');\n    };\n    return getSortKey(a).localeCompare(getSortKey(b));\n  }\n\n  /**\n   * Get an array of the visible options. Includes a placeholder for the implicit help option, if there is one.\n   *\n   * @param {Command} cmd\n   * @returns {Option[]}\n   */\n\n  visibleOptions(cmd) {\n    const visibleOptions = cmd.options.filter((option) => !option.hidden);\n    // Implicit help\n    const showShortHelpFlag = cmd._hasHelpOption && cmd._helpShortFlag && !cmd._findOption(cmd._helpShortFlag);\n    const showLongHelpFlag = cmd._hasHelpOption && !cmd._findOption(cmd._helpLongFlag);\n    if (showShortHelpFlag || showLongHelpFlag) {\n      let helpOption;\n      if (!showShortHelpFlag) {\n        helpOption = cmd.createOption(cmd._helpLongFlag, cmd._helpDescription);\n      } else if (!showLongHelpFlag) {\n        helpOption = cmd.createOption(cmd._helpShortFlag, cmd._helpDescription);\n      } else {\n        helpOption = cmd.createOption(cmd._helpFlags, cmd._helpDescription);\n      }\n      visibleOptions.push(helpOption);\n    }\n    if (this.sortOptions) {\n      visibleOptions.sort(this.compareOptions);\n    }\n    return visibleOptions;\n  }\n\n  /**\n   * Get an array of the visible global options. (Not including help.)\n   *\n   * @param {Command} cmd\n   * @returns {Option[]}\n   */\n\n  visibleGlobalOptions(cmd) {\n    if (!this.showGlobalOptions) return [];\n\n    const globalOptions = [];\n    for (let ancestorCmd = cmd.parent; ancestorCmd; ancestorCmd = ancestorCmd.parent) {\n      const visibleOptions = ancestorCmd.options.filter((option) => !option.hidden);\n      globalOptions.push(...visibleOptions);\n    }\n    if (this.sortOptions) {\n      globalOptions.sort(this.compareOptions);\n    }\n    return globalOptions;\n  }\n\n  /**\n   * Get an array of the arguments if any have a description.\n   *\n   * @param {Command} cmd\n   * @returns {Argument[]}\n   */\n\n  visibleArguments(cmd) {\n    // Side effect! Apply the legacy descriptions before the arguments are displayed.\n    if (cmd._argsDescription) {\n      cmd.registeredArguments.forEach(argument => {\n        argument.description = argument.description || cmd._argsDescription[argument.name()] || '';\n      });\n    }\n\n    // If there are any arguments with a description then return all the arguments.\n    if (cmd.registeredArguments.find(argument => argument.description)) {\n      return cmd.registeredArguments;\n    }\n    return [];\n  }\n\n  /**\n   * Get the command term to show in the list of subcommands.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  subcommandTerm(cmd) {\n    // Legacy. Ignores custom usage string, and nested commands.\n    const args = cmd.registeredArguments.map(arg => humanReadableArgName(arg)).join(' ');\n    return cmd._name +\n      (cmd._aliases[0] ? '|' + cmd._aliases[0] : '') +\n      (cmd.options.length ? ' [options]' : '') + // simplistic check for non-help option\n      (args ? ' ' + args : '');\n  }\n\n  /**\n   * Get the option term to show in the list of options.\n   *\n   * @param {Option} option\n   * @returns {string}\n   */\n\n  optionTerm(option) {\n    return option.flags;\n  }\n\n  /**\n   * Get the argument term to show in the list of arguments.\n   *\n   * @param {Argument} argument\n   * @returns {string}\n   */\n\n  argumentTerm(argument) {\n    return argument.name();\n  }\n\n  /**\n   * Get the longest command term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestSubcommandTermLength(cmd, helper) {\n    return helper.visibleCommands(cmd).reduce((max, command) => {\n      return Math.max(max, helper.subcommandTerm(command).length);\n    }, 0);\n  }\n\n  /**\n   * Get the longest option term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestOptionTermLength(cmd, helper) {\n    return helper.visibleOptions(cmd).reduce((max, option) => {\n      return Math.max(max, helper.optionTerm(option).length);\n    }, 0);\n  }\n\n  /**\n   * Get the longest global option term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestGlobalOptionTermLength(cmd, helper) {\n    return helper.visibleGlobalOptions(cmd).reduce((max, option) => {\n      return Math.max(max, helper.optionTerm(option).length);\n    }, 0);\n  }\n\n  /**\n   * Get the longest argument term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestArgumentTermLength(cmd, helper) {\n    return helper.visibleArguments(cmd).reduce((max, argument) => {\n      return Math.max(max, helper.argumentTerm(argument).length);\n    }, 0);\n  }\n\n  /**\n   * Get the command usage to be displayed at the top of the built-in help.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  commandUsage(cmd) {\n    // Usage\n    let cmdName = cmd._name;\n    if (cmd._aliases[0]) {\n      cmdName = cmdName + '|' + cmd._aliases[0];\n    }\n    let ancestorCmdNames = '';\n    for (let ancestorCmd = cmd.parent; ancestorCmd; ancestorCmd = ancestorCmd.parent) {\n      ancestorCmdNames = ancestorCmd.name() + ' ' + ancestorCmdNames;\n    }\n    return ancestorCmdNames + cmdName + ' ' + cmd.usage();\n  }\n\n  /**\n   * Get the description for the command.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  commandDescription(cmd) {\n    // @ts-ignore: overloaded return type\n    return cmd.description();\n  }\n\n  /**\n   * Get the subcommand summary to show in the list of subcommands.\n   * (Fallback to description for backwards compatibility.)\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  subcommandDescription(cmd) {\n    // @ts-ignore: overloaded return type\n    return cmd.summary() || cmd.description();\n  }\n\n  /**\n   * Get the option description to show in the list of options.\n   *\n   * @param {Option} option\n   * @return {string}\n   */\n\n  optionDescription(option) {\n    const extraInfo = [];\n\n    if (option.argChoices) {\n      extraInfo.push(\n        // use stringify to match the display of the default value\n        `choices: ${option.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`);\n    }\n    if (option.defaultValue !== undefined) {\n      // default for boolean and negated more for programmer than end user,\n      // but show true/false for boolean option as may be for hand-rolled env or config processing.\n      const showDefault = option.required || option.optional ||\n        (option.isBoolean() && typeof option.defaultValue === 'boolean');\n      if (showDefault) {\n        extraInfo.push(`default: ${option.defaultValueDescription || JSON.stringify(option.defaultValue)}`);\n      }\n    }\n    // preset for boolean and negated are more for programmer than end user\n    if (option.presetArg !== undefined && option.optional) {\n      extraInfo.push(`preset: ${JSON.stringify(option.presetArg)}`);\n    }\n    if (option.envVar !== undefined) {\n      extraInfo.push(`env: ${option.envVar}`);\n    }\n    if (extraInfo.length > 0) {\n      return `${option.description} (${extraInfo.join(', ')})`;\n    }\n\n    return option.description;\n  }\n\n  /**\n   * Get the argument description to show in the list of arguments.\n   *\n   * @param {Argument} argument\n   * @return {string}\n   */\n\n  argumentDescription(argument) {\n    const extraInfo = [];\n    if (argument.argChoices) {\n      extraInfo.push(\n        // use stringify to match the display of the default value\n        `choices: ${argument.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`);\n    }\n    if (argument.defaultValue !== undefined) {\n      extraInfo.push(`default: ${argument.defaultValueDescription || JSON.stringify(argument.defaultValue)}`);\n    }\n    if (extraInfo.length > 0) {\n      const extraDescripton = `(${extraInfo.join(', ')})`;\n      if (argument.description) {\n        return `${argument.description} ${extraDescripton}`;\n      }\n      return extraDescripton;\n    }\n    return argument.description;\n  }\n\n  /**\n   * Generate the built-in help text.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {string}\n   */\n\n  formatHelp(cmd, helper) {\n    const termWidth = helper.padWidth(cmd, helper);\n    const helpWidth = helper.helpWidth || 80;\n    const itemIndentWidth = 2;\n    const itemSeparatorWidth = 2; // between term and description\n    function formatItem(term, description) {\n      if (description) {\n        const fullText = `${term.padEnd(termWidth + itemSeparatorWidth)}${description}`;\n        return helper.wrap(fullText, helpWidth - itemIndentWidth, termWidth + itemSeparatorWidth);\n      }\n      return term;\n    }\n    function formatList(textArray) {\n      return textArray.join('\\n').replace(/^/gm, ' '.repeat(itemIndentWidth));\n    }\n\n    // Usage\n    let output = [`Usage: ${helper.commandUsage(cmd)}`, ''];\n\n    // Description\n    const commandDescription = helper.commandDescription(cmd);\n    if (commandDescription.length > 0) {\n      output = output.concat([helper.wrap(commandDescription, helpWidth, 0), '']);\n    }\n\n    // Arguments\n    const argumentList = helper.visibleArguments(cmd).map((argument) => {\n      return formatItem(helper.argumentTerm(argument), helper.argumentDescription(argument));\n    });\n    if (argumentList.length > 0) {\n      output = output.concat(['Arguments:', formatList(argumentList), '']);\n    }\n\n    // Options\n    const optionList = helper.visibleOptions(cmd).map((option) => {\n      return formatItem(helper.optionTerm(option), helper.optionDescription(option));\n    });\n    if (optionList.length > 0) {\n      output = output.concat(['Options:', formatList(optionList), '']);\n    }\n\n    if (this.showGlobalOptions) {\n      const globalOptionList = helper.visibleGlobalOptions(cmd).map((option) => {\n        return formatItem(helper.optionTerm(option), helper.optionDescription(option));\n      });\n      if (globalOptionList.length > 0) {\n        output = output.concat(['Global Options:', formatList(globalOptionList), '']);\n      }\n    }\n\n    // Commands\n    const commandList = helper.visibleCommands(cmd).map((cmd) => {\n      return formatItem(helper.subcommandTerm(cmd), helper.subcommandDescription(cmd));\n    });\n    if (commandList.length > 0) {\n      output = output.concat(['Commands:', formatList(commandList), '']);\n    }\n\n    return output.join('\\n');\n  }\n\n  /**\n   * Calculate the pad width from the maximum term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  padWidth(cmd, helper) {\n    return Math.max(\n      helper.longestOptionTermLength(cmd, helper),\n      helper.longestGlobalOptionTermLength(cmd, helper),\n      helper.longestSubcommandTermLength(cmd, helper),\n      helper.longestArgumentTermLength(cmd, helper)\n    );\n  }\n\n  /**\n   * Wrap the given string to width characters per line, with lines after the first indented.\n   * Do not wrap if insufficient room for wrapping (minColumnWidth), or string is manually formatted.\n   *\n   * @param {string} str\n   * @param {number} width\n   * @param {number} indent\n   * @param {number} [minColumnWidth=40]\n   * @return {string}\n   *\n   */\n\n  wrap(str, width, indent, minColumnWidth = 40) {\n    // Full \\s characters, minus the linefeeds.\n    const indents = ' \\\\f\\\\t\\\\v\\u00a0\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff';\n    // Detect manually wrapped and indented strings by searching for line break followed by spaces.\n    const manualIndent = new RegExp(`[\\\\n][${indents}]+`);\n    if (str.match(manualIndent)) return str;\n    // Do not wrap if not enough room for a wrapped column of text (as could end up with a word per line).\n    const columnWidth = width - indent;\n    if (columnWidth < minColumnWidth) return str;\n\n    const leadingStr = str.slice(0, indent);\n    const columnText = str.slice(indent).replace('\\r\\n', '\\n');\n    const indentString = ' '.repeat(indent);\n    const zeroWidthSpace = '\\u200B';\n    const breaks = `\\\\s${zeroWidthSpace}`;\n    // Match line end (so empty lines don't collapse),\n    // or as much text as will fit in column, or excess text up to first break.\n    const regex = new RegExp(`\\n|.{1,${columnWidth - 1}}([${breaks}]|$)|[^${breaks}]+?([${breaks}]|$)`, 'g');\n    const lines = columnText.match(regex) || [];\n    return leadingStr + lines.map((line, i) => {\n      if (line === '\\n') return ''; // preserve empty lines\n      return ((i > 0) ? indentString : '') + line.trimEnd();\n    }).join('\\n');\n  }\n}\n\nexports.Help = Help;\n",
    "const { InvalidArgumentError } = require('./error.js');\n\nclass Option {\n  /**\n   * Initialize a new `Option` with the given `flags` and `description`.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   */\n\n  constructor(flags, description) {\n    this.flags = flags;\n    this.description = description || '';\n\n    this.required = flags.includes('<'); // A value must be supplied when the option is specified.\n    this.optional = flags.includes('['); // A value is optional when the option is specified.\n    // variadic test ignores <value,...> et al which might be used to describe custom splitting of single argument\n    this.variadic = /\\w\\.\\.\\.[>\\]]$/.test(flags); // The option can take multiple values.\n    this.mandatory = false; // The option must have a value after parsing, which usually means it must be specified on command line.\n    const optionFlags = splitOptionFlags(flags);\n    this.short = optionFlags.shortFlag;\n    this.long = optionFlags.longFlag;\n    this.negate = false;\n    if (this.long) {\n      this.negate = this.long.startsWith('--no-');\n    }\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.presetArg = undefined;\n    this.envVar = undefined;\n    this.parseArg = undefined;\n    this.hidden = false;\n    this.argChoices = undefined;\n    this.conflictsWith = [];\n    this.implied = undefined;\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {*} value\n   * @param {string} [description]\n   * @return {Option}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  }\n\n  /**\n   * Preset to use when option used without option-argument, especially optional but also boolean and negated.\n   * The custom processing (parseArg) is called.\n   *\n   * @example\n   * new Option('--color').default('GREYSCALE').preset('RGB');\n   * new Option('--donate [amount]').preset('20').argParser(parseFloat);\n   *\n   * @param {*} arg\n   * @return {Option}\n   */\n\n  preset(arg) {\n    this.presetArg = arg;\n    return this;\n  }\n\n  /**\n   * Add option name(s) that conflict with this option.\n   * An error will be displayed if conflicting options are found during parsing.\n   *\n   * @example\n   * new Option('--rgb').conflicts('cmyk');\n   * new Option('--js').conflicts(['ts', 'jsx']);\n   *\n   * @param {string | string[]} names\n   * @return {Option}\n   */\n\n  conflicts(names) {\n    this.conflictsWith = this.conflictsWith.concat(names);\n    return this;\n  }\n\n  /**\n   * Specify implied option values for when this option is set and the implied options are not.\n   *\n   * The custom processing (parseArg) is not called on the implied values.\n   *\n   * @example\n   * program\n   *   .addOption(new Option('--log', 'write logging information to file'))\n   *   .addOption(new Option('--trace', 'log extra details').implies({ log: 'trace.txt' }));\n   *\n   * @param {Object} impliedOptionValues\n   * @return {Option}\n   */\n  implies(impliedOptionValues) {\n    let newImplied = impliedOptionValues;\n    if (typeof impliedOptionValues === 'string') {\n      // string is not documented, but easy mistake and we can do what user probably intended.\n      newImplied = { [impliedOptionValues]: true };\n    }\n    this.implied = Object.assign(this.implied || {}, newImplied);\n    return this;\n  }\n\n  /**\n   * Set environment variable to check for option value.\n   *\n   * An environment variable is only used if when processed the current option value is\n   * undefined, or the source of the current value is 'default' or 'config' or 'env'.\n   *\n   * @param {string} name\n   * @return {Option}\n   */\n\n  env(name) {\n    this.envVar = name;\n    return this;\n  }\n\n  /**\n   * Set the custom handler for processing CLI option arguments into option values.\n   *\n   * @param {Function} [fn]\n   * @return {Option}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  }\n\n  /**\n   * Whether the option is mandatory and must have a value after parsing.\n   *\n   * @param {boolean} [mandatory=true]\n   * @return {Option}\n   */\n\n  makeOptionMandatory(mandatory = true) {\n    this.mandatory = !!mandatory;\n    return this;\n  }\n\n  /**\n   * Hide option in help.\n   *\n   * @param {boolean} [hide=true]\n   * @return {Option}\n   */\n\n  hideHelp(hide = true) {\n    this.hidden = !!hide;\n    return this;\n  }\n\n  /**\n   * @api private\n   */\n\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    return previous.concat(value);\n  }\n\n  /**\n   * Only allow option value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Option}\n   */\n\n  choices(values) {\n    this.argChoices = values.slice();\n    this.parseArg = (arg, previous) => {\n      if (!this.argChoices.includes(arg)) {\n        throw new InvalidArgumentError(`Allowed choices are ${this.argChoices.join(', ')}.`);\n      }\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  }\n\n  /**\n   * Return option name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    if (this.long) {\n      return this.long.replace(/^--/, '');\n    }\n    return this.short.replace(/^-/, '');\n  }\n\n  /**\n   * Return option name, in a camelcase format that can be used\n   * as a object attribute key.\n   *\n   * @return {string}\n   * @api private\n   */\n\n  attributeName() {\n    return camelcase(this.name().replace(/^no-/, ''));\n  }\n\n  /**\n   * Check if `arg` matches the short or long flag.\n   *\n   * @param {string} arg\n   * @return {boolean}\n   * @api private\n   */\n\n  is(arg) {\n    return this.short === arg || this.long === arg;\n  }\n\n  /**\n   * Return whether a boolean option.\n   *\n   * Options are one of boolean, negated, required argument, or optional argument.\n   *\n   * @return {boolean}\n   * @api private\n   */\n\n  isBoolean() {\n    return !this.required && !this.optional && !this.negate;\n  }\n}\n\n/**\n * This class is to make it easier to work with dual options, without changing the existing\n * implementation. We support separate dual options for separate positive and negative options,\n * like `--build` and `--no-build`, which share a single option value. This works nicely for some\n * use cases, but is tricky for others where we want separate behaviours despite\n * the single shared option value.\n */\nclass DualOptions {\n  /**\n   * @param {Option[]} options\n   */\n  constructor(options) {\n    this.positiveOptions = new Map();\n    this.negativeOptions = new Map();\n    this.dualOptions = new Set();\n    options.forEach(option => {\n      if (option.negate) {\n        this.negativeOptions.set(option.attributeName(), option);\n      } else {\n        this.positiveOptions.set(option.attributeName(), option);\n      }\n    });\n    this.negativeOptions.forEach((value, key) => {\n      if (this.positiveOptions.has(key)) {\n        this.dualOptions.add(key);\n      }\n    });\n  }\n\n  /**\n   * Did the value come from the option, and not from possible matching dual option?\n   *\n   * @param {*} value\n   * @param {Option} option\n   * @returns {boolean}\n   */\n  valueFromOption(value, option) {\n    const optionKey = option.attributeName();\n    if (!this.dualOptions.has(optionKey)) return true;\n\n    // Use the value to deduce if (probably) came from the option.\n    const preset = this.negativeOptions.get(optionKey).presetArg;\n    const negativeValue = (preset !== undefined) ? preset : false;\n    return option.negate === (negativeValue === value);\n  }\n}\n\n/**\n * Convert string from kebab-case to camelCase.\n *\n * @param {string} str\n * @return {string}\n * @api private\n */\n\nfunction camelcase(str) {\n  return str.split('-').reduce((str, word) => {\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}\n\n/**\n * Split the short and long flag out of something like '-m,--mixed <value>'\n *\n * @api private\n */\n\nfunction splitOptionFlags(flags) {\n  let shortFlag;\n  let longFlag;\n  // Use original very loose parsing to maintain backwards compatibility for now,\n  // which allowed for example unintended `-sw, --short-word` [sic].\n  const flagParts = flags.split(/[ |,]+/);\n  if (flagParts.length > 1 && !/^[[<]/.test(flagParts[1])) shortFlag = flagParts.shift();\n  longFlag = flagParts.shift();\n  // Add support for lone short flag without significantly changing parsing!\n  if (!shortFlag && /^-[^-]$/.test(longFlag)) {\n    shortFlag = longFlag;\n    longFlag = undefined;\n  }\n  return { shortFlag, longFlag };\n}\n\nexports.Option = Option;\nexports.splitOptionFlags = splitOptionFlags;\nexports.DualOptions = DualOptions;\n",
    "const maxDistance = 3;\n\nfunction editDistance(a, b) {\n  // https://en.wikipedia.org/wiki/Damerau–Levenshtein_distance\n  // Calculating optimal string alignment distance, no substring is edited more than once.\n  // (Simple implementation.)\n\n  // Quick early exit, return worst case.\n  if (Math.abs(a.length - b.length) > maxDistance) return Math.max(a.length, b.length);\n\n  // distance between prefix substrings of a and b\n  const d = [];\n\n  // pure deletions turn a into empty string\n  for (let i = 0; i <= a.length; i++) {\n    d[i] = [i];\n  }\n  // pure insertions turn empty string into b\n  for (let j = 0; j <= b.length; j++) {\n    d[0][j] = j;\n  }\n\n  // fill matrix\n  for (let j = 1; j <= b.length; j++) {\n    for (let i = 1; i <= a.length; i++) {\n      let cost = 1;\n      if (a[i - 1] === b[j - 1]) {\n        cost = 0;\n      } else {\n        cost = 1;\n      }\n      d[i][j] = Math.min(\n        d[i - 1][j] + 1, // deletion\n        d[i][j - 1] + 1, // insertion\n        d[i - 1][j - 1] + cost // substitution\n      );\n      // transposition\n      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + 1);\n      }\n    }\n  }\n\n  return d[a.length][b.length];\n}\n\n/**\n * Find close matches, restricted to same number of edits.\n *\n * @param {string} word\n * @param {string[]} candidates\n * @returns {string}\n */\n\nfunction suggestSimilar(word, candidates) {\n  if (!candidates || candidates.length === 0) return '';\n  // remove possible duplicates\n  candidates = Array.from(new Set(candidates));\n\n  const searchingOptions = word.startsWith('--');\n  if (searchingOptions) {\n    word = word.slice(2);\n    candidates = candidates.map(candidate => candidate.slice(2));\n  }\n\n  let similar = [];\n  let bestDistance = maxDistance;\n  const minSimilarity = 0.4;\n  candidates.forEach((candidate) => {\n    if (candidate.length <= 1) return; // no one character guesses\n\n    const distance = editDistance(word, candidate);\n    const length = Math.max(word.length, candidate.length);\n    const similarity = (length - distance) / length;\n    if (similarity > minSimilarity) {\n      if (distance < bestDistance) {\n        // better edit distance, throw away previous worse matches\n        bestDistance = distance;\n        similar = [candidate];\n      } else if (distance === bestDistance) {\n        similar.push(candidate);\n      }\n    }\n  });\n\n  similar.sort((a, b) => a.localeCompare(b));\n  if (searchingOptions) {\n    similar = similar.map(candidate => `--${candidate}`);\n  }\n\n  if (similar.length > 1) {\n    return `\\n(Did you mean one of ${similar.join(', ')}?)`;\n  }\n  if (similar.length === 1) {\n    return `\\n(Did you mean ${similar[0]}?)`;\n  }\n  return '';\n}\n\nexports.suggestSimilar = suggestSimilar;\n",
    "const EventEmitter = require('events').EventEmitter;\nconst childProcess = require('child_process');\nconst path = require('path');\nconst fs = require('fs');\nconst process = require('process');\n\nconst { Argument, humanReadableArgName } = require('./argument.js');\nconst { CommanderError } = require('./error.js');\nconst { Help } = require('./help.js');\nconst { Option, splitOptionFlags, DualOptions } = require('./option.js');\nconst { suggestSimilar } = require('./suggestSimilar');\n\nclass Command extends EventEmitter {\n  /**\n   * Initialize a new `Command`.\n   *\n   * @param {string} [name]\n   */\n\n  constructor(name) {\n    super();\n    /** @type {Command[]} */\n    this.commands = [];\n    /** @type {Option[]} */\n    this.options = [];\n    this.parent = null;\n    this._allowUnknownOption = false;\n    this._allowExcessArguments = true;\n    /** @type {Argument[]} */\n    this.registeredArguments = [];\n    this._args = this.registeredArguments; // deprecated old name\n    /** @type {string[]} */\n    this.args = []; // cli args with options removed\n    this.rawArgs = [];\n    this.processedArgs = []; // like .args but after custom processing and collecting variadic\n    this._scriptPath = null;\n    this._name = name || '';\n    this._optionValues = {};\n    this._optionValueSources = {}; // default, env, cli etc\n    this._storeOptionsAsProperties = false;\n    this._actionHandler = null;\n    this._executableHandler = false;\n    this._executableFile = null; // custom name for executable\n    this._executableDir = null; // custom search directory for subcommands\n    this._defaultCommandName = null;\n    this._exitCallback = null;\n    this._aliases = [];\n    this._combineFlagAndOptionalValue = true;\n    this._description = '';\n    this._summary = '';\n    this._argsDescription = undefined; // legacy\n    this._enablePositionalOptions = false;\n    this._passThroughOptions = false;\n    this._lifeCycleHooks = {}; // a hash of arrays\n    /** @type {boolean | string} */\n    this._showHelpAfterError = false;\n    this._showSuggestionAfterError = true;\n\n    // see .configureOutput() for docs\n    this._outputConfiguration = {\n      writeOut: (str) => process.stdout.write(str),\n      writeErr: (str) => process.stderr.write(str),\n      getOutHelpWidth: () => process.stdout.isTTY ? process.stdout.columns : undefined,\n      getErrHelpWidth: () => process.stderr.isTTY ? process.stderr.columns : undefined,\n      outputError: (str, write) => write(str)\n    };\n\n    this._hidden = false;\n    this._hasHelpOption = true;\n    this._helpFlags = '-h, --help';\n    this._helpDescription = 'display help for command';\n    this._helpShortFlag = '-h';\n    this._helpLongFlag = '--help';\n    this._addImplicitHelpCommand = undefined; // Deliberately undefined, not decided whether true or false\n    this._helpCommandName = 'help';\n    this._helpCommandnameAndArgs = 'help [command]';\n    this._helpCommandDescription = 'display help for command';\n    this._helpConfiguration = {};\n  }\n\n  /**\n   * Copy settings that are useful to have in common across root command and subcommands.\n   *\n   * (Used internally when adding a command using `.command()` so subcommands inherit parent settings.)\n   *\n   * @param {Command} sourceCommand\n   * @return {Command} `this` command for chaining\n   */\n  copyInheritedSettings(sourceCommand) {\n    this._outputConfiguration = sourceCommand._outputConfiguration;\n    this._hasHelpOption = sourceCommand._hasHelpOption;\n    this._helpFlags = sourceCommand._helpFlags;\n    this._helpDescription = sourceCommand._helpDescription;\n    this._helpShortFlag = sourceCommand._helpShortFlag;\n    this._helpLongFlag = sourceCommand._helpLongFlag;\n    this._helpCommandName = sourceCommand._helpCommandName;\n    this._helpCommandnameAndArgs = sourceCommand._helpCommandnameAndArgs;\n    this._helpCommandDescription = sourceCommand._helpCommandDescription;\n    this._helpConfiguration = sourceCommand._helpConfiguration;\n    this._exitCallback = sourceCommand._exitCallback;\n    this._storeOptionsAsProperties = sourceCommand._storeOptionsAsProperties;\n    this._combineFlagAndOptionalValue = sourceCommand._combineFlagAndOptionalValue;\n    this._allowExcessArguments = sourceCommand._allowExcessArguments;\n    this._enablePositionalOptions = sourceCommand._enablePositionalOptions;\n    this._showHelpAfterError = sourceCommand._showHelpAfterError;\n    this._showSuggestionAfterError = sourceCommand._showSuggestionAfterError;\n\n    return this;\n  }\n\n  /**\n   * @returns {Command[]}\n   * @api private\n   */\n\n  _getCommandAndAncestors() {\n    const result = [];\n    for (let command = this; command; command = command.parent) {\n      result.push(command);\n    }\n    return result;\n  }\n\n  /**\n   * Define a command.\n   *\n   * There are two styles of command: pay attention to where to put the description.\n   *\n   * @example\n   * // Command implemented using action handler (description is supplied separately to `.command`)\n   * program\n   *   .command('clone <source> [destination]')\n   *   .description('clone a repository into a newly created directory')\n   *   .action((source, destination) => {\n   *     console.log('clone command called');\n   *   });\n   *\n   * // Command implemented using separate executable file (description is second parameter to `.command`)\n   * program\n   *   .command('start <service>', 'start named service')\n   *   .command('stop [service]', 'stop named service, or all if no name supplied');\n   *\n   * @param {string} nameAndArgs - command name and arguments, args are `<required>` or `[optional]` and last may also be `variadic...`\n   * @param {Object|string} [actionOptsOrExecDesc] - configuration options (for action), or description (for executable)\n   * @param {Object} [execOpts] - configuration options (for executable)\n   * @return {Command} returns new command for action handler, or `this` for executable command\n   */\n\n  command(nameAndArgs, actionOptsOrExecDesc, execOpts) {\n    let desc = actionOptsOrExecDesc;\n    let opts = execOpts;\n    if (typeof desc === 'object' && desc !== null) {\n      opts = desc;\n      desc = null;\n    }\n    opts = opts || {};\n    const [, name, args] = nameAndArgs.match(/([^ ]+) *(.*)/);\n\n    const cmd = this.createCommand(name);\n    if (desc) {\n      cmd.description(desc);\n      cmd._executableHandler = true;\n    }\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    cmd._hidden = !!(opts.noHelp || opts.hidden); // noHelp is deprecated old name for hidden\n    cmd._executableFile = opts.executableFile || null; // Custom name for executable file, set missing to null to match constructor\n    if (args) cmd.arguments(args);\n    this.commands.push(cmd);\n    cmd.parent = this;\n    cmd.copyInheritedSettings(this);\n\n    if (desc) return this;\n    return cmd;\n  }\n\n  /**\n   * Factory routine to create a new unattached command.\n   *\n   * See .command() for creating an attached subcommand, which uses this routine to\n   * create the command. You can override createCommand to customise subcommands.\n   *\n   * @param {string} [name]\n   * @return {Command} new command\n   */\n\n  createCommand(name) {\n    return new Command(name);\n  }\n\n  /**\n   * You can customise the help with a subclass of Help by overriding createHelp,\n   * or by overriding Help properties using configureHelp().\n   *\n   * @return {Help}\n   */\n\n  createHelp() {\n    return Object.assign(new Help(), this.configureHelp());\n  }\n\n  /**\n   * You can customise the help by overriding Help properties using configureHelp(),\n   * or with a subclass of Help by overriding createHelp().\n   *\n   * @param {Object} [configuration] - configuration options\n   * @return {Command|Object} `this` command for chaining, or stored configuration\n   */\n\n  configureHelp(configuration) {\n    if (configuration === undefined) return this._helpConfiguration;\n\n    this._helpConfiguration = configuration;\n    return this;\n  }\n\n  /**\n   * The default output goes to stdout and stderr. You can customise this for special\n   * applications. You can also customise the display of errors by overriding outputError.\n   *\n   * The configuration properties are all functions:\n   *\n   *     // functions to change where being written, stdout and stderr\n   *     writeOut(str)\n   *     writeErr(str)\n   *     // matching functions to specify width for wrapping help\n   *     getOutHelpWidth()\n   *     getErrHelpWidth()\n   *     // functions based on what is being written out\n   *     outputError(str, write) // used for displaying errors, and not used for displaying help\n   *\n   * @param {Object} [configuration] - configuration options\n   * @return {Command|Object} `this` command for chaining, or stored configuration\n   */\n\n  configureOutput(configuration) {\n    if (configuration === undefined) return this._outputConfiguration;\n\n    Object.assign(this._outputConfiguration, configuration);\n    return this;\n  }\n\n  /**\n   * Display the help or a custom message after an error occurs.\n   *\n   * @param {boolean|string} [displayHelp]\n   * @return {Command} `this` command for chaining\n   */\n  showHelpAfterError(displayHelp = true) {\n    if (typeof displayHelp !== 'string') displayHelp = !!displayHelp;\n    this._showHelpAfterError = displayHelp;\n    return this;\n  }\n\n  /**\n   * Display suggestion of similar commands for unknown commands, or options for unknown options.\n   *\n   * @param {boolean} [displaySuggestion]\n   * @return {Command} `this` command for chaining\n   */\n  showSuggestionAfterError(displaySuggestion = true) {\n    this._showSuggestionAfterError = !!displaySuggestion;\n    return this;\n  }\n\n  /**\n   * Add a prepared subcommand.\n   *\n   * See .command() for creating an attached subcommand which inherits settings from its parent.\n   *\n   * @param {Command} cmd - new subcommand\n   * @param {Object} [opts] - configuration options\n   * @return {Command} `this` command for chaining\n   */\n\n  addCommand(cmd, opts) {\n    if (!cmd._name) {\n      throw new Error(`Command passed to .addCommand() must have a name\n- specify the name in Command constructor or using .name()`);\n    }\n\n    opts = opts || {};\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    if (opts.noHelp || opts.hidden) cmd._hidden = true; // modifying passed command due to existing implementation\n\n    this.commands.push(cmd);\n    cmd.parent = this;\n    return this;\n  }\n\n  /**\n   * Factory routine to create a new unattached argument.\n   *\n   * See .argument() for creating an attached argument, which uses this routine to\n   * create the argument. You can override createArgument to return a custom argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @return {Argument} new argument\n   */\n\n  createArgument(name, description) {\n    return new Argument(name, description);\n  }\n\n  /**\n   * Define argument syntax for command.\n   *\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @example\n   * program.argument('<input-file>');\n   * program.argument('[output-file]');\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @param {Function|*} [fn] - custom argument processing function\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n  argument(name, description, fn, defaultValue) {\n    const argument = this.createArgument(name, description);\n    if (typeof fn === 'function') {\n      argument.default(defaultValue).argParser(fn);\n    } else {\n      argument.default(fn);\n    }\n    this.addArgument(argument);\n    return this;\n  }\n\n  /**\n   * Define argument syntax for command, adding multiple at once (without descriptions).\n   *\n   * See also .argument().\n   *\n   * @example\n   * program.arguments('<cmd> [env]');\n   *\n   * @param {string} names\n   * @return {Command} `this` command for chaining\n   */\n\n  arguments(names) {\n    names.trim().split(/ +/).forEach((detail) => {\n      this.argument(detail);\n    });\n    return this;\n  }\n\n  /**\n   * Define argument syntax for command, adding a prepared argument.\n   *\n   * @param {Argument} argument\n   * @return {Command} `this` command for chaining\n   */\n  addArgument(argument) {\n    const previousArgument = this.registeredArguments.slice(-1)[0];\n    if (previousArgument && previousArgument.variadic) {\n      throw new Error(`only the last argument can be variadic '${previousArgument.name()}'`);\n    }\n    if (argument.required && argument.defaultValue !== undefined && argument.parseArg === undefined) {\n      throw new Error(`a default value for a required argument is never used: '${argument.name()}'`);\n    }\n    this.registeredArguments.push(argument);\n    return this;\n  }\n\n  /**\n   * Override default decision whether to add implicit help command.\n   *\n   *    addHelpCommand() // force on\n   *    addHelpCommand(false); // force off\n   *    addHelpCommand('help [cmd]', 'display help for [cmd]'); // force on with custom details\n   *\n   * @return {Command} `this` command for chaining\n   */\n\n  addHelpCommand(enableOrNameAndArgs, description) {\n    if (enableOrNameAndArgs === false) {\n      this._addImplicitHelpCommand = false;\n    } else {\n      this._addImplicitHelpCommand = true;\n      if (typeof enableOrNameAndArgs === 'string') {\n        this._helpCommandName = enableOrNameAndArgs.split(' ')[0];\n        this._helpCommandnameAndArgs = enableOrNameAndArgs;\n      }\n      this._helpCommandDescription = description || this._helpCommandDescription;\n    }\n    return this;\n  }\n\n  /**\n   * @return {boolean}\n   * @api private\n   */\n\n  _hasImplicitHelpCommand() {\n    if (this._addImplicitHelpCommand === undefined) {\n      return this.commands.length && !this._actionHandler && !this._findCommand('help');\n    }\n    return this._addImplicitHelpCommand;\n  }\n\n  /**\n   * Add hook for life cycle event.\n   *\n   * @param {string} event\n   * @param {Function} listener\n   * @return {Command} `this` command for chaining\n   */\n\n  hook(event, listener) {\n    const allowedValues = ['preSubcommand', 'preAction', 'postAction'];\n    if (!allowedValues.includes(event)) {\n      throw new Error(`Unexpected value for event passed to hook : '${event}'.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    if (this._lifeCycleHooks[event]) {\n      this._lifeCycleHooks[event].push(listener);\n    } else {\n      this._lifeCycleHooks[event] = [listener];\n    }\n    return this;\n  }\n\n  /**\n   * Register callback to use as replacement for calling process.exit.\n   *\n   * @param {Function} [fn] optional callback which will be passed a CommanderError, defaults to throwing\n   * @return {Command} `this` command for chaining\n   */\n\n  exitOverride(fn) {\n    if (fn) {\n      this._exitCallback = fn;\n    } else {\n      this._exitCallback = (err) => {\n        if (err.code !== 'commander.executeSubCommandAsync') {\n          throw err;\n        } else {\n          // Async callback from spawn events, not useful to throw.\n        }\n      };\n    }\n    return this;\n  }\n\n  /**\n   * Call process.exit, and _exitCallback if defined.\n   *\n   * @param {number} exitCode exit code for using with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   * @return never\n   * @api private\n   */\n\n  _exit(exitCode, code, message) {\n    if (this._exitCallback) {\n      this._exitCallback(new CommanderError(exitCode, code, message));\n      // Expecting this line is not reached.\n    }\n    process.exit(exitCode);\n  }\n\n  /**\n   * Register callback `fn` for the command.\n   *\n   * @example\n   * program\n   *   .command('serve')\n   *   .description('start service')\n   *   .action(function() {\n   *      // do work here\n   *   });\n   *\n   * @param {Function} fn\n   * @return {Command} `this` command for chaining\n   */\n\n  action(fn) {\n    const listener = (args) => {\n      // The .action callback takes an extra parameter which is the command or options.\n      const expectedArgsCount = this.registeredArguments.length;\n      const actionArgs = args.slice(0, expectedArgsCount);\n      if (this._storeOptionsAsProperties) {\n        actionArgs[expectedArgsCount] = this; // backwards compatible \"options\"\n      } else {\n        actionArgs[expectedArgsCount] = this.opts();\n      }\n      actionArgs.push(this);\n\n      return fn.apply(this, actionArgs);\n    };\n    this._actionHandler = listener;\n    return this;\n  }\n\n  /**\n   * Factory routine to create a new unattached option.\n   *\n   * See .option() for creating an attached option, which uses this routine to\n   * create the option. You can override createOption to return a custom option.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @return {Option} new option\n   */\n\n  createOption(flags, description) {\n    return new Option(flags, description);\n  }\n\n  /**\n   * Wrap parseArgs to catch 'commander.invalidArgument'.\n   *\n   * @param {Option | Argument} target\n   * @param {string} value\n   * @param {*} previous\n   * @param {string} invalidArgumentMessage\n   * @api private\n   */\n\n  _callParseArg(target, value, previous, invalidArgumentMessage) {\n    try {\n      return target.parseArg(value, previous);\n    } catch (err) {\n      if (err.code === 'commander.invalidArgument') {\n        const message = `${invalidArgumentMessage} ${err.message}`;\n        this.error(message, { exitCode: err.exitCode, code: err.code });\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Add an option.\n   *\n   * @param {Option} option\n   * @return {Command} `this` command for chaining\n   */\n  addOption(option) {\n    const oname = option.name();\n    const name = option.attributeName();\n\n    // store default value\n    if (option.negate) {\n      // --no-foo is special and defaults foo to true, unless a --foo option is already defined\n      const positiveLongFlag = option.long.replace(/^--no-/, '--');\n      if (!this._findOption(positiveLongFlag)) {\n        this.setOptionValueWithSource(name, option.defaultValue === undefined ? true : option.defaultValue, 'default');\n      }\n    } else if (option.defaultValue !== undefined) {\n      this.setOptionValueWithSource(name, option.defaultValue, 'default');\n    }\n\n    // register the option\n    this.options.push(option);\n\n    // handler for cli and env supplied values\n    const handleOptionValue = (val, invalidValueMessage, valueSource) => {\n      // val is null for optional option used without an optional-argument.\n      // val is undefined for boolean and negated option.\n      if (val == null && option.presetArg !== undefined) {\n        val = option.presetArg;\n      }\n\n      // custom processing\n      const oldValue = this.getOptionValue(name);\n      if (val !== null && option.parseArg) {\n        val = this._callParseArg(option, val, oldValue, invalidValueMessage);\n      } else if (val !== null && option.variadic) {\n        val = option._concatValue(val, oldValue);\n      }\n\n      // Fill-in appropriate missing values. Long winded but easy to follow.\n      if (val == null) {\n        if (option.negate) {\n          val = false;\n        } else if (option.isBoolean() || option.optional) {\n          val = true;\n        } else {\n          val = ''; // not normal, parseArg might have failed or be a mock function for testing\n        }\n      }\n      this.setOptionValueWithSource(name, val, valueSource);\n    };\n\n    this.on('option:' + oname, (val) => {\n      const invalidValueMessage = `error: option '${option.flags}' argument '${val}' is invalid.`;\n      handleOptionValue(val, invalidValueMessage, 'cli');\n    });\n\n    if (option.envVar) {\n      this.on('optionEnv:' + oname, (val) => {\n        const invalidValueMessage = `error: option '${option.flags}' value '${val}' from env '${option.envVar}' is invalid.`;\n        handleOptionValue(val, invalidValueMessage, 'env');\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Internal implementation shared by .option() and .requiredOption()\n   *\n   * @api private\n   */\n  _optionEx(config, flags, description, fn, defaultValue) {\n    if (typeof flags === 'object' && flags instanceof Option) {\n      throw new Error('To add an Option object use addOption() instead of option() or requiredOption()');\n    }\n    const option = this.createOption(flags, description);\n    option.makeOptionMandatory(!!config.mandatory);\n    if (typeof fn === 'function') {\n      option.default(defaultValue).argParser(fn);\n    } else if (fn instanceof RegExp) {\n      // deprecated\n      const regex = fn;\n      fn = (val, def) => {\n        const m = regex.exec(val);\n        return m ? m[0] : def;\n      };\n      option.default(defaultValue).argParser(fn);\n    } else {\n      option.default(fn);\n    }\n\n    return this.addOption(option);\n  }\n\n  /**\n   * Define option with `flags`, `description`, and optional argument parsing function or `defaultValue` or both.\n   *\n   * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space. A required\n   * option-argument is indicated by `<>` and an optional option-argument by `[]`.\n   *\n   * See the README for more details, and see also addOption() and requiredOption().\n   *\n   * @example\n   * program\n   *     .option('-p, --pepper', 'add pepper')\n   *     .option('-p, --pizza-type <TYPE>', 'type of pizza') // required option-argument\n   *     .option('-c, --cheese [CHEESE]', 'add extra cheese', 'mozzarella') // optional option-argument with default\n   *     .option('-t, --tip <VALUE>', 'add tip to purchase cost', parseFloat) // custom parse function\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @param {Function|*} [parseArg] - custom option processing function or default value\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n\n  option(flags, description, parseArg, defaultValue) {\n    return this._optionEx({}, flags, description, parseArg, defaultValue);\n  }\n\n  /**\n  * Add a required option which must have a value after parsing. This usually means\n  * the option must be specified on the command line. (Otherwise the same as .option().)\n  *\n  * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space.\n  *\n  * @param {string} flags\n  * @param {string} [description]\n  * @param {Function|*} [parseArg] - custom option processing function or default value\n  * @param {*} [defaultValue]\n  * @return {Command} `this` command for chaining\n  */\n\n  requiredOption(flags, description, parseArg, defaultValue) {\n    return this._optionEx({ mandatory: true }, flags, description, parseArg, defaultValue);\n  }\n\n  /**\n   * Alter parsing of short flags with optional values.\n   *\n   * @example\n   * // for `.option('-f,--flag [value]'):\n   * program.combineFlagAndOptionalValue(true);  // `-f80` is treated like `--flag=80`, this is the default behaviour\n   * program.combineFlagAndOptionalValue(false) // `-fb` is treated like `-f -b`\n   *\n   * @param {Boolean} [combine=true] - if `true` or omitted, an optional value can be specified directly after the flag.\n   */\n  combineFlagAndOptionalValue(combine = true) {\n    this._combineFlagAndOptionalValue = !!combine;\n    return this;\n  }\n\n  /**\n   * Allow unknown options on the command line.\n   *\n   * @param {Boolean} [allowUnknown=true] - if `true` or omitted, no error will be thrown\n   * for unknown options.\n   */\n  allowUnknownOption(allowUnknown = true) {\n    this._allowUnknownOption = !!allowUnknown;\n    return this;\n  }\n\n  /**\n   * Allow excess command-arguments on the command line. Pass false to make excess arguments an error.\n   *\n   * @param {Boolean} [allowExcess=true] - if `true` or omitted, no error will be thrown\n   * for excess arguments.\n   */\n  allowExcessArguments(allowExcess = true) {\n    this._allowExcessArguments = !!allowExcess;\n    return this;\n  }\n\n  /**\n   * Enable positional options. Positional means global options are specified before subcommands which lets\n   * subcommands reuse the same option names, and also enables subcommands to turn on passThroughOptions.\n   * The default behaviour is non-positional and global options may appear anywhere on the command line.\n   *\n   * @param {Boolean} [positional=true]\n   */\n  enablePositionalOptions(positional = true) {\n    this._enablePositionalOptions = !!positional;\n    return this;\n  }\n\n  /**\n   * Pass through options that come after command-arguments rather than treat them as command-options,\n   * so actual command-options come before command-arguments. Turning this on for a subcommand requires\n   * positional options to have been enabled on the program (parent commands).\n   * The default behaviour is non-positional and options may appear before or after command-arguments.\n   *\n   * @param {Boolean} [passThrough=true]\n   * for unknown options.\n   */\n  passThroughOptions(passThrough = true) {\n    this._passThroughOptions = !!passThrough;\n    if (!!this.parent && passThrough && !this.parent._enablePositionalOptions) {\n      throw new Error('passThroughOptions can not be used without turning on enablePositionalOptions for parent command(s)');\n    }\n    return this;\n  }\n\n  /**\n    * Whether to store option values as properties on command object,\n    * or store separately (specify false). In both cases the option values can be accessed using .opts().\n    *\n    * @param {boolean} [storeAsProperties=true]\n    * @return {Command} `this` command for chaining\n    */\n\n  storeOptionsAsProperties(storeAsProperties = true) {\n    if (this.options.length) {\n      throw new Error('call .storeOptionsAsProperties() before adding options');\n    }\n    // if (Object.keys(this._optionValues).length) {\n    //   throw new Error('call .storeOptionsAsProperties() before setting option values');\n    // }\n    this._storeOptionsAsProperties = !!storeAsProperties;\n    return this;\n  }\n\n  /**\n   * Retrieve option value.\n   *\n   * @param {string} key\n   * @return {Object} value\n   */\n\n  getOptionValue(key) {\n    if (this._storeOptionsAsProperties) {\n      return this[key];\n    }\n    return this._optionValues[key];\n  }\n\n  /**\n   * Store option value.\n   *\n   * @param {string} key\n   * @param {Object} value\n   * @return {Command} `this` command for chaining\n   */\n\n  setOptionValue(key, value) {\n    return this.setOptionValueWithSource(key, value, undefined);\n  }\n\n  /**\n    * Store option value and where the value came from.\n    *\n    * @param {string} key\n    * @param {Object} value\n    * @param {string} source - expected values are default/config/env/cli/implied\n    * @return {Command} `this` command for chaining\n    */\n\n  setOptionValueWithSource(key, value, source) {\n    if (this._storeOptionsAsProperties) {\n      this[key] = value;\n    } else {\n      this._optionValues[key] = value;\n    }\n    this._optionValueSources[key] = source;\n    return this;\n  }\n\n  /**\n    * Get source of option value.\n    * Expected values are default | config | env | cli | implied\n    *\n    * @param {string} key\n    * @return {string}\n    */\n\n  getOptionValueSource(key) {\n    return this._optionValueSources[key];\n  }\n\n  /**\n    * Get source of option value. See also .optsWithGlobals().\n    * Expected values are default | config | env | cli | implied\n    *\n    * @param {string} key\n    * @return {string}\n    */\n\n  getOptionValueSourceWithGlobals(key) {\n    // global overwrites local, like optsWithGlobals\n    let source;\n    this._getCommandAndAncestors().forEach((cmd) => {\n      if (cmd.getOptionValueSource(key) !== undefined) {\n        source = cmd.getOptionValueSource(key);\n      }\n    });\n    return source;\n  }\n\n  /**\n   * Get user arguments from implied or explicit arguments.\n   * Side-effects: set _scriptPath if args included script. Used for default program name, and subcommand searches.\n   *\n   * @api private\n   */\n\n  _prepareUserArgs(argv, parseOptions) {\n    if (argv !== undefined && !Array.isArray(argv)) {\n      throw new Error('first parameter to parse must be array or undefined');\n    }\n    parseOptions = parseOptions || {};\n\n    // Default to using process.argv\n    if (argv === undefined) {\n      argv = process.argv;\n      // @ts-ignore: unknown property\n      if (process.versions && process.versions.electron) {\n        parseOptions.from = 'electron';\n      }\n    }\n    this.rawArgs = argv.slice();\n\n    // make it a little easier for callers by supporting various argv conventions\n    let userArgs;\n    switch (parseOptions.from) {\n      case undefined:\n      case 'node':\n        this._scriptPath = argv[1];\n        userArgs = argv.slice(2);\n        break;\n      case 'electron':\n        // @ts-ignore: unknown property\n        if (process.defaultApp) {\n          this._scriptPath = argv[1];\n          userArgs = argv.slice(2);\n        } else {\n          userArgs = argv.slice(1);\n        }\n        break;\n      case 'user':\n        userArgs = argv.slice(0);\n        break;\n      default:\n        throw new Error(`unexpected parse option { from: '${parseOptions.from}' }`);\n    }\n\n    // Find default name for program from arguments.\n    if (!this._name && this._scriptPath) this.nameFromFilename(this._scriptPath);\n    this._name = this._name || 'program';\n\n    return userArgs;\n  }\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * The default expectation is that the arguments are from node and have the application as argv[0]\n   * and the script being run in argv[1], with user parameters after that.\n   *\n   * @example\n   * program.parse(process.argv);\n   * program.parse(); // implicitly use process.argv and auto-detect node vs electron conventions\n   * program.parse(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv] - optional, defaults to process.argv\n   * @param {Object} [parseOptions] - optionally specify style of options with from: node/user/electron\n   * @param {string} [parseOptions.from] - where the args are from: 'node', 'user', 'electron'\n   * @return {Command} `this` command for chaining\n   */\n\n  parse(argv, parseOptions) {\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    this._parseCommand([], userArgs);\n\n    return this;\n  }\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * Use parseAsync instead of parse if any of your action handlers are async. Returns a Promise.\n   *\n   * The default expectation is that the arguments are from node and have the application as argv[0]\n   * and the script being run in argv[1], with user parameters after that.\n   *\n   * @example\n   * await program.parseAsync(process.argv);\n   * await program.parseAsync(); // implicitly use process.argv and auto-detect node vs electron conventions\n   * await program.parseAsync(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv]\n   * @param {Object} [parseOptions]\n   * @param {string} parseOptions.from - where the args are from: 'node', 'user', 'electron'\n   * @return {Promise}\n   */\n\n  async parseAsync(argv, parseOptions) {\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    await this._parseCommand([], userArgs);\n\n    return this;\n  }\n\n  /**\n   * Execute a sub-command executable.\n   *\n   * @api private\n   */\n\n  _executeSubCommand(subcommand, args) {\n    args = args.slice();\n    let launchWithNode = false; // Use node for source targets so do not need to get permissions correct, and on Windows.\n    const sourceExt = ['.js', '.ts', '.tsx', '.mjs', '.cjs'];\n\n    function findFile(baseDir, baseName) {\n      // Look for specified file\n      const localBin = path.resolve(baseDir, baseName);\n      if (fs.existsSync(localBin)) return localBin;\n\n      // Stop looking if candidate already has an expected extension.\n      if (sourceExt.includes(path.extname(baseName))) return undefined;\n\n      // Try all the extensions.\n      const foundExt = sourceExt.find(ext => fs.existsSync(`${localBin}${ext}`));\n      if (foundExt) return `${localBin}${foundExt}`;\n\n      return undefined;\n    }\n\n    // Not checking for help first. Unlikely to have mandatory and executable, and can't robustly test for help flags in external command.\n    this._checkForMissingMandatoryOptions();\n    this._checkForConflictingOptions();\n\n    // executableFile and executableDir might be full path, or just a name\n    let executableFile = subcommand._executableFile || `${this._name}-${subcommand._name}`;\n    let executableDir = this._executableDir || '';\n    if (this._scriptPath) {\n      let resolvedScriptPath; // resolve possible symlink for installed npm binary\n      try {\n        resolvedScriptPath = fs.realpathSync(this._scriptPath);\n      } catch (err) {\n        resolvedScriptPath = this._scriptPath;\n      }\n      executableDir = path.resolve(path.dirname(resolvedScriptPath), executableDir);\n    }\n\n    // Look for a local file in preference to a command in PATH.\n    if (executableDir) {\n      let localFile = findFile(executableDir, executableFile);\n\n      // Legacy search using prefix of script name instead of command name\n      if (!localFile && !subcommand._executableFile && this._scriptPath) {\n        const legacyName = path.basename(this._scriptPath, path.extname(this._scriptPath));\n        if (legacyName !== this._name) {\n          localFile = findFile(executableDir, `${legacyName}-${subcommand._name}`);\n        }\n      }\n      executableFile = localFile || executableFile;\n    }\n\n    launchWithNode = sourceExt.includes(path.extname(executableFile));\n\n    let proc;\n    if (process.platform !== 'win32') {\n      if (launchWithNode) {\n        args.unshift(executableFile);\n        // add executable arguments to spawn\n        args = incrementNodeInspectorPort(process.execArgv).concat(args);\n\n        proc = childProcess.spawn(process.argv[0], args, { stdio: 'inherit' });\n      } else {\n        proc = childProcess.spawn(executableFile, args, { stdio: 'inherit' });\n      }\n    } else {\n      args.unshift(executableFile);\n      // add executable arguments to spawn\n      args = incrementNodeInspectorPort(process.execArgv).concat(args);\n      proc = childProcess.spawn(process.execPath, args, { stdio: 'inherit' });\n    }\n\n    if (!proc.killed) { // testing mainly to avoid leak warnings during unit tests with mocked spawn\n      const signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];\n      signals.forEach((signal) => {\n        // @ts-ignore\n        process.on(signal, () => {\n          if (proc.killed === false && proc.exitCode === null) {\n            proc.kill(signal);\n          }\n        });\n      });\n    }\n\n    // By default terminate process when spawned process terminates.\n    // Suppressing the exit if exitCallback defined is a bit messy and of limited use, but does allow process to stay running!\n    const exitCallback = this._exitCallback;\n    if (!exitCallback) {\n      proc.on('close', process.exit.bind(process));\n    } else {\n      proc.on('close', () => {\n        exitCallback(new CommanderError(process.exitCode || 0, 'commander.executeSubCommandAsync', '(close)'));\n      });\n    }\n    proc.on('error', (err) => {\n      // @ts-ignore\n      if (err.code === 'ENOENT') {\n        const executableDirMessage = executableDir\n          ? `searched for local subcommand relative to directory '${executableDir}'`\n          : 'no directory for search for local subcommand, use .executableDir() to supply a custom directory';\n        const executableMissing = `'${executableFile}' does not exist\n - if '${subcommand._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead\n - if the default executable name is not suitable, use the executableFile option to supply a custom name or path\n - ${executableDirMessage}`;\n        throw new Error(executableMissing);\n      // @ts-ignore\n      } else if (err.code === 'EACCES') {\n        throw new Error(`'${executableFile}' not executable`);\n      }\n      if (!exitCallback) {\n        process.exit(1);\n      } else {\n        const wrappedError = new CommanderError(1, 'commander.executeSubCommandAsync', '(error)');\n        wrappedError.nestedError = err;\n        exitCallback(wrappedError);\n      }\n    });\n\n    // Store the reference to the child process\n    this.runningCommand = proc;\n  }\n\n  /**\n   * @api private\n   */\n\n  _dispatchSubcommand(commandName, operands, unknown) {\n    const subCommand = this._findCommand(commandName);\n    if (!subCommand) this.help({ error: true });\n\n    let promiseChain;\n    promiseChain = this._chainOrCallSubCommandHook(promiseChain, subCommand, 'preSubcommand');\n    promiseChain = this._chainOrCall(promiseChain, () => {\n      if (subCommand._executableHandler) {\n        this._executeSubCommand(subCommand, operands.concat(unknown));\n      } else {\n        return subCommand._parseCommand(operands, unknown);\n      }\n    });\n    return promiseChain;\n  }\n\n  /**\n   * Invoke help directly if possible, or dispatch if necessary.\n   * e.g. help foo\n   *\n   * @api private\n   */\n\n  _dispatchHelpCommand(subcommandName) {\n    if (!subcommandName) {\n      this.help();\n    }\n    const subCommand = this._findCommand(subcommandName);\n    if (subCommand && !subCommand._executableHandler) {\n      subCommand.help();\n    }\n\n    // Fallback to parsing the help flag to invoke the help.\n    return this._dispatchSubcommand(subcommandName, [], [\n      this._helpLongFlag || this._helpShortFlag\n    ]);\n  }\n\n  /**\n   * Check this.args against expected this.registeredArguments.\n   *\n   * @api private\n   */\n\n  _checkNumberOfArguments() {\n    // too few\n    this.registeredArguments.forEach((arg, i) => {\n      if (arg.required && this.args[i] == null) {\n        this.missingArgument(arg.name());\n      }\n    });\n    // too many\n    if (this.registeredArguments.length > 0 && this.registeredArguments[this.registeredArguments.length - 1].variadic) {\n      return;\n    }\n    if (this.args.length > this.registeredArguments.length) {\n      this._excessArguments(this.args);\n    }\n  }\n\n  /**\n   * Process this.args using this.registeredArguments and save as this.processedArgs!\n   *\n   * @api private\n   */\n\n  _processArguments() {\n    const myParseArg = (argument, value, previous) => {\n      // Extra processing for nice error message on parsing failure.\n      let parsedValue = value;\n      if (value !== null && argument.parseArg) {\n        const invalidValueMessage = `error: command-argument value '${value}' is invalid for argument '${argument.name()}'.`;\n        parsedValue = this._callParseArg(argument, value, previous, invalidValueMessage);\n      }\n      return parsedValue;\n    };\n\n    this._checkNumberOfArguments();\n\n    const processedArgs = [];\n    this.registeredArguments.forEach((declaredArg, index) => {\n      let value = declaredArg.defaultValue;\n      if (declaredArg.variadic) {\n        // Collect together remaining arguments for passing together as an array.\n        if (index < this.args.length) {\n          value = this.args.slice(index);\n          if (declaredArg.parseArg) {\n            value = value.reduce((processed, v) => {\n              return myParseArg(declaredArg, v, processed);\n            }, declaredArg.defaultValue);\n          }\n        } else if (value === undefined) {\n          value = [];\n        }\n      } else if (index < this.args.length) {\n        value = this.args[index];\n        if (declaredArg.parseArg) {\n          value = myParseArg(declaredArg, value, declaredArg.defaultValue);\n        }\n      }\n      processedArgs[index] = value;\n    });\n    this.processedArgs = processedArgs;\n  }\n\n  /**\n   * Once we have a promise we chain, but call synchronously until then.\n   *\n   * @param {Promise|undefined} promise\n   * @param {Function} fn\n   * @return {Promise|undefined}\n   * @api private\n   */\n\n  _chainOrCall(promise, fn) {\n    // thenable\n    if (promise && promise.then && typeof promise.then === 'function') {\n      // already have a promise, chain callback\n      return promise.then(() => fn());\n    }\n    // callback might return a promise\n    return fn();\n  }\n\n  /**\n   *\n   * @param {Promise|undefined} promise\n   * @param {string} event\n   * @return {Promise|undefined}\n   * @api private\n   */\n\n  _chainOrCallHooks(promise, event) {\n    let result = promise;\n    const hooks = [];\n    this._getCommandAndAncestors()\n      .reverse()\n      .filter(cmd => cmd._lifeCycleHooks[event] !== undefined)\n      .forEach(hookedCommand => {\n        hookedCommand._lifeCycleHooks[event].forEach((callback) => {\n          hooks.push({ hookedCommand, callback });\n        });\n      });\n    if (event === 'postAction') {\n      hooks.reverse();\n    }\n\n    hooks.forEach((hookDetail) => {\n      result = this._chainOrCall(result, () => {\n        return hookDetail.callback(hookDetail.hookedCommand, this);\n      });\n    });\n    return result;\n  }\n\n  /**\n   *\n   * @param {Promise|undefined} promise\n   * @param {Command} subCommand\n   * @param {string} event\n   * @return {Promise|undefined}\n   * @api private\n   */\n\n  _chainOrCallSubCommandHook(promise, subCommand, event) {\n    let result = promise;\n    if (this._lifeCycleHooks[event] !== undefined) {\n      this._lifeCycleHooks[event].forEach((hook) => {\n        result = this._chainOrCall(result, () => {\n          return hook(this, subCommand);\n        });\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Process arguments in context of this command.\n   * Returns action result, in case it is a promise.\n   *\n   * @api private\n   */\n\n  _parseCommand(operands, unknown) {\n    const parsed = this.parseOptions(unknown);\n    this._parseOptionsEnv(); // after cli, so parseArg not called on both cli and env\n    this._parseOptionsImplied();\n    operands = operands.concat(parsed.operands);\n    unknown = parsed.unknown;\n    this.args = operands.concat(unknown);\n\n    if (operands && this._findCommand(operands[0])) {\n      return this._dispatchSubcommand(operands[0], operands.slice(1), unknown);\n    }\n    if (this._hasImplicitHelpCommand() && operands[0] === this._helpCommandName) {\n      return this._dispatchHelpCommand(operands[1]);\n    }\n    if (this._defaultCommandName) {\n      outputHelpIfRequested(this, unknown); // Run the help for default command from parent rather than passing to default command\n      return this._dispatchSubcommand(this._defaultCommandName, operands, unknown);\n    }\n    if (this.commands.length && this.args.length === 0 && !this._actionHandler && !this._defaultCommandName) {\n      // probably missing subcommand and no handler, user needs help (and exit)\n      this.help({ error: true });\n    }\n\n    outputHelpIfRequested(this, parsed.unknown);\n    this._checkForMissingMandatoryOptions();\n    this._checkForConflictingOptions();\n\n    // We do not always call this check to avoid masking a \"better\" error, like unknown command.\n    const checkForUnknownOptions = () => {\n      if (parsed.unknown.length > 0) {\n        this.unknownOption(parsed.unknown[0]);\n      }\n    };\n\n    const commandEvent = `command:${this.name()}`;\n    if (this._actionHandler) {\n      checkForUnknownOptions();\n      this._processArguments();\n\n      let promiseChain;\n      promiseChain = this._chainOrCallHooks(promiseChain, 'preAction');\n      promiseChain = this._chainOrCall(promiseChain, () => this._actionHandler(this.processedArgs));\n      if (this.parent) {\n        promiseChain = this._chainOrCall(promiseChain, () => {\n          this.parent.emit(commandEvent, operands, unknown); // legacy\n        });\n      }\n      promiseChain = this._chainOrCallHooks(promiseChain, 'postAction');\n      return promiseChain;\n    }\n    if (this.parent && this.parent.listenerCount(commandEvent)) {\n      checkForUnknownOptions();\n      this._processArguments();\n      this.parent.emit(commandEvent, operands, unknown); // legacy\n    } else if (operands.length) {\n      if (this._findCommand('*')) { // legacy default command\n        return this._dispatchSubcommand('*', operands, unknown);\n      }\n      if (this.listenerCount('command:*')) {\n        // skip option check, emit event for possible misspelling suggestion\n        this.emit('command:*', operands, unknown);\n      } else if (this.commands.length) {\n        this.unknownCommand();\n      } else {\n        checkForUnknownOptions();\n        this._processArguments();\n      }\n    } else if (this.commands.length) {\n      checkForUnknownOptions();\n      // This command has subcommands and nothing hooked up at this level, so display help (and exit).\n      this.help({ error: true });\n    } else {\n      checkForUnknownOptions();\n      this._processArguments();\n      // fall through for caller to handle after calling .parse()\n    }\n  }\n\n  /**\n   * Find matching command.\n   *\n   * @api private\n   */\n  _findCommand(name) {\n    if (!name) return undefined;\n    return this.commands.find(cmd => cmd._name === name || cmd._aliases.includes(name));\n  }\n\n  /**\n   * Return an option matching `arg` if any.\n   *\n   * @param {string} arg\n   * @return {Option}\n   * @api private\n   */\n\n  _findOption(arg) {\n    return this.options.find(option => option.is(arg));\n  }\n\n  /**\n   * Display an error message if a mandatory option does not have a value.\n   * Called after checking for help flags in leaf subcommand.\n   *\n   * @api private\n   */\n\n  _checkForMissingMandatoryOptions() {\n    // Walk up hierarchy so can call in subcommand after checking for displaying help.\n    this._getCommandAndAncestors().forEach((cmd) => {\n      cmd.options.forEach((anOption) => {\n        if (anOption.mandatory && (cmd.getOptionValue(anOption.attributeName()) === undefined)) {\n          cmd.missingMandatoryOptionValue(anOption);\n        }\n      });\n    });\n  }\n\n  /**\n   * Display an error message if conflicting options are used together in this.\n   *\n   * @api private\n   */\n  _checkForConflictingLocalOptions() {\n    const definedNonDefaultOptions = this.options.filter(\n      (option) => {\n        const optionKey = option.attributeName();\n        if (this.getOptionValue(optionKey) === undefined) {\n          return false;\n        }\n        return this.getOptionValueSource(optionKey) !== 'default';\n      }\n    );\n\n    const optionsWithConflicting = definedNonDefaultOptions.filter(\n      (option) => option.conflictsWith.length > 0\n    );\n\n    optionsWithConflicting.forEach((option) => {\n      const conflictingAndDefined = definedNonDefaultOptions.find((defined) =>\n        option.conflictsWith.includes(defined.attributeName())\n      );\n      if (conflictingAndDefined) {\n        this._conflictingOption(option, conflictingAndDefined);\n      }\n    });\n  }\n\n  /**\n   * Display an error message if conflicting options are used together.\n   * Called after checking for help flags in leaf subcommand.\n   *\n   * @api private\n   */\n  _checkForConflictingOptions() {\n    // Walk up hierarchy so can call in subcommand after checking for displaying help.\n    this._getCommandAndAncestors().forEach((cmd) => {\n      cmd._checkForConflictingLocalOptions();\n    });\n  }\n\n  /**\n   * Parse options from `argv` removing known options,\n   * and return argv split into operands and unknown arguments.\n   *\n   * Examples:\n   *\n   *     argv => operands, unknown\n   *     --known kkk op => [op], []\n   *     op --known kkk => [op], []\n   *     sub --unknown uuu op => [sub], [--unknown uuu op]\n   *     sub -- --unknown uuu op => [sub --unknown uuu op], []\n   *\n   * @param {String[]} argv\n   * @return {{operands: String[], unknown: String[]}}\n   */\n\n  parseOptions(argv) {\n    const operands = []; // operands, not options or values\n    const unknown = []; // first unknown option and remaining unknown args\n    let dest = operands;\n    const args = argv.slice();\n\n    function maybeOption(arg) {\n      return arg.length > 1 && arg[0] === '-';\n    }\n\n    // parse options\n    let activeVariadicOption = null;\n    while (args.length) {\n      const arg = args.shift();\n\n      // literal\n      if (arg === '--') {\n        if (dest === unknown) dest.push(arg);\n        dest.push(...args);\n        break;\n      }\n\n      if (activeVariadicOption && !maybeOption(arg)) {\n        this.emit(`option:${activeVariadicOption.name()}`, arg);\n        continue;\n      }\n      activeVariadicOption = null;\n\n      if (maybeOption(arg)) {\n        const option = this._findOption(arg);\n        // recognised option, call listener to assign value with possible custom processing\n        if (option) {\n          if (option.required) {\n            const value = args.shift();\n            if (value === undefined) this.optionMissingArgument(option);\n            this.emit(`option:${option.name()}`, value);\n          } else if (option.optional) {\n            let value = null;\n            // historical behaviour is optional value is following arg unless an option\n            if (args.length > 0 && !maybeOption(args[0])) {\n              value = args.shift();\n            }\n            this.emit(`option:${option.name()}`, value);\n          } else { // boolean flag\n            this.emit(`option:${option.name()}`);\n          }\n          activeVariadicOption = option.variadic ? option : null;\n          continue;\n        }\n      }\n\n      // Look for combo options following single dash, eat first one if known.\n      if (arg.length > 2 && arg[0] === '-' && arg[1] !== '-') {\n        const option = this._findOption(`-${arg[1]}`);\n        if (option) {\n          if (option.required || (option.optional && this._combineFlagAndOptionalValue)) {\n            // option with value following in same argument\n            this.emit(`option:${option.name()}`, arg.slice(2));\n          } else {\n            // boolean option, emit and put back remainder of arg for further processing\n            this.emit(`option:${option.name()}`);\n            args.unshift(`-${arg.slice(2)}`);\n          }\n          continue;\n        }\n      }\n\n      // Look for known long flag with value, like --foo=bar\n      if (/^--[^=]+=/.test(arg)) {\n        const index = arg.indexOf('=');\n        const option = this._findOption(arg.slice(0, index));\n        if (option && (option.required || option.optional)) {\n          this.emit(`option:${option.name()}`, arg.slice(index + 1));\n          continue;\n        }\n      }\n\n      // Not a recognised option by this command.\n      // Might be a command-argument, or subcommand option, or unknown option, or help command or option.\n\n      // An unknown option means further arguments also classified as unknown so can be reprocessed by subcommands.\n      if (maybeOption(arg)) {\n        dest = unknown;\n      }\n\n      // If using positionalOptions, stop processing our options at subcommand.\n      if ((this._enablePositionalOptions || this._passThroughOptions) && operands.length === 0 && unknown.length === 0) {\n        if (this._findCommand(arg)) {\n          operands.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        } else if (arg === this._helpCommandName && this._hasImplicitHelpCommand()) {\n          operands.push(arg);\n          if (args.length > 0) operands.push(...args);\n          break;\n        } else if (this._defaultCommandName) {\n          unknown.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        }\n      }\n\n      // If using passThroughOptions, stop processing options at first command-argument.\n      if (this._passThroughOptions) {\n        dest.push(arg);\n        if (args.length > 0) dest.push(...args);\n        break;\n      }\n\n      // add arg\n      dest.push(arg);\n    }\n\n    return { operands, unknown };\n  }\n\n  /**\n   * Return an object containing local option values as key-value pairs.\n   *\n   * @return {Object}\n   */\n  opts() {\n    if (this._storeOptionsAsProperties) {\n      // Preserve original behaviour so backwards compatible when still using properties\n      const result = {};\n      const len = this.options.length;\n\n      for (let i = 0; i < len; i++) {\n        const key = this.options[i].attributeName();\n        result[key] = key === this._versionOptionName ? this._version : this[key];\n      }\n      return result;\n    }\n\n    return this._optionValues;\n  }\n\n  /**\n   * Return an object containing merged local and global option values as key-value pairs.\n   *\n   * @return {Object}\n   */\n  optsWithGlobals() {\n    // globals overwrite locals\n    return this._getCommandAndAncestors().reduce(\n      (combinedOptions, cmd) => Object.assign(combinedOptions, cmd.opts()),\n      {}\n    );\n  }\n\n  /**\n   * Display error message and exit (or call exitOverride).\n   *\n   * @param {string} message\n   * @param {Object} [errorOptions]\n   * @param {string} [errorOptions.code] - an id string representing the error\n   * @param {number} [errorOptions.exitCode] - used with process.exit\n   */\n  error(message, errorOptions) {\n    // output handling\n    this._outputConfiguration.outputError(`${message}\\n`, this._outputConfiguration.writeErr);\n    if (typeof this._showHelpAfterError === 'string') {\n      this._outputConfiguration.writeErr(`${this._showHelpAfterError}\\n`);\n    } else if (this._showHelpAfterError) {\n      this._outputConfiguration.writeErr('\\n');\n      this.outputHelp({ error: true });\n    }\n\n    // exit handling\n    const config = errorOptions || {};\n    const exitCode = config.exitCode || 1;\n    const code = config.code || 'commander.error';\n    this._exit(exitCode, code, message);\n  }\n\n  /**\n   * Apply any option related environment variables, if option does\n   * not have a value from cli or client code.\n   *\n   * @api private\n   */\n  _parseOptionsEnv() {\n    this.options.forEach((option) => {\n      if (option.envVar && option.envVar in process.env) {\n        const optionKey = option.attributeName();\n        // Priority check. Do not overwrite cli or options from unknown source (client-code).\n        if (this.getOptionValue(optionKey) === undefined || ['default', 'config', 'env'].includes(this.getOptionValueSource(optionKey))) {\n          if (option.required || option.optional) { // option can take a value\n            // keep very simple, optional always takes value\n            this.emit(`optionEnv:${option.name()}`, process.env[option.envVar]);\n          } else { // boolean\n            // keep very simple, only care that envVar defined and not the value\n            this.emit(`optionEnv:${option.name()}`);\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Apply any implied option values, if option is undefined or default value.\n   *\n   * @api private\n   */\n  _parseOptionsImplied() {\n    const dualHelper = new DualOptions(this.options);\n    const hasCustomOptionValue = (optionKey) => {\n      return this.getOptionValue(optionKey) !== undefined && !['default', 'implied'].includes(this.getOptionValueSource(optionKey));\n    };\n    this.options\n      .filter(option => (option.implied !== undefined) &&\n        hasCustomOptionValue(option.attributeName()) &&\n        dualHelper.valueFromOption(this.getOptionValue(option.attributeName()), option))\n      .forEach((option) => {\n        Object.keys(option.implied)\n          .filter(impliedKey => !hasCustomOptionValue(impliedKey))\n          .forEach(impliedKey => {\n            this.setOptionValueWithSource(impliedKey, option.implied[impliedKey], 'implied');\n          });\n      });\n  }\n\n  /**\n   * Argument `name` is missing.\n   *\n   * @param {string} name\n   * @api private\n   */\n\n  missingArgument(name) {\n    const message = `error: missing required argument '${name}'`;\n    this.error(message, { code: 'commander.missingArgument' });\n  }\n\n  /**\n   * `Option` is missing an argument.\n   *\n   * @param {Option} option\n   * @api private\n   */\n\n  optionMissingArgument(option) {\n    const message = `error: option '${option.flags}' argument missing`;\n    this.error(message, { code: 'commander.optionMissingArgument' });\n  }\n\n  /**\n   * `Option` does not have a value, and is a mandatory option.\n   *\n   * @param {Option} option\n   * @api private\n   */\n\n  missingMandatoryOptionValue(option) {\n    const message = `error: required option '${option.flags}' not specified`;\n    this.error(message, { code: 'commander.missingMandatoryOptionValue' });\n  }\n\n  /**\n   * `Option` conflicts with another option.\n   *\n   * @param {Option} option\n   * @param {Option} conflictingOption\n   * @api private\n   */\n  _conflictingOption(option, conflictingOption) {\n    // The calling code does not know whether a negated option is the source of the\n    // value, so do some work to take an educated guess.\n    const findBestOptionFromValue = (option) => {\n      const optionKey = option.attributeName();\n      const optionValue = this.getOptionValue(optionKey);\n      const negativeOption = this.options.find(target => target.negate && optionKey === target.attributeName());\n      const positiveOption = this.options.find(target => !target.negate && optionKey === target.attributeName());\n      if (negativeOption && (\n        (negativeOption.presetArg === undefined && optionValue === false) ||\n        (negativeOption.presetArg !== undefined && optionValue === negativeOption.presetArg)\n      )) {\n        return negativeOption;\n      }\n      return positiveOption || option;\n    };\n\n    const getErrorMessage = (option) => {\n      const bestOption = findBestOptionFromValue(option);\n      const optionKey = bestOption.attributeName();\n      const source = this.getOptionValueSource(optionKey);\n      if (source === 'env') {\n        return `environment variable '${bestOption.envVar}'`;\n      }\n      return `option '${bestOption.flags}'`;\n    };\n\n    const message = `error: ${getErrorMessage(option)} cannot be used with ${getErrorMessage(conflictingOption)}`;\n    this.error(message, { code: 'commander.conflictingOption' });\n  }\n\n  /**\n   * Unknown option `flag`.\n   *\n   * @param {string} flag\n   * @api private\n   */\n\n  unknownOption(flag) {\n    if (this._allowUnknownOption) return;\n    let suggestion = '';\n\n    if (flag.startsWith('--') && this._showSuggestionAfterError) {\n      // Looping to pick up the global options too\n      let candidateFlags = [];\n      let command = this;\n      do {\n        const moreFlags = command.createHelp().visibleOptions(command)\n          .filter(option => option.long)\n          .map(option => option.long);\n        candidateFlags = candidateFlags.concat(moreFlags);\n        command = command.parent;\n      } while (command && !command._enablePositionalOptions);\n      suggestion = suggestSimilar(flag, candidateFlags);\n    }\n\n    const message = `error: unknown option '${flag}'${suggestion}`;\n    this.error(message, { code: 'commander.unknownOption' });\n  }\n\n  /**\n   * Excess arguments, more than expected.\n   *\n   * @param {string[]} receivedArgs\n   * @api private\n   */\n\n  _excessArguments(receivedArgs) {\n    if (this._allowExcessArguments) return;\n\n    const expected = this.registeredArguments.length;\n    const s = (expected === 1) ? '' : 's';\n    const forSubcommand = this.parent ? ` for '${this.name()}'` : '';\n    const message = `error: too many arguments${forSubcommand}. Expected ${expected} argument${s} but got ${receivedArgs.length}.`;\n    this.error(message, { code: 'commander.excessArguments' });\n  }\n\n  /**\n   * Unknown command.\n   *\n   * @api private\n   */\n\n  unknownCommand() {\n    const unknownName = this.args[0];\n    let suggestion = '';\n\n    if (this._showSuggestionAfterError) {\n      const candidateNames = [];\n      this.createHelp().visibleCommands(this).forEach((command) => {\n        candidateNames.push(command.name());\n        // just visible alias\n        if (command.alias()) candidateNames.push(command.alias());\n      });\n      suggestion = suggestSimilar(unknownName, candidateNames);\n    }\n\n    const message = `error: unknown command '${unknownName}'${suggestion}`;\n    this.error(message, { code: 'commander.unknownCommand' });\n  }\n\n  /**\n   * Get or set the program version.\n   *\n   * This method auto-registers the \"-V, --version\" option which will print the version number.\n   *\n   * You can optionally supply the flags and description to override the defaults.\n   *\n   * @param {string} [str]\n   * @param {string} [flags]\n   * @param {string} [description]\n   * @return {this | string | undefined} `this` command for chaining, or version string if no arguments\n   */\n\n  version(str, flags, description) {\n    if (str === undefined) return this._version;\n    this._version = str;\n    flags = flags || '-V, --version';\n    description = description || 'output the version number';\n    const versionOption = this.createOption(flags, description);\n    this._versionOptionName = versionOption.attributeName(); // [sic] not defined in constructor, partly legacy, partly only needed at root\n    this.options.push(versionOption);\n    this.on('option:' + versionOption.name(), () => {\n      this._outputConfiguration.writeOut(`${str}\\n`);\n      this._exit(0, 'commander.version', str);\n    });\n    return this;\n  }\n\n  /**\n   * Set the description.\n   *\n   * @param {string} [str]\n   * @param {Object} [argsDescription]\n   * @return {string|Command}\n   */\n  description(str, argsDescription) {\n    if (str === undefined && argsDescription === undefined) return this._description;\n    this._description = str;\n    if (argsDescription) {\n      this._argsDescription = argsDescription;\n    }\n    return this;\n  }\n\n  /**\n   * Set the summary. Used when listed as subcommand of parent.\n   *\n   * @param {string} [str]\n   * @return {string|Command}\n   */\n  summary(str) {\n    if (str === undefined) return this._summary;\n    this._summary = str;\n    return this;\n  }\n\n  /**\n   * Set an alias for the command.\n   *\n   * You may call more than once to add multiple aliases. Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string} [alias]\n   * @return {string|Command}\n   */\n\n  alias(alias) {\n    if (alias === undefined) return this._aliases[0]; // just return first, for backwards compatibility\n\n    /** @type {Command} */\n    let command = this;\n    if (this.commands.length !== 0 && this.commands[this.commands.length - 1]._executableHandler) {\n      // assume adding alias for last added executable subcommand, rather than this\n      command = this.commands[this.commands.length - 1];\n    }\n\n    if (alias === command._name) throw new Error('Command alias can\\'t be the same as its name');\n\n    command._aliases.push(alias);\n    return this;\n  }\n\n  /**\n   * Set aliases for the command.\n   *\n   * Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string[]} [aliases]\n   * @return {string[]|Command}\n   */\n\n  aliases(aliases) {\n    // Getter for the array of aliases is the main reason for having aliases() in addition to alias().\n    if (aliases === undefined) return this._aliases;\n\n    aliases.forEach((alias) => this.alias(alias));\n    return this;\n  }\n\n  /**\n   * Set / get the command usage `str`.\n   *\n   * @param {string} [str]\n   * @return {String|Command}\n   */\n\n  usage(str) {\n    if (str === undefined) {\n      if (this._usage) return this._usage;\n\n      const args = this.registeredArguments.map((arg) => {\n        return humanReadableArgName(arg);\n      });\n      return [].concat(\n        (this.options.length || this._hasHelpOption ? '[options]' : []),\n        (this.commands.length ? '[command]' : []),\n        (this.registeredArguments.length ? args : [])\n      ).join(' ');\n    }\n\n    this._usage = str;\n    return this;\n  }\n\n  /**\n   * Get or set the name of the command.\n   *\n   * @param {string} [str]\n   * @return {string|Command}\n   */\n\n  name(str) {\n    if (str === undefined) return this._name;\n    this._name = str;\n    return this;\n  }\n\n  /**\n   * Set the name of the command from script filename, such as process.argv[1],\n   * or require.main.filename, or __filename.\n   *\n   * (Used internally and public although not documented in README.)\n   *\n   * @example\n   * program.nameFromFilename(require.main.filename);\n   *\n   * @param {string} filename\n   * @return {Command}\n   */\n\n  nameFromFilename(filename) {\n    this._name = path.basename(filename, path.extname(filename));\n\n    return this;\n  }\n\n  /**\n   * Get or set the directory for searching for executable subcommands of this command.\n   *\n   * @example\n   * program.executableDir(__dirname);\n   * // or\n   * program.executableDir('subcommands');\n   *\n   * @param {string} [path]\n   * @return {string|null|Command}\n   */\n\n  executableDir(path) {\n    if (path === undefined) return this._executableDir;\n    this._executableDir = path;\n    return this;\n  }\n\n  /**\n   * Return program help documentation.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to wrap for stderr instead of stdout\n   * @return {string}\n   */\n\n  helpInformation(contextOptions) {\n    const helper = this.createHelp();\n    if (helper.helpWidth === undefined) {\n      helper.helpWidth = (contextOptions && contextOptions.error) ? this._outputConfiguration.getErrHelpWidth() : this._outputConfiguration.getOutHelpWidth();\n    }\n    return helper.formatHelp(this, helper);\n  }\n\n  /**\n   * @api private\n   */\n\n  _getHelpContext(contextOptions) {\n    contextOptions = contextOptions || {};\n    const context = { error: !!contextOptions.error };\n    let write;\n    if (context.error) {\n      write = (arg) => this._outputConfiguration.writeErr(arg);\n    } else {\n      write = (arg) => this._outputConfiguration.writeOut(arg);\n    }\n    context.write = contextOptions.write || write;\n    context.command = this;\n    return context;\n  }\n\n  /**\n   * Output help information for this command.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean } | Function} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  outputHelp(contextOptions) {\n    let deprecatedCallback;\n    if (typeof contextOptions === 'function') {\n      deprecatedCallback = contextOptions;\n      contextOptions = undefined;\n    }\n    const context = this._getHelpContext(contextOptions);\n\n    this._getCommandAndAncestors().reverse().forEach(command => command.emit('beforeAllHelp', context));\n    this.emit('beforeHelp', context);\n\n    let helpInformation = this.helpInformation(context);\n    if (deprecatedCallback) {\n      helpInformation = deprecatedCallback(helpInformation);\n      if (typeof helpInformation !== 'string' && !Buffer.isBuffer(helpInformation)) {\n        throw new Error('outputHelp callback must return a string or a Buffer');\n      }\n    }\n    context.write(helpInformation);\n\n    if (this._helpLongFlag) {\n      this.emit(this._helpLongFlag); // deprecated\n    }\n    this.emit('afterHelp', context);\n    this._getCommandAndAncestors().forEach(command => command.emit('afterAllHelp', context));\n  }\n\n  /**\n   * You can pass in flags and a description to override the help\n   * flags and help description for your command. Pass in false to\n   * disable the built-in help option.\n   *\n   * @param {string | boolean} [flags]\n   * @param {string} [description]\n   * @return {Command} `this` command for chaining\n   */\n\n  helpOption(flags, description) {\n    if (typeof flags === 'boolean') {\n      this._hasHelpOption = flags;\n      return this;\n    }\n    this._helpFlags = flags || this._helpFlags;\n    this._helpDescription = description || this._helpDescription;\n\n    const helpFlags = splitOptionFlags(this._helpFlags);\n    this._helpShortFlag = helpFlags.shortFlag;\n    this._helpLongFlag = helpFlags.longFlag;\n\n    return this;\n  }\n\n  /**\n   * Output help information and exit.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  help(contextOptions) {\n    this.outputHelp(contextOptions);\n    let exitCode = process.exitCode || 0;\n    if (exitCode === 0 && contextOptions && typeof contextOptions !== 'function' && contextOptions.error) {\n      exitCode = 1;\n    }\n    // message: do not have all displayed text available so only passing placeholder.\n    this._exit(exitCode, 'commander.help', '(outputHelp)');\n  }\n\n  /**\n   * Add additional text to be displayed with the built-in help.\n   *\n   * Position is 'before' or 'after' to affect just this command,\n   * and 'beforeAll' or 'afterAll' to affect this command and all its subcommands.\n   *\n   * @param {string} position - before or after built-in help\n   * @param {string | Function} text - string to add, or a function returning a string\n   * @return {Command} `this` command for chaining\n   */\n  addHelpText(position, text) {\n    const allowedValues = ['beforeAll', 'before', 'after', 'afterAll'];\n    if (!allowedValues.includes(position)) {\n      throw new Error(`Unexpected value for position to addHelpText.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    const helpEvent = `${position}Help`;\n    this.on(helpEvent, (context) => {\n      let helpStr;\n      if (typeof text === 'function') {\n        helpStr = text({ error: context.error, command: context.command });\n      } else {\n        helpStr = text;\n      }\n      // Ignore falsy value when nothing to output.\n      if (helpStr) {\n        context.write(`${helpStr}\\n`);\n      }\n    });\n    return this;\n  }\n}\n\n/**\n * Output help information if help flags specified\n *\n * @param {Command} cmd - command to output help for\n * @param {Array} args - array of options to search for help flags\n * @api private\n */\n\nfunction outputHelpIfRequested(cmd, args) {\n  const helpOption = cmd._hasHelpOption && args.find(arg => arg === cmd._helpLongFlag || arg === cmd._helpShortFlag);\n  if (helpOption) {\n    cmd.outputHelp();\n    // (Do not have all displayed text available so only passing placeholder.)\n    cmd._exit(0, 'commander.helpDisplayed', '(outputHelp)');\n  }\n}\n\n/**\n * Scan arguments and increment port number for inspect calls (to avoid conflicts when spawning new command).\n *\n * @param {string[]} args - array of arguments from node.execArgv\n * @returns {string[]}\n * @api private\n */\n\nfunction incrementNodeInspectorPort(args) {\n  // Testing for these options:\n  //  --inspect[=[host:]port]\n  //  --inspect-brk[=[host:]port]\n  //  --inspect-port=[host:]port\n  return args.map((arg) => {\n    if (!arg.startsWith('--inspect')) {\n      return arg;\n    }\n    let debugOption;\n    let debugHost = '127.0.0.1';\n    let debugPort = '9229';\n    let match;\n    if ((match = arg.match(/^(--inspect(-brk)?)$/)) !== null) {\n      // e.g. --inspect\n      debugOption = match[1];\n    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null) {\n      debugOption = match[1];\n      if (/^\\d+$/.test(match[3])) {\n        // e.g. --inspect=1234\n        debugPort = match[3];\n      } else {\n        // e.g. --inspect=localhost\n        debugHost = match[3];\n      }\n    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+):(\\d+)$/)) !== null) {\n      // e.g. --inspect=localhost:1234\n      debugOption = match[1];\n      debugHost = match[3];\n      debugPort = match[4];\n    }\n\n    if (debugOption && debugPort !== '0') {\n      return `${debugOption}=${debugHost}:${parseInt(debugPort) + 1}`;\n    }\n    return arg;\n  });\n}\n\nexports.Command = Command;\n",
    "const { Argument } = require('./lib/argument.js');\nconst { Command } = require('./lib/command.js');\nconst { CommanderError, InvalidArgumentError } = require('./lib/error.js');\nconst { Help } = require('./lib/help.js');\nconst { Option } = require('./lib/option.js');\n\n/**\n * Expose the root command.\n */\n\nexports = module.exports = new Command();\nexports.program = exports; // More explicit access to global command.\n// createArgument, createCommand, and createOption are implicitly available as they are methods on program.\n\n/**\n * Expose classes\n */\n\nexports.Command = Command;\nexports.Option = Option;\nexports.Argument = Argument;\nexports.Help = Help;\n\nexports.CommanderError = CommanderError;\nexports.InvalidArgumentError = InvalidArgumentError;\nexports.InvalidOptionArgumentError = InvalidArgumentError; // Deprecated\n",
    "var Module=typeof self!==\"undefined\"&&typeof self.Module!==\"undefined\"?self.Module:{};var jsModule=Module;var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram=\"./this.program\";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window===\"object\";ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";ENVIRONMENT_IS_NODE=typeof process===\"object\"&&typeof process.versions===\"object\"&&typeof process.versions.node===\"string\";ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;var nodeFS;var nodePath;if(ENVIRONMENT_IS_NODE){if(ENVIRONMENT_IS_WORKER){scriptDirectory=require(\"path\").dirname(scriptDirectory)+\"/\"}else{scriptDirectory=__dirname+\"/\"}read_=function shell_read(filename,binary){if(!nodeFS)nodeFS=require(\"fs\");if(!nodePath)nodePath=require(\"path\");filename=nodePath[\"normalize\"](filename);return nodeFS[\"readFileSync\"](filename,binary?null:\"utf8\")};readBinary=function readBinary(filename){var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};if(process[\"argv\"].length>1){thisProgram=process[\"argv\"][1].replace(/\\\\/g,\"/\")}arguments_=process[\"argv\"].slice(2);if(typeof module!==\"undefined\"){module[\"exports\"]=Module}process[\"on\"](\"uncaughtException\",function(ex){if(!(ex instanceof ExitStatus)){throw ex}});process[\"on\"](\"unhandledRejection\",abort);quit_=function(status){process[\"exit\"](status)};Module[\"inspect\"]=function(){return\"[Emscripten Module object]\"}}else if(ENVIRONMENT_IS_SHELL){if(typeof read!=\"undefined\"){read_=function shell_read(f){return read(f)}}readBinary=function readBinary(f){var data;if(typeof readbuffer===\"function\"){return new Uint8Array(readbuffer(f))}data=read(f,\"binary\");assert(typeof data===\"object\");return data};if(typeof scriptArgs!=\"undefined\"){arguments_=scriptArgs}else if(typeof arguments!=\"undefined\"){arguments_=arguments}if(typeof quit===\"function\"){quit_=function(status){quit(status)}}if(typeof print!==\"undefined\"){if(typeof console===\"undefined\")console={};console.log=print;console.warn=console.error=typeof printErr!==\"undefined\"?printErr:print}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(typeof document!==\"undefined\"&&document.currentScript){scriptDirectory=document.currentScript.src}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}{read_=function(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=function(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=function(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=function(title){document.title=title}}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];var noExitRuntime=Module[\"noExitRuntime\"]||true;if(typeof WebAssembly!==\"object\"){abort(\"no native wasm support detected\")}var wasmMemory;var ABORT=false;var EXITSTATUS;function assert(condition,text){if(!condition){abort(\"Assertion failed: \"+text)}}var ALLOC_NORMAL=0;var ALLOC_STACK=1;function allocate(slab,allocator){var ret;if(allocator==ALLOC_STACK){ret=stackAlloc(slab.length)}else{ret=_malloc(slab.length)}if(slab.subarray||slab.slice){HEAPU8.set(slab,ret)}else{HEAPU8.set(new Uint8Array(slab),ret)}return ret}var UTF8Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf8\"):undefined;function UTF8ArrayToString(heap,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heap[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heap.subarray&&UTF8Decoder){return UTF8Decoder.decode(heap.subarray(idx,endPtr))}else{var str=\"\";while(idx<endPtr){var u0=heap[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heap[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heap[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|heap[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):\"\"}function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module[\"HEAP8\"]=HEAP8=new Int8Array(buf);Module[\"HEAP16\"]=HEAP16=new Int16Array(buf);Module[\"HEAP32\"]=HEAP32=new Int32Array(buf);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buf);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buf);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buf);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buf);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buf)}var INITIAL_MEMORY=Module[\"INITIAL_MEMORY\"]||16777216;var wasmTable;var __ATPRERUN__=[];var __ATINIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnInit(cb){__ATINIT__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}what+=\"\";err(what);ABORT=true;EXITSTATUS=1;what=\"abort(\"+what+\"). Build with -s ASSERTIONS=1 for more info.\";var e=new WebAssembly.RuntimeError(what);throw e}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return filename.startsWith(dataURIPrefix)}function isFileURI(filename){return filename.startsWith(\"file://\")}var wasmBinaryFile=\"argon2.wasm\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(file){try{if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(file)}else{throw\"both async and sync fetching of the wasm failed\"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)){if(typeof fetch===\"function\"&&!isFileURI(wasmBinaryFile)){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary(wasmBinaryFile)})}else{if(readAsync){return new Promise(function(resolve,reject){readAsync(wasmBinaryFile,function(response){resolve(new Uint8Array(response))},reject)})}}}return Promise.resolve().then(function(){return getBinary(wasmBinaryFile)})}function createWasm(){var info={\"a\":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;wasmMemory=Module[\"asm\"][\"c\"];updateGlobalBufferAndViews(wasmMemory.buffer);wasmTable=Module[\"asm\"][\"k\"];addOnInit(Module[\"asm\"][\"d\"]);removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");function receiveInstantiationResult(result){receiveInstance(result[\"instance\"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){var result=WebAssembly.instantiate(binary,info);return result}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&!isFileURI(wasmBinaryFile)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiationResult,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");return instantiateArrayBuffer(receiveInstantiationResult)})})}else{return instantiateArrayBuffer(receiveInstantiationResult)}}if(Module[\"instantiateWasm\"]){try{var exports=Module[\"instantiateWasm\"](info,receiveInstance);return exports}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}instantiateAsync();return{}}function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback(Module);continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){wasmTable.get(func)()}else{wasmTable.get(func)(callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){var oldSize=HEAPU8.length;requestedSize=requestedSize>>>0;var maxHeapSize=2147418112;if(requestedSize>maxHeapSize){return false}for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(requestedSize,overGrownHeapSize),65536));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}var asmLibraryArg={\"a\":_emscripten_memcpy_big,\"b\":_emscripten_resize_heap};var asm=createWasm();var ___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=function(){return(___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=Module[\"asm\"][\"d\"]).apply(null,arguments)};var _argon2_hash=Module[\"_argon2_hash\"]=function(){return(_argon2_hash=Module[\"_argon2_hash\"]=Module[\"asm\"][\"e\"]).apply(null,arguments)};var _malloc=Module[\"_malloc\"]=function(){return(_malloc=Module[\"_malloc\"]=Module[\"asm\"][\"f\"]).apply(null,arguments)};var _free=Module[\"_free\"]=function(){return(_free=Module[\"_free\"]=Module[\"asm\"][\"g\"]).apply(null,arguments)};var _argon2_verify=Module[\"_argon2_verify\"]=function(){return(_argon2_verify=Module[\"_argon2_verify\"]=Module[\"asm\"][\"h\"]).apply(null,arguments)};var _argon2_error_message=Module[\"_argon2_error_message\"]=function(){return(_argon2_error_message=Module[\"_argon2_error_message\"]=Module[\"asm\"][\"i\"]).apply(null,arguments)};var _argon2_encodedlen=Module[\"_argon2_encodedlen\"]=function(){return(_argon2_encodedlen=Module[\"_argon2_encodedlen\"]=Module[\"asm\"][\"j\"]).apply(null,arguments)};var _argon2_hash_ext=Module[\"_argon2_hash_ext\"]=function(){return(_argon2_hash_ext=Module[\"_argon2_hash_ext\"]=Module[\"asm\"][\"l\"]).apply(null,arguments)};var _argon2_verify_ext=Module[\"_argon2_verify_ext\"]=function(){return(_argon2_verify_ext=Module[\"_argon2_verify_ext\"]=Module[\"asm\"][\"m\"]).apply(null,arguments)};var stackAlloc=Module[\"stackAlloc\"]=function(){return(stackAlloc=Module[\"stackAlloc\"]=Module[\"asm\"][\"n\"]).apply(null,arguments)};Module[\"allocate\"]=allocate;Module[\"UTF8ToString\"]=UTF8ToString;Module[\"ALLOC_NORMAL\"]=ALLOC_NORMAL;var calledRun;function ExitStatus(status){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+status+\")\";this.status=status}dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0){return}function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}Module[\"run\"]=run;if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}run();if(typeof module!==\"undefined\")module.exports=Module;Module.unloadRuntime=function(){if(typeof self!==\"undefined\"){delete self.Module}Module=jsModule=wasmMemory=wasmTable=asm=buffer=HEAP8=HEAPU8=HEAP16=HEAPU16=HEAP32=HEAPU32=HEAPF32=HEAPF64=undefined;if(typeof module!==\"undefined\"){delete module.exports}};\n",
    "(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        root.argon2 = factory();\n    }\n})(typeof self !== 'undefined' ? self : this, function () {\n    const global = typeof self !== 'undefined' ? self : this;\n\n    /**\n     * @enum\n     */\n    const ArgonType = {\n        Argon2d: 0,\n        Argon2i: 1,\n        Argon2id: 2,\n    };\n\n    function loadModule(mem) {\n        if (loadModule._promise) {\n            return loadModule._promise;\n        }\n        if (loadModule._module) {\n            return Promise.resolve(loadModule._module);\n        }\n        let promise;\n        if (\n            global.process &&\n            global.process.versions &&\n            global.process.versions.node\n        ) {\n            promise = loadWasmModule().then(\n                (Module) =>\n                    new Promise((resolve) => {\n                        Module.postRun = () => resolve(Module);\n                    })\n            );\n        } else {\n            promise = loadWasmBinary().then((wasmBinary) => {\n                const wasmMemory = mem ? createWasmMemory(mem) : undefined;\n                return initWasm(wasmBinary, wasmMemory);\n            });\n        }\n        loadModule._promise = promise;\n        return promise.then((Module) => {\n            loadModule._module = Module;\n            delete loadModule._promise;\n            return Module;\n        });\n    }\n\n    function initWasm(wasmBinary, wasmMemory) {\n        return new Promise((resolve) => {\n            global.Module = {\n                wasmBinary,\n                wasmMemory,\n                postRun() {\n                    resolve(Module);\n                },\n            };\n            return loadWasmModule();\n        });\n    }\n\n    function loadWasmModule() {\n        if (global.loadArgon2WasmModule) {\n            return global.loadArgon2WasmModule();\n        }\n        if (typeof require === 'function') {\n            return Promise.resolve(require('../dist/argon2.js'));\n        }\n        return import('../dist/argon2.js');\n    }\n\n    function loadWasmBinary() {\n        if (global.loadArgon2WasmBinary) {\n            return global.loadArgon2WasmBinary();\n        }\n        if (typeof require === 'function') {\n            return Promise.resolve(require('../dist/argon2.wasm')).then(\n                (wasmModule) => {\n                    return decodeWasmBinary(wasmModule);\n                }\n            );\n        }\n        const wasmPath =\n            global.argon2WasmPath ||\n            'node_modules/argon2-browser/dist/argon2.wasm';\n        return fetch(wasmPath)\n            .then((response) => response.arrayBuffer())\n            .then((ab) => new Uint8Array(ab));\n    }\n\n    function decodeWasmBinary(base64) {\n        const text = atob(base64);\n        const binary = new Uint8Array(new ArrayBuffer(text.length));\n        for (let i = 0; i < text.length; i++) {\n            binary[i] = text.charCodeAt(i);\n        }\n        return binary;\n    }\n\n    function createWasmMemory(mem) {\n        const KB = 1024;\n        const MB = 1024 * KB;\n        const GB = 1024 * MB;\n        const WASM_PAGE_SIZE = 64 * KB;\n\n        const totalMemory = (2 * GB - 64 * KB) / WASM_PAGE_SIZE;\n        const initialMemory = Math.min(\n            Math.max(Math.ceil((mem * KB) / WASM_PAGE_SIZE), 256) + 256,\n            totalMemory\n        );\n\n        return new WebAssembly.Memory({\n            initial: initialMemory,\n            maximum: totalMemory,\n        });\n    }\n\n    function allocateArray(Module, arr) {\n        return Module.allocate(arr, 'i8', Module.ALLOC_NORMAL);\n    }\n\n    function allocateArrayStr(Module, arr) {\n        const nullTerminatedArray = new Uint8Array([...arr, 0]);\n        return allocateArray(Module, nullTerminatedArray);\n    }\n\n    function encodeUtf8(str) {\n        if (typeof str !== 'string') {\n            return str;\n        }\n        if (typeof TextEncoder === 'function') {\n            return new TextEncoder().encode(str);\n        } else if (typeof Buffer === 'function') {\n            return Buffer.from(str);\n        } else {\n            throw new Error(\"Don't know how to encode UTF8\");\n        }\n    }\n\n    /**\n     * Argon2 hash\n     * @param {string|Uint8Array} params.pass - password string\n     * @param {string|Uint8Array} params.salt - salt string\n     * @param {number} [params.time=1] - the number of iterations\n     * @param {number} [params.mem=1024] - used memory, in KiB\n     * @param {number} [params.hashLen=24] - desired hash length\n     * @param {number} [params.parallelism=1] - desired parallelism\n     * @param {number} [params.type=argon2.ArgonType.Argon2d] - hash type:\n     *      argon2.ArgonType.Argon2d\n     *      argon2.ArgonType.Argon2i\n     *      argon2.ArgonType.Argon2id\n     *\n     * @return Promise\n     *\n     * @example\n     *  argon2.hash({ pass: 'password', salt: 'somesalt' })\n     *      .then(h => console.log(h.hash, h.hashHex, h.encoded))\n     *      .catch(e => console.error(e.message, e.code))\n     */\n    function argon2Hash(params) {\n        const mCost = params.mem || 1024;\n        return loadModule(mCost).then((Module) => {\n            const tCost = params.time || 1;\n            const parallelism = params.parallelism || 1;\n            const pwdEncoded = encodeUtf8(params.pass);\n            const pwd = allocateArrayStr(Module, pwdEncoded);\n            const pwdlen = pwdEncoded.length;\n            const saltEncoded = encodeUtf8(params.salt);\n            const salt = allocateArrayStr(Module, saltEncoded);\n            const saltlen = saltEncoded.length;\n            const argon2Type = params.type || ArgonType.Argon2d;\n            const hash = Module.allocate(\n                new Array(params.hashLen || 24),\n                'i8',\n                Module.ALLOC_NORMAL\n            );\n            const secret = params.secret\n                ? allocateArray(Module, params.secret)\n                : 0;\n            const secretlen = params.secret ? params.secret.byteLength : 0;\n            const ad = params.ad ? allocateArray(Module, params.ad) : 0;\n            const adlen = params.ad ? params.ad.byteLength : 0;\n            const hashlen = params.hashLen || 24;\n            const encodedlen = Module._argon2_encodedlen(\n                tCost,\n                mCost,\n                parallelism,\n                saltlen,\n                hashlen,\n                argon2Type\n            );\n            const encoded = Module.allocate(\n                new Array(encodedlen + 1),\n                'i8',\n                Module.ALLOC_NORMAL\n            );\n            const version = 0x13;\n            let err;\n            let res;\n            try {\n                res = Module._argon2_hash_ext(\n                    tCost,\n                    mCost,\n                    parallelism,\n                    pwd,\n                    pwdlen,\n                    salt,\n                    saltlen,\n                    hash,\n                    hashlen,\n                    encoded,\n                    encodedlen,\n                    argon2Type,\n                    secret,\n                    secretlen,\n                    ad,\n                    adlen,\n                    version\n                );\n            } catch (e) {\n                err = e;\n            }\n            let result;\n            if (res === 0 && !err) {\n                let hashStr = '';\n                const hashArr = new Uint8Array(hashlen);\n                for (let i = 0; i < hashlen; i++) {\n                    const byte = Module.HEAP8[hash + i];\n                    hashArr[i] = byte;\n                    hashStr += ('0' + (0xff & byte).toString(16)).slice(-2);\n                }\n                const encodedStr = Module.UTF8ToString(encoded);\n                result = {\n                    hash: hashArr,\n                    hashHex: hashStr,\n                    encoded: encodedStr,\n                };\n            } else {\n                try {\n                    if (!err) {\n                        err = Module.UTF8ToString(\n                            Module._argon2_error_message(res)\n                        );\n                    }\n                } catch (e) {}\n                result = { message: err, code: res };\n            }\n            try {\n                Module._free(pwd);\n                Module._free(salt);\n                Module._free(hash);\n                Module._free(encoded);\n                if (ad) {\n                    Module._free(ad);\n                }\n                if (secret) {\n                    Module._free(secret);\n                }\n            } catch (e) {}\n            if (err) {\n                throw result;\n            } else {\n                return result;\n            }\n        });\n    }\n\n    /**\n     * Argon2 verify function\n     * @param {string} params.pass - password string\n     * @param {string|Uint8Array} params.encoded - encoded hash\n     * @param {number} [params.type=argon2.ArgonType.Argon2d] - hash type:\n     *      argon2.ArgonType.Argon2d\n     *      argon2.ArgonType.Argon2i\n     *      argon2.ArgonType.Argon2id\n     *\n     * @returns Promise\n     *\n     * @example\n     *  argon2.verify({ pass: 'password', encoded: 'encoded-hash' })\n     *      .then(() => console.log('OK'))\n     *      .catch(e => console.error(e.message, e.code))\n     */\n    function argon2Verify(params) {\n        return loadModule().then((Module) => {\n            const pwdEncoded = encodeUtf8(params.pass);\n            const pwd = allocateArrayStr(Module, pwdEncoded);\n            const pwdlen = pwdEncoded.length;\n            const secret = params.secret\n                ? allocateArray(Module, params.secret)\n                : 0;\n            const secretlen = params.secret ? params.secret.byteLength : 0;\n            const ad = params.ad ? allocateArray(Module, params.ad) : 0;\n            const adlen = params.ad ? params.ad.byteLength : 0;\n            const encEncoded = encodeUtf8(params.encoded);\n            const enc = allocateArrayStr(Module, encEncoded);\n            let argon2Type = params.type;\n            if (argon2Type === undefined) {\n                let typeStr = params.encoded.split('$')[1];\n                if (typeStr) {\n                    typeStr = typeStr.replace('a', 'A');\n                    argon2Type = ArgonType[typeStr] || ArgonType.Argon2d;\n                }\n            }\n            let err;\n            let res;\n            try {\n                res = Module._argon2_verify_ext(\n                    enc,\n                    pwd,\n                    pwdlen,\n                    secret,\n                    secretlen,\n                    ad,\n                    adlen,\n                    argon2Type\n                );\n            } catch (e) {\n                err = e;\n            }\n            let result;\n            if (res || err) {\n                try {\n                    if (!err) {\n                        err = Module.UTF8ToString(\n                            Module._argon2_error_message(res)\n                        );\n                    }\n                } catch (e) {}\n                result = { message: err, code: res };\n            }\n            try {\n                Module._free(pwd);\n                Module._free(enc);\n            } catch (e) {}\n            if (err) {\n                throw result;\n            } else {\n                return result;\n            }\n        });\n    }\n\n    function unloadRuntime() {\n        if (loadModule._module) {\n            loadModule._module.unloadRuntime();\n            delete loadModule._promise;\n            delete loadModule._module;\n        }\n    }\n\n    return {\n        ArgonType,\n        hash: argon2Hash,\n        verify: argon2Verify,\n        unloadRuntime,\n    };\n});\n",
    "const idRegex = /^[a-z0-9-]{1,32}$/;\nconst nameRegex = /^[a-z0-9-]{1,32}$/;\nconst valueRegex = /^[a-zA-Z0-9/+.-]+$/;\nconst b64Regex = /^([a-zA-Z0-9/+.-]+|)$/;\nconst decimalRegex = /^((-)?[1-9]\\d*|0)$/;\nconst versionRegex = /^v=(\\d+)$/;\n\nfunction objToKeyVal(obj) {\n  return objectKeys(obj)\n    .map(k => [k, obj[k]].join('='))\n    .join(',');\n}\n\nfunction keyValtoObj(str) {\n  const obj = {};\n  str.split(',').forEach(ps => {\n    const pss = ps.split('=');\n    if (pss.length < 2) {\n      throw new TypeError(`params must be in the format name=value`);\n    }\n\n    obj[pss.shift()] = pss.join('=');\n  });\n  return obj;\n}\n\nfunction objectKeys(object) {\n  /* istanbul ignore next */\n  return Object.keys(object);\n}\n\nfunction objectValues(object) {\n  /* istanbul ignore next */\n  if (typeof Object.values === 'function') return Object.values(object);\n  /* istanbul ignore next */\n  return objectKeys(object).map(k => object[k]);\n}\n\n/**\n * Generates a PHC string using the data provided.\n * @param  {Object} opts Object that holds the data needed to generate the PHC\n * string.\n * @param  {string} opts.id Symbolic name for the function.\n * @param  {Number} [opts.version] The version of the function.\n * @param  {Object} [opts.params] Parameters of the function.\n * @param  {Buffer} [opts.salt] The salt as a binary buffer.\n * @param  {Buffer} [opts.hash] The hash as a binary buffer.\n * @return {string} The hash string adhering to the PHC format.\n */\nfunction serialize(opts) {\n  const fields = [''];\n\n  if (typeof opts !== 'object' || opts === null) {\n    throw new TypeError('opts must be an object');\n  }\n\n  // Identifier Validation\n  if (typeof opts.id !== 'string') {\n    throw new TypeError('id must be a string');\n  }\n\n  if (!idRegex.test(opts.id)) {\n    throw new TypeError(`id must satisfy ${idRegex}`);\n  }\n\n  fields.push(opts.id);\n\n  if (typeof opts.version !== 'undefined') {\n    if (\n      typeof opts.version !== 'number' ||\n      opts.version < 0 ||\n      !Number.isInteger(opts.version)\n    ) {\n      throw new TypeError('version must be a positive integer number');\n    }\n\n    fields.push(`v=${opts.version}`);\n  }\n\n  // Parameters Validation\n  if (typeof opts.params !== 'undefined') {\n    if (typeof opts.params !== 'object' || opts.params === null) {\n      throw new TypeError('params must be an object');\n    }\n\n    const pk = objectKeys(opts.params);\n    if (!pk.every(p => nameRegex.test(p))) {\n      throw new TypeError(`params names must satisfy ${nameRegex}`);\n    }\n\n    // Convert Numbers into Numeric Strings and Buffers into B64 encoded strings.\n    pk.forEach(k => {\n      if (typeof opts.params[k] === 'number') {\n        opts.params[k] = opts.params[k].toString();\n      } else if (Buffer.isBuffer(opts.params[k])) {\n        opts.params[k] = opts.params[k].toString('base64').split('=')[0];\n      }\n    });\n    const pv = objectValues(opts.params);\n    if (!pv.every(v => typeof v === 'string')) {\n      throw new TypeError('params values must be strings');\n    }\n\n    if (!pv.every(v => valueRegex.test(v))) {\n      throw new TypeError(`params values must satisfy ${valueRegex}`);\n    }\n\n    const strpar = objToKeyVal(opts.params);\n    fields.push(strpar);\n  }\n\n  if (typeof opts.salt !== 'undefined') {\n    // Salt Validation\n    if (!Buffer.isBuffer(opts.salt)) {\n      throw new TypeError('salt must be a Buffer');\n    }\n\n    fields.push(opts.salt.toString('base64').split('=')[0]);\n\n    if (typeof opts.hash !== 'undefined') {\n      // Hash Validation\n      if (!Buffer.isBuffer(opts.hash)) {\n        throw new TypeError('hash must be a Buffer');\n      }\n\n      fields.push(opts.hash.toString('base64').split('=')[0]);\n    }\n  }\n\n  // Create the PHC formatted string\n  const phcstr = fields.join('$');\n\n  return phcstr;\n}\n\n/**\n * Parses data from a PHC string.\n * @param  {string} phcstr A PHC string to parse.\n * @return {Object} The object containing the data parsed from the PHC string.\n */\nfunction deserialize(phcstr) {\n  if (typeof phcstr !== 'string' || phcstr === '') {\n    throw new TypeError('pchstr must be a non-empty string');\n  }\n\n  if (phcstr[0] !== '$') {\n    throw new TypeError('pchstr must contain a $ as first char');\n  }\n\n  const fields = phcstr.split('$');\n  // Remove first empty $\n  fields.shift();\n\n  // Parse Fields\n  let maxf = 5;\n  if (!versionRegex.test(fields[1])) maxf--;\n  if (fields.length > maxf) {\n    throw new TypeError(\n      `pchstr contains too many fileds: ${fields.length}/${maxf}`\n    );\n  }\n\n  // Parse Identifier\n  const id = fields.shift();\n  if (!idRegex.test(id)) {\n    throw new TypeError(`id must satisfy ${idRegex}`);\n  }\n\n  let version;\n  // Parse Version\n  if (versionRegex.test(fields[0])) {\n    version = parseInt(fields.shift().match(versionRegex)[1], 10);\n  }\n\n  let hash;\n  let salt;\n  if (b64Regex.test(fields[fields.length - 1])) {\n    if (fields.length > 1 && b64Regex.test(fields[fields.length - 2])) {\n      // Parse Hash\n      hash = Buffer.from(fields.pop(), 'base64');\n      // Parse Salt\n      salt = Buffer.from(fields.pop(), 'base64');\n    } else {\n      // Parse Salt\n      salt = Buffer.from(fields.pop(), 'base64');\n    }\n  }\n\n  // Parse Parameters\n  let params;\n  if (fields.length > 0) {\n    const parstr = fields.pop();\n    params = keyValtoObj(parstr);\n    if (!objectKeys(params).every(p => nameRegex.test(p))) {\n      throw new TypeError(`params names must satisfy ${nameRegex}`);\n    }\n\n    const pv = objectValues(params);\n    if (!pv.every(v => valueRegex.test(v))) {\n      throw new TypeError(`params values must satisfy ${valueRegex}`);\n    }\n\n    const pk = objectKeys(params);\n    // Convert Decimal Strings into Numbers\n    pk.forEach(k => {\n      params[k] = decimalRegex.test(params[k])\n        ? parseInt(params[k], 10)\n        : params[k];\n    });\n  }\n\n  if (fields.length > 0) {\n    throw new TypeError(`pchstr contains unrecognized fileds: ${fields}`);\n  }\n\n  // Build the output object\n  const phcobj = {id};\n  if (version) phcobj.version = version;\n  if (params) phcobj.params = params;\n  if (salt) phcobj.salt = salt;\n  if (hash) phcobj.hash = hash;\n\n  return phcobj;\n}\n\nmodule.exports = {\n  serialize,\n  deserialize\n};\n",
    "var fs = require('fs')\nvar path = require('path')\nvar os = require('os')\n\n// Workaround to fix webpack's build warnings: 'the request of a dependency is an expression'\nvar runtimeRequire = typeof __webpack_require__ === 'function' ? __non_webpack_require__ : require // eslint-disable-line\n\nvar vars = (process.config && process.config.variables) || {}\nvar prebuildsOnly = !!process.env.PREBUILDS_ONLY\nvar abi = process.versions.modules // TODO: support old node where this is undef\nvar runtime = isElectron() ? 'electron' : (isNwjs() ? 'node-webkit' : 'node')\n\nvar arch = process.env.npm_config_arch || os.arch()\nvar platform = process.env.npm_config_platform || os.platform()\nvar libc = process.env.LIBC || (isAlpine(platform) ? 'musl' : 'glibc')\nvar armv = process.env.ARM_VERSION || (arch === 'arm64' ? '8' : vars.arm_version) || ''\nvar uv = (process.versions.uv || '').split('.')[0]\n\nmodule.exports = load\n\nfunction load (dir) {\n  return runtimeRequire(load.resolve(dir))\n}\n\nload.resolve = load.path = function (dir) {\n  dir = path.resolve(dir || '.')\n\n  try {\n    var name = runtimeRequire(path.join(dir, 'package.json')).name.toUpperCase().replace(/-/g, '_')\n    if (process.env[name + '_PREBUILD']) dir = process.env[name + '_PREBUILD']\n  } catch (err) {}\n\n  if (!prebuildsOnly) {\n    var release = getFirst(path.join(dir, 'build/Release'), matchBuild)\n    if (release) return release\n\n    var debug = getFirst(path.join(dir, 'build/Debug'), matchBuild)\n    if (debug) return debug\n  }\n\n  var prebuild = resolve(dir)\n  if (prebuild) return prebuild\n\n  var nearby = resolve(path.dirname(process.execPath))\n  if (nearby) return nearby\n\n  var target = [\n    'platform=' + platform,\n    'arch=' + arch,\n    'runtime=' + runtime,\n    'abi=' + abi,\n    'uv=' + uv,\n    armv ? 'armv=' + armv : '',\n    'libc=' + libc,\n    'node=' + process.versions.node,\n    process.versions.electron ? 'electron=' + process.versions.electron : '',\n    typeof __webpack_require__ === 'function' ? 'webpack=true' : '' // eslint-disable-line\n  ].filter(Boolean).join(' ')\n\n  throw new Error('No native build was found for ' + target + '\\n    loaded from: ' + dir + '\\n')\n\n  function resolve (dir) {\n    // Find matching \"prebuilds/<platform>-<arch>\" directory\n    var tuples = readdirSync(path.join(dir, 'prebuilds')).map(parseTuple)\n    var tuple = tuples.filter(matchTuple(platform, arch)).sort(compareTuples)[0]\n    if (!tuple) return\n\n    // Find most specific flavor first\n    var prebuilds = path.join(dir, 'prebuilds', tuple.name)\n    var parsed = readdirSync(prebuilds).map(parseTags)\n    var candidates = parsed.filter(matchTags(runtime, abi))\n    var winner = candidates.sort(compareTags(runtime))[0]\n    if (winner) return path.join(prebuilds, winner.file)\n  }\n}\n\nfunction readdirSync (dir) {\n  try {\n    return fs.readdirSync(dir)\n  } catch (err) {\n    return []\n  }\n}\n\nfunction getFirst (dir, filter) {\n  var files = readdirSync(dir).filter(filter)\n  return files[0] && path.join(dir, files[0])\n}\n\nfunction matchBuild (name) {\n  return /\\.node$/.test(name)\n}\n\nfunction parseTuple (name) {\n  // Example: darwin-x64+arm64\n  var arr = name.split('-')\n  if (arr.length !== 2) return\n\n  var platform = arr[0]\n  var architectures = arr[1].split('+')\n\n  if (!platform) return\n  if (!architectures.length) return\n  if (!architectures.every(Boolean)) return\n\n  return { name, platform, architectures }\n}\n\nfunction matchTuple (platform, arch) {\n  return function (tuple) {\n    if (tuple == null) return false\n    if (tuple.platform !== platform) return false\n    return tuple.architectures.includes(arch)\n  }\n}\n\nfunction compareTuples (a, b) {\n  // Prefer single-arch prebuilds over multi-arch\n  return a.architectures.length - b.architectures.length\n}\n\nfunction parseTags (file) {\n  var arr = file.split('.')\n  var extension = arr.pop()\n  var tags = { file: file, specificity: 0 }\n\n  if (extension !== 'node') return\n\n  for (var i = 0; i < arr.length; i++) {\n    var tag = arr[i]\n\n    if (tag === 'node' || tag === 'electron' || tag === 'node-webkit') {\n      tags.runtime = tag\n    } else if (tag === 'napi') {\n      tags.napi = true\n    } else if (tag.slice(0, 3) === 'abi') {\n      tags.abi = tag.slice(3)\n    } else if (tag.slice(0, 2) === 'uv') {\n      tags.uv = tag.slice(2)\n    } else if (tag.slice(0, 4) === 'armv') {\n      tags.armv = tag.slice(4)\n    } else if (tag === 'glibc' || tag === 'musl') {\n      tags.libc = tag\n    } else {\n      continue\n    }\n\n    tags.specificity++\n  }\n\n  return tags\n}\n\nfunction matchTags (runtime, abi) {\n  return function (tags) {\n    if (tags == null) return false\n    if (tags.runtime && tags.runtime !== runtime && !runtimeAgnostic(tags)) return false\n    if (tags.abi && tags.abi !== abi && !tags.napi) return false\n    if (tags.uv && tags.uv !== uv) return false\n    if (tags.armv && tags.armv !== armv) return false\n    if (tags.libc && tags.libc !== libc) return false\n\n    return true\n  }\n}\n\nfunction runtimeAgnostic (tags) {\n  return tags.runtime === 'node' && tags.napi\n}\n\nfunction compareTags (runtime) {\n  // Precedence: non-agnostic runtime, abi over napi, then by specificity.\n  return function (a, b) {\n    if (a.runtime !== b.runtime) {\n      return a.runtime === runtime ? -1 : 1\n    } else if (a.abi !== b.abi) {\n      return a.abi ? -1 : 1\n    } else if (a.specificity !== b.specificity) {\n      return a.specificity > b.specificity ? -1 : 1\n    } else {\n      return 0\n    }\n  }\n}\n\nfunction isNwjs () {\n  return !!(process.versions && process.versions.nw)\n}\n\nfunction isElectron () {\n  if (process.versions && process.versions.electron) return true\n  if (process.env.ELECTRON_RUN_AS_NODE) return true\n  return typeof window !== 'undefined' && window.process && window.process.type === 'renderer'\n}\n\nfunction isAlpine (platform) {\n  return platform === 'linux' && fs.existsSync('/etc/alpine-release')\n}\n\n// Exposed for unit tests\n// TODO: move to lib\nload.parseTags = parseTags\nload.matchTags = matchTags\nload.compareTags = compareTags\nload.parseTuple = parseTuple\nload.matchTuple = matchTuple\nload.compareTuples = compareTuples\n",
    "const runtimeRequire = typeof __webpack_require__ === 'function' ? __non_webpack_require__ : require // eslint-disable-line\nif (typeof runtimeRequire.addon === 'function') { // if the platform supports native resolving prefer that\n  module.exports = runtimeRequire.addon.bind(runtimeRequire)\n} else { // else use the runtime version here\n  module.exports = require('./node-gyp-build.js')\n}\n",
    "const assert = require(\"node:assert\");\nconst { randomBytes, timingSafeEqual } = require(\"node:crypto\");\nconst { promisify } = require(\"node:util\");\nconst { deserialize, serialize } = require(\"@phc/format\");\nconst gypBuild = require(\"node-gyp-build\");\n\nconst { hash: bindingsHash } = gypBuild(__dirname);\n\n/** @type {(size: number) => Promise<Buffer>} */\nconst generateSalt = promisify(randomBytes);\n\nconst argon2d = 0;\nconst argon2i = 1;\nconst argon2id = 2;\n\nmodule.exports.argon2d = argon2d;\nmodule.exports.argon2i = argon2i;\nmodule.exports.argon2id = argon2id;\n\n/** @enum {argon2i | argon2d | argon2id} */\nconst types = Object.freeze({ argon2d, argon2i, argon2id });\n\n/** @enum {'argon2d' | 'argon2i' | 'argon2id'} */\nconst names = Object.freeze({\n  [types.argon2d]: \"argon2d\",\n  [types.argon2i]: \"argon2i\",\n  [types.argon2id]: \"argon2id\",\n});\n\nconst defaults = {\n  hashLength: 32,\n  timeCost: 3,\n  memoryCost: 1 << 16,\n  parallelism: 4,\n  type: argon2id,\n  version: 0x13,\n};\n\n/**\n * @typedef {Object} Options\n * @property {number} [hashLength=32]\n * @property {number} [timeCost=3]\n * @property {number} [memoryCost=65536]\n * @property {number} [parallelism=4]\n * @property {keyof typeof names} [type=argon2id]\n * @property {number} [version=19]\n * @property {Buffer} [salt]\n * @property {Buffer} [associatedData]\n * @property {Buffer} [secret]\n */\n\n/**\n * Hashes a password with Argon2, producing a raw hash\n *\n * @overload\n * @param {Buffer | string} password The plaintext password to be hashed\n * @param {Options & { raw: true }} options The parameters for Argon2\n * @returns {Promise<Buffer>} The raw hash generated from `password`\n */\n/**\n * Hashes a password with Argon2, producing an encoded hash\n *\n * @overload\n * @param {Buffer | string} password The plaintext password to be hashed\n * @param {Options & { raw?: boolean }} [options] The parameters for Argon2\n * @returns {Promise<string>} The encoded hash generated from `password`\n */\n/**\n * @param {Buffer | string} password The plaintext password to be hashed\n * @param {Options & { raw?: boolean }} [options] The parameters for Argon2\n */\nasync function hash(password, options) {\n  let { raw, salt, ...rest } = { ...defaults, ...options };\n\n  if (rest.hashLength > 2 ** 32 - 1) {\n    throw new RangeError(\"Hash length is too large\");\n  }\n\n  if (rest.memoryCost > 2 ** 32 - 1) {\n    throw new RangeError(\"Memory cost is too large\");\n  }\n\n  if (rest.timeCost > 2 ** 32 - 1) {\n    throw new RangeError(\"Time cost is too large\");\n  }\n\n  if (rest.parallelism > 2 ** 24 - 1) {\n    throw new RangeError(\"Parallelism is too large\");\n  }\n\n  salt = salt ?? (await generateSalt(16));\n\n  const {\n    hashLength,\n    secret = Buffer.alloc(0),\n    type,\n    version,\n    memoryCost: m,\n    timeCost: t,\n    parallelism: p,\n    associatedData: data = Buffer.alloc(0),\n  } = rest;\n\n  const hash = await bindingsHash({\n    password: Buffer.from(password),\n    salt,\n    secret,\n    data,\n    hashLength,\n    m,\n    t,\n    p,\n    version,\n    type,\n  });\n  if (raw) {\n    return hash;\n  }\n\n  return serialize({\n    id: names[type],\n    version,\n    params: { m, t, p, ...(data.byteLength > 0 ? { data } : {}) },\n    salt,\n    hash,\n  });\n}\nmodule.exports.hash = hash;\n\n/**\n * @param {string} digest The digest to be checked\n * @param {Object} [options] The current parameters for Argon2\n * @param {number} [options.timeCost=3]\n * @param {number} [options.memoryCost=65536]\n * @param {number} [options.parallelism=4]\n * @param {number} [options.version=0x13]\n * @returns {boolean} `true` if the digest parameters do not match the parameters in `options`, otherwise `false`\n */\nfunction needsRehash(digest, options = {}) {\n  const { memoryCost, timeCost, parallelism, version } = {\n    ...defaults,\n    ...options,\n  };\n\n  const {\n    version: v,\n    params: { m, t, p },\n  } = deserialize(digest);\n\n  return (\n    +v !== +version ||\n    +m !== +memoryCost ||\n    +t !== +timeCost ||\n    +p !== +parallelism\n  );\n}\nmodule.exports.needsRehash = needsRehash;\n\n/**\n * @param {string} digest The digest to be checked\n * @param {Buffer | string} password The plaintext password to be verified\n * @param {Object} [options] The current parameters for Argon2\n * @param {Buffer} [options.secret]\n * @returns {Promise<boolean>} `true` if the digest parameters matches the hash generated from `password`, otherwise `false`\n */\nasync function verify(digest, password, options = {}) {\n  const { id, ...rest } = deserialize(digest);\n  if (!(id in types)) {\n    return false;\n  }\n\n  const {\n    version = 0x10,\n    params: { m, t, p, data = \"\" },\n    salt,\n    hash,\n  } = rest;\n\n  const { secret = Buffer.alloc(0) } = options;\n\n  return timingSafeEqual(\n    await bindingsHash({\n      password: Buffer.from(password),\n      salt,\n      secret,\n      data: Buffer.from(data, \"base64\"),\n      hashLength: hash.byteLength,\n      m: +m,\n      t: +t,\n      p: +p,\n      version: +version,\n      type: types[id],\n    }),\n    hash,\n  );\n}\nmodule.exports.verify = verify;\n",
    "import commander from './index.js';\n\n// wrapper to provide named exports for ESM.\nexport const {\n  program,\n  createCommand,\n  createArgument,\n  createOption,\n  CommanderError,\n  InvalidArgumentError,\n  InvalidOptionArgumentError, // deprecated old name\n  Command,\n  Argument,\n  Option,\n  Help\n} = commander;\n",
    "#!/usr/bin/env node\n// packages/node-runtime/src/cli.ts\nimport { Command } from 'commander';\nimport { createReadStream, createWriteStream, ReadStream, WriteStream } from 'node:fs';\nimport { stdin, stdout, stderr, exit as processExit } from 'node:process';\nimport { Readable as NodeReadable, Writable as NodeWritable } from 'node:stream';\nimport { createCryptit } from './index.js';\n\nconst PKG_VERSION = '0.2.0'; // keep in sync with root package.json\n\n// ──────────────────────────────────────────────────────────────\n//  ── Helper: silent pass-prompt ───────────────────────────────\n// ──────────────────────────────────────────────────────────────\nasync function promptPass(): Promise<string> {\n  if (!stdin.isTTY) throw new Error('STDIN not a TTY; --pass required');\n\n  stderr.write('Passphrase: ');\n  stdin.setRawMode?.(true);\n  stdin.resume();\n  stdin.setEncoding('utf8');\n\n  let buf = '';\n  return new Promise((resolve) => {\n    function done() {\n      stdin.setRawMode?.(false);\n      stdin.pause();\n      stderr.write('\\n');\n      stdin.off('data', onData);\n      resolve(buf);\n    }\n    function onData(ch: string) {\n      if (ch === '\\u0003') processExit(130); // Ctrl-C\n      if (ch === '\\r' || ch === '\\n') return done();\n      if (ch === '\\u0008' || ch === '\\u007F') {\n        // Backspace\n        buf = buf.slice(0, -1);\n        return;\n      }\n      buf += ch;\n    }\n    stdin.on('data', onData);\n  });\n}\n\nfunction nodeToWeb(reader: ReadStream | typeof stdin) {\n  return (NodeReadable as any).toWeb(reader) as ReadableStream<Uint8Array>;\n}\nfunction nodeToWebW(writer: WriteStream | typeof stdout) {\n  return (NodeWritable as any).toWeb(writer) as WritableStream<Uint8Array>;\n}\n\nasync function readAllFromStdin(): Promise<string> {\n  const chunks: Buffer[] = [];\n  for await (const c of stdin) chunks.push(c as Buffer);\n  return Buffer.concat(chunks).toString('utf8');\n}\n\n// ──────────────────────────────────────────────────────────────\n//  ── CLI definition ───────────────────────────────────────────\n// ──────────────────────────────────────────────────────────────\nconst program = new Command()\n  .name('cryptit')\n  .description('AES-GCM / Argon2 encryption utility')\n  .version(PKG_VERSION)\n  .option('-p, --pass <passphrase>', 'passphrase (prompt if omitted)')\n  .option('-d, --difficulty <level>', 'argon2 difficulty low|middle|high', 'middle')\n  .option('-s, --salt-strength <low|high>', 'salt length difficulty', 'high')\n  .option('-c, --chunk-size <bytes>', 'chunk size (bytes)', (v) => Number(v), 512 * 1024)\n  .option('-v, --verbose', 'increase verbosity', (_v, prev) => (prev ?? 0) + 1, 0);\n\n// -----------------------------------------------------------------------------\n// FILE encrypt / decrypt  (streaming, constant memory)\n// -----------------------------------------------------------------------------\n\nprogram\n  .command('encrypt <src>')\n  .description('encrypt file; use - for STDIN, --out - for STDOUT')\n  .option('-o, --out <file>', 'output file (default STDOUT)', '-')\n  .action(async (src, cmd) => {\n    const g = program.opts();\n    const crypt = createCryptit({\n      difficulty: g.difficulty,\n      saltStrength: g.saltStrength,\n      chunkSize: g.chunkSize,\n    });\n\n    const pass =\n      g.pass ??\n      (stdin.isTTY\n        ? await promptPass()\n        : (() => {\n            // <-- add this IIFE\n            stderr.write('Use --pass when piping data via STDIN\\n');\n            processExit(1);\n          })());\n    const rs = src === '-' ? stdin : createReadStream(src);\n    const ws = cmd.out === '-' ? stdout : createWriteStream(cmd.out);\n    const { header, writable, readable } = await crypt.createEncryptionStream(pass);\n\n    const webRS = nodeToWeb(rs);\n    const webWS = nodeToWebW(ws);\n\n    /* 1) write header once */\n    const writer = webWS.getWriter();\n    await writer.write(header);\n    writer.releaseLock();\n\n    /* 2) pipe payload */\n    await Promise.all([\n      webRS.pipeTo(writable),   // Readable → cipher-writable\n      readable.pipeTo(webWS)    // cipher-readable → Writable\n    ]);\n  });\n\nprogram\n  .command('decrypt <src>')\n  .description('decrypt file; use - for STDIN, --out - for STDOUT')\n  .option('-o, --out <file>', 'output file (default STDOUT)', '-')\n  .action(async (src, cmd) => {\n    const g = program.opts();\n    const crypt = createCryptit({\n      difficulty: g.difficulty,\n      saltStrength: g.saltStrength,\n      chunkSize: g.chunkSize,\n    });\n\n    const pass = g.pass ?? (await promptPass());\n    const rs = src === '-' ? stdin : createReadStream(src);\n    const ws = cmd.out === '-' ? stdout : createWriteStream(cmd.out);\n\n    const webRS = nodeToWeb(rs);\n    const webWS = nodeToWebW(ws);\n    const tf = await crypt.createDecryptionStream(pass);\n\n    await Promise.all([webRS.pipeTo(tf.writable), tf.readable.pipeTo(webWS)]);\n\n  });\n\n// -----------------------------------------------------------------------------\n// TEXT encrypt / decrypt  (entire payload in memory)\n// -----------------------------------------------------------------------------\nprogram\n  .command('encrypt-text [text]')\n  .description('encrypt plaintext; omit arg to read from STDIN')\n  .action(async (text) => {\n    const g = program.opts();\n    const crypt = createCryptit({\n      difficulty: g.difficulty,\n      saltStrength: g.saltStrength,\n    });\n    const pass =\n      g.pass ??\n      (stdin.isTTY\n        ? await promptPass()\n        : (() => {\n            // <-- add this IIFE\n            stderr.write('Use --pass when piping data via STDIN\\n');\n            processExit(1);\n          })());\n    const plain = text ?? (await readAllFromStdin());\n    const cipher = await crypt.encryptText(plain, pass);\n    stdout.write(cipher + '\\n');\n  });\n\nprogram\n  .command('decrypt-text [b64]')\n  .description('decrypt Base64 ciphertext; omit arg to read from STDIN')\n  .action(async (b64) => {\n    const g = program.opts();\n    const crypt = createCryptit({\n      difficulty: g.difficulty,\n      saltStrength: g.saltStrength,\n    });\n    const pass = g.pass ?? (await promptPass());\n    const data = b64 ?? (await readAllFromStdin()).trim();\n    const plain = await crypt.decryptText(data, pass);\n    stdout.write(plain + '\\n');\n  });\n\nprogram.parse();\n",
    "// packages/core/src/algorithms/argon2.ts\n/**\n * Environment-agnostic Argon2-id wrapper.\n *  • Node / Bun  → native `argon2` addon (fastest)\n *  • Browser     → antelle/argon2-browser (WASM)\n */\n\nimport * as Argon2Browser from \"argon2-browser\";\n\n/** Minimal subset of tuning parameters we expose */\nexport interface Argon2Tuning {\n  time: number;        // iterations\n  mem: number;         // kibibytes\n  parallelism: number; // lanes\n}\n\nexport type ArgonHash = { hash: Uint8Array };\n\n/**\n * Derive a 32-byte hash with Argon2-id.\n *\n * @param password   UTF-8 string or raw bytes\n * @param salt       random salt\n * @param opts       memory/time/parallelism\n * @param env        'node' (incl. Bun) or 'browser'\n */\nexport async function argon2id(\n  password: Uint8Array | string,\n  salt: Uint8Array,\n  opts: Argon2Tuning,\n  env: \"node\" | \"browser\",\n): Promise<ArgonHash> {\n  // ————————————————————————————  Node / Bun  ————————————————————————————\n  if (env === \"node\") {\n    const argon2 = await import(\"argon2\");\n    const pwdBuf =\n      typeof password === \"string\" ? Buffer.from(password, \"utf8\")\n                                   : Buffer.from(password);\n\n    const saltBuf = Buffer.from(salt);\n\n    const raw: Buffer = await argon2.hash(pwdBuf, {\n      salt       : saltBuf,\n      timeCost    : opts.time,\n      memoryCost  : opts.mem,\n      parallelism : opts.parallelism,\n      hashLength  : 32,\n      raw         : true,\n      type        : argon2.argon2id,\n    });\n\n    return { hash: new Uint8Array(raw) };\n\n  }\n\n  // ————————————————————————————  Browser  ————————————————————————————\n  if (env === \"browser\") {\n    const { hash } = await Argon2Browser.hash({\n      pass: password,\n      salt,\n      time: opts.time,\n      mem: opts.mem,\n      parallelism: opts.parallelism,\n      hashLen: 32,\n      type: Argon2Browser.ArgonType.Argon2id,\n    });\n    return { hash };\n  }\n\n  throw new Error(`Unsupported environment: ${env}`);\n}",
    "// packages/core/src/config/defaults.ts\nexport const DefaultConfig = {\n  saltLengths: { low: 12, high: 16 } as const,\n  argon: {\n    low:    { time: 5, mem:  64 * 1024, parallelism: 1 },\n    middle: { time: 20, mem:  64 * 1024, parallelism: 1 },\n    high:   { time: 40, mem: 64 * 1024, parallelism: 1 }\n  },\n  chunkSize: 512 * 1024 // 512 KiB\n};\nexport type Difficulty = keyof typeof DefaultConfig.argon;\nexport type SaltStrength = keyof typeof DefaultConfig.saltLengths;",
    "// packages/core/src/algorithms/aesgcm/AESGCMEncryption.ts\nimport { CryptoProvider } from '../../providers/CryptoProvider.js';\nimport { argon2id } from '../argon2.js';\nimport { DefaultConfig } from '../../config/defaults.js';\n\nexport class AESGCMEncryption {\n  private key: CryptoKey | null = null;\n  constructor(private provider: CryptoProvider) {}\n\n  async deriveKey(\n    passphrase: Uint8Array | string,\n    salt: Uint8Array,\n    diff: keyof typeof DefaultConfig.argon\n  ) {\n    const env = this.provider.isNode ? 'node' : 'browser';\n    const { hash } = await argon2id(\n      passphrase,\n      salt,\n      DefaultConfig.argon[diff],\n      env\n    );\n    this.key = await this.provider.subtle.importKey(\n      'raw',\n      hash,\n      { name: 'AES-GCM', length: 256 },\n      false,\n      ['encrypt', 'decrypt']\n    );\n  }\n\n  async encryptChunk(plain: Uint8Array) {\n    if (!this.key) throw new Error('KEY_NOT_DERIVED');\n    const iv = this.provider.getRandomValues(new Uint8Array(12));\n    const cipher = new Uint8Array(\n      await this.provider.subtle.encrypt({ name: 'AES-GCM', iv }, this.key, plain)\n    );\n    const out = new Uint8Array(iv.length + cipher.length);\n    out.set(iv);\n    out.set(cipher, iv.length);\n    return out;\n  }\n\n  async decryptChunk(data: Uint8Array) {\n    if (!this.key) throw new Error('KEY_NOT_DERIVED');\n    const iv = data.slice(0, 12);\n    const cipher = data.slice(12);\n    const plain = await this.provider.subtle.decrypt(\n      { name: 'AES-GCM', iv },\n      this.key,\n      cipher\n    );\n    return new Uint8Array(plain);\n  }\n}",
    "// packages/core/src/header/constants.ts\nexport const HEADER_START_BYTE = 0x01;          // magic\nexport const CURRENT_VERSION   = 0;             // 3 bits",
    "// packages/core/src/header/encoder.ts\nimport { DefaultConfig, Difficulty, SaltStrength } from '../config/defaults.js';\nimport { CURRENT_VERSION, HEADER_START_BYTE } from './constants.js';\n\nexport function encodeHeader(\n  diff: Difficulty,\n  saltStrength: SaltStrength,\n  salt: Uint8Array\n): Uint8Array {\n  const infoByte =\n    (CURRENT_VERSION << 5) |\n    ((saltStrength === 'high' ? 1 : 0) << 2) |\n    ({ low: 0, middle: 1, high: 2 } as const)[diff];\n  return new Uint8Array([HEADER_START_BYTE, infoByte, ...salt]);\n}",
    "import { CURRENT_VERSION, HEADER_START_BYTE } from './constants.js';\nimport { DefaultConfig, Difficulty, SaltStrength } from '../config/defaults.js';\n\nexport function decodeHeader(bytes: Uint8Array) {\n  if (bytes[0] !== HEADER_START_BYTE) throw new Error('INVALID_HEADER');\n  const info = bytes[1];\n  const version = info >> 5;\n  const saltStrength = ((info >> 2) & 1) ? 'high' : 'low';\n  const diffCode = info & 0b11;\n  const difficulty = (['low','middle','high'] as const)[diffCode];\n  const saltLen = DefaultConfig.saltLengths[saltStrength];\n  const salt = bytes.slice(2, 2 + saltLen);\n  return { version, difficulty, saltStrength, salt, headerLen: 2 + saltLen };\n}",
    "import type { IEncryptionAlgorithm } from \"../types.js\";\n\n/**\n * TransformStream that:\n *   • collects plaintext into fixed-size blocks (default 512 KiB)\n *   • encrypts each block via the provided crypto engine\n *   • emits: [4-byte big-endian length ‖ encryptedBlock]\n *\n * Input  types accepted: Uint8Array | ArrayBuffer | Blob\n * Output type:           Uint8Array\n */\nexport class EncryptTransform {\n  private buffer = new Uint8Array(0);\n\n  constructor(\n    private readonly engine: IEncryptionAlgorithm,\n    private readonly chunkSize = 512 * 1024,\n  ) {}\n\n  /** Public factory – keeps callers one-liner-simple */\n  toTransformStream(): TransformStream<\n    Uint8Array | ArrayBuffer | Blob,\n    Uint8Array\n  > {\n    return new TransformStream({\n      transform: async (chunk, ctl) => {\n        await this.transform(\n          await this.asUint8Array(chunk),\n          ctl,\n        );\n      },\n      flush: async ctl => this.flush(ctl),\n    });\n  }\n\n  // --------------------------------------------------------------------------\n\n  private async transform(\n    bytes: Uint8Array,\n    ctl: TransformStreamDefaultController<Uint8Array>,\n  ) {\n    // concat previous tail + new data\n    const combined = new Uint8Array(this.buffer.length + bytes.length);\n    combined.set(this.buffer);\n    combined.set(bytes, this.buffer.length);\n\n    let offset = 0;\n    while (combined.length - offset >= this.chunkSize) {\n      const block = combined.slice(offset, offset + this.chunkSize);\n      offset += this.chunkSize;\n\n      const encrypted = await this.engine.encryptChunk(block);\n\n      // prepend 4-byte length-header (big-endian)\n      const header = new Uint8Array(4);\n      new DataView(header.buffer).setUint32(0, encrypted.length, false);\n\n      const out = new Uint8Array(header.length + encrypted.length);\n      out.set(header);\n      out.set(encrypted, header.length);\n\n      ctl.enqueue(out);\n    }\n\n    this.buffer = combined.slice(offset);\n  }\n\n  private async flush(ctl: TransformStreamDefaultController<Uint8Array>) {\n    if (!this.buffer.length) return;\n\n    const encrypted = await this.engine.encryptChunk(this.buffer);\n    const header = new Uint8Array(4);\n    new DataView(header.buffer).setUint32(0, encrypted.length, false);\n\n    const out = new Uint8Array(4 + encrypted.length);\n    out.set(header);\n    out.set(encrypted, 4);\n\n    ctl.enqueue(out);\n    this.buffer = new Uint8Array(0); // GC friendly\n  }\n\n  private async asUint8Array(\n    input: Uint8Array | ArrayBuffer | Blob,\n  ): Promise<Uint8Array> {\n    if (input instanceof Uint8Array) return input;\n    if (input instanceof ArrayBuffer) return new Uint8Array(input);\n    // Blob\n    return new Uint8Array(await input.arrayBuffer());\n  }\n}",
    "import type { IEncryptionAlgorithm } from \"../types.js\";\n\n/**\n * Counterpart to EncryptTransform.\n * Accepts the framed ciphertext and streams out raw plaintext.\n *\n * Emits Uint8Array chunks identical to the original plaintext\n * (except block boundaries aren’t guaranteed to match).\n */\nexport class DecryptTransform {\n  private buffer = new Uint8Array(0);\n\n  constructor(\n    private readonly engine: IEncryptionAlgorithm,\n    private readonly chunkSize = 512 * 1024,\n  ) {}\n\n  toTransformStream(): TransformStream<\n    Uint8Array | ArrayBuffer | Blob,\n    Uint8Array\n  > {\n    return new TransformStream({\n      transform: async (chunk, ctl) => {\n        await this.transform(\n          await this.asUint8Array(chunk),\n          ctl,\n        );\n      },\n      flush: async ctl => this.flush(ctl),\n    });\n  }\n\n  // --------------------------------------------------------------------------\n\n  private async transform(\n    bytes: Uint8Array,\n    ctl: TransformStreamDefaultController<Uint8Array>,\n  ) {\n    const combined = new Uint8Array(this.buffer.length + bytes.length);\n    combined.set(this.buffer);\n    combined.set(bytes, this.buffer.length);\n\n    let offset = 0;\n    while (true) {\n      if (combined.length - offset < 4) break; // not enough for header\n\n      const cipherLen = new DataView(\n        combined.buffer,\n        combined.byteOffset + offset,\n        4,\n      ).getUint32(0, false);\n      if (combined.length - offset - 4 < cipherLen) break; // incomplete\n\n      offset += 4;\n      const cipher = combined.slice(offset, offset + cipherLen);\n      offset += cipherLen;\n\n      const plain = await this.engine.decryptChunk(cipher);\n      ctl.enqueue(plain);\n    }\n\n    this.buffer = combined.slice(offset);\n  }\n\n  private async flush(ctl: TransformStreamDefaultController<Uint8Array>) {\n    await this.transform(new Uint8Array(0), ctl); // process any tail\n    this.buffer = new Uint8Array(0);\n  }\n\n  private async asUint8Array(\n    input: Uint8Array | ArrayBuffer | Blob,\n  ): Promise<Uint8Array> {\n    if (input instanceof Uint8Array) return input;\n    if (input instanceof ArrayBuffer) return new Uint8Array(input);\n    return new Uint8Array(await input.arrayBuffer());\n  }\n}",
    "// packages/core/src/stream/StreamProcessor.ts\nimport { EncryptTransform }  from \"./EncryptTransform.js\";\nimport { DecryptTransform }  from \"./DecryptTransform.js\";\nimport type { IEncryptionAlgorithm } from \"../types.js\";\n\nexport class StreamProcessor {\n  constructor(\n    private readonly engine: IEncryptionAlgorithm,\n    private readonly chunkSize = 512 * 1024,\n  ) {}\n\nencryptionStream(): TransformStream<Uint8Array, Uint8Array> {\n  const enc = new EncryptTransform(this.engine, this.chunkSize)\n                .toTransformStream();\n  /* return an object that really has BOTH ends */\n  return {\n    writable: enc.writable,\n    readable: enc.readable,\n  } as TransformStream<Uint8Array, Uint8Array>;\n}\n  // ─────────────────────────────────────────────────────────────\n  //  Decrypt: strip header bytes first, then run DecryptTransform\n  // ─────────────────────────────────────────────────────────────\n  decryptionStream(headerLen: number): TransformStream<Uint8Array, Uint8Array> {\n    let skip = headerLen;\n    console.log(skip)\n    const strip = new TransformStream<Uint8Array, Uint8Array>({\n      transform(chunk, ctl) {\n        if (skip === 0) {\n          ctl.enqueue(chunk);\n          return;\n        }\n        if (chunk.byteLength <= skip) {\n          skip -= chunk.byteLength;      // still inside header\n          return;\n        }\n        ctl.enqueue(chunk.slice(skip));\n        skip = 0;\n      },\n    });\n\n    const decrypted = new DecryptTransform(this.engine, this.chunkSize)\n      .toTransformStream();\n\n    return {\n  writable: strip.writable,\n  readable: strip.readable\n              .pipeThrough(decrypted),\n} as unknown as TransformStream<Uint8Array, Uint8Array>;\n  }\n\n  // ─────────────────────────────────────────────────────────────\n  //  Helper that collects a full stream into a single Uint8Array\n  // ─────────────────────────────────────────────────────────────\n  async collect(\n    readable: ReadableStream<Uint8Array>,\n    transform: TransformStream<Uint8Array, Uint8Array>,\n    prefix: Uint8Array | null = null,\n  ): Promise<Uint8Array> {\n    const reader = readable.pipeThrough(transform).getReader();\n    const chunks: Uint8Array[] = [];\n    if (prefix?.length) chunks.push(prefix);\n\n    while (true) {\n      const { value, done } = await reader.read();\n      if (done) break;\n      chunks.push(value);\n    }\n\n    const total = chunks.reduce((n, c) => n + c.byteLength, 0);\n    const out   = new Uint8Array(total);\n    let offset  = 0;\n    for (const c of chunks) {\n      out.set(c, offset);\n      offset += c.byteLength;\n    }\n    return out;\n  }\n}",
    "// packages/core/src/index.ts\nimport type { CryptoProvider } from \"./providers/CryptoProvider.js\";\nimport { AESGCMEncryption } from \"./algorithms/aesgmc/AESGCMEncryption.js\";\n\nimport { encodeHeader } from \"./header/encoder.js\";\nimport { decodeHeader } from \"./header/decoder.js\";\n\nimport {\n  DefaultConfig,\n  type Difficulty,\n  type SaltStrength,\n} from \"./config/defaults.js\";\n\nimport { StreamProcessor }  from \"./stream/StreamProcessor.js\";\nimport { EncryptTransform } from \"./stream/EncryptTransform.js\";\nimport { DecryptTransform } from \"./stream/DecryptTransform.js\";\n\n// ────────────────────────────────────────────────────────────────────────────\n//  Public configuration shape\n// ────────────────────────────────────────────────────────────────────────────\nexport interface EncryptionConfig {\n  difficulty?: Difficulty;\n  saltStrength?: SaltStrength;\n  chunkSize?: number;\n}\n\nexport interface EncryptStreamResult {\n  header: Uint8Array;\n  writable: WritableStream<Uint8Array>;\n  readable: ReadableStream<Uint8Array>;\n}\n\n\n// ────────────────────────────────────────────────────────────────────────────\n//  Main high-level façade\n// ────────────────────────────────────────────────────────────────────────────\nexport class Cryptit {\n  private readonly algo: AESGCMEncryption;\n  private readonly difficulty: Difficulty;\n  private readonly saltStrength: SaltStrength;\n  private readonly chunkSize: number;\n\n  /** StreamProcessor can only be constructed *after* the three fields above */\n  private readonly streamer: StreamProcessor;\n\n  constructor(\n    private readonly provider: CryptoProvider,\n    cfg: EncryptionConfig = {},\n  ) {\n    this.algo         = new AESGCMEncryption(provider);\n    this.difficulty   = cfg.difficulty   ?? \"middle\";\n    this.saltStrength = cfg.saltStrength ?? \"high\";\n    this.chunkSize    = cfg.chunkSize    ?? DefaultConfig.chunkSize;\n\n    this.streamer = new StreamProcessor(this.algo, this.chunkSize);\n  }\n\n  // ──────────────────────────────────────────────────\n  //  TEXT helpers\n  // ──────────────────────────────────────────────────\n  async encryptText(plain: string | Uint8Array, pass: string): Promise<string> {\n    const salt = this.genSalt();\n    await this.algo.deriveKey(pass, salt, this.difficulty);\n\n    const cipher = await this.algo.encryptChunk(\n      typeof plain === \"string\" ? new TextEncoder().encode(plain) : plain,\n    );\n\n    const header = encodeHeader(this.difficulty, this.saltStrength, salt);\n\n    return Buffer.from([...header, ...cipher]).toString(\"base64\");\n  }\n\n  async decryptText(b64: string, pass: string): Promise<string> {\n    const data = Uint8Array.from(Buffer.from(b64, \"base64\"));\n    const { difficulty, salt, headerLen } = decodeHeader(data);\n\n    await this.algo.deriveKey(pass, salt, difficulty);\n\n    const plain = await this.algo.decryptChunk(data.slice(headerLen));\n    return new TextDecoder().decode(plain);\n  }\n\n  // ──────────────────────────────────────────────────\n  //  FILE helpers\n  // ──────────────────────────────────────────────────\n  async encryptFile(file: Blob, pass: string): Promise<Blob> {\n    const salt = this.genSalt();\n    await this.algo.deriveKey(pass, salt, this.difficulty);\n\n    const header = encodeHeader(this.difficulty, this.saltStrength, salt);\n    const cipher = await this.streamer.collect(\n      file.stream() as ReadableStream<Uint8Array>,\n      new EncryptTransform(this.algo, this.chunkSize).toTransformStream(),\n      header,\n    );\n\n    return new Blob([cipher], { type: \"application/octet-stream\" });\n  }\n\n  async decryptFile(file: Blob, pass: string): Promise<Blob> {\n    // peek first 2 bytes → work out full header length\n    const info   = new Uint8Array(await file.slice(0, 2).arrayBuffer());\n    const strong = ((info[1] >> 2) & 1) ? \"high\" : \"low\";\n    const hdrLen = 2 + DefaultConfig.saltLengths[strong];\n\n    const header = new Uint8Array(await file.slice(0, hdrLen).arrayBuffer());\n    const parsed = decodeHeader(header);\n\n    await this.algo.deriveKey(pass, parsed.salt, parsed.difficulty);\n\n    const plain = await this.streamer.collect(\n      file.slice(hdrLen).stream() as ReadableStream<Uint8Array>,\n      new DecryptTransform(this.algo, this.chunkSize).toTransformStream(),\n    );\n\n    return new Blob([plain], { type: \"application/octet-stream\" });\n  }\n\n  // ──────────────────────────────────────────────────\n  //  STREAM-BASED (piping) helpers – for CLI, etc.\n  // ──────────────────────────────────────────────────\n\nasync createEncryptionStream(pass: string): Promise<EncryptStreamResult> {\n  const salt  = this.genSalt();\n  await this.algo.deriveKey(pass, salt, this.difficulty);\n\n  const header = encodeHeader(this.difficulty, this.saltStrength, salt);\n  const tf     = this.streamer.encryptionStream();      // headerless\n\n  return { header, writable: tf.writable, readable: tf.readable };\n}\n// ───────────────────────────────────────────────\n//  Streaming decrypt (header-aware)\n// ───────────────────────────────────────────────\nasync createDecryptionStream(\n  passphrase: string\n): Promise<TransformStream<Uint8Array, Uint8Array>> {\n\n  const self = this;\n  let buf    = new Uint8Array(0);\n  let derived = false;\n  let downstream!: TransformStream<Uint8Array, Uint8Array>;\n\n  /** pumps decryptTs.readable → outer controller continuously */\n  async function startPump(\n    readable: ReadableStream<Uint8Array>,\n    ctl: TransformStreamDefaultController<Uint8Array>\n  ) {\n    const reader = readable.getReader();\n    while (true) {\n      const { value, done } = await reader.read();\n      if (done) break;\n      ctl.enqueue(value);\n    }\n  }\n\n  return new TransformStream<Uint8Array, Uint8Array>({\n    async transform(chunk, ctl) {\n      if (!derived) {\n        // accumulate header\n        buf = self.concat(buf, chunk);\n        if (buf.length < 2) return;\n\n        const saltFlag = ((buf[1] >> 2) & 1) ? \"high\" : \"low\";\n        const hdrLen   = 2 + DefaultConfig.saltLengths[saltFlag];\n        if (buf.length < hdrLen) return;\n\n        // parse + derive\n        const header = buf.slice(0, hdrLen);\n        const { salt, difficulty } = decodeHeader(header);\n        await self.algo.deriveKey(passphrase, salt, difficulty);\n\n        // set up decrypt transform (no further header skipping)\n        downstream = new DecryptTransform(self.algo, self.chunkSize)\n                       .toTransformStream();\n\n        // begin pumping plaintext out\n        startPump(downstream.readable, ctl);   // fire-and-forget\n\n        // push remainder (ciphertext after header) into decrypt\n        const rem = buf.slice(hdrLen);\n        if (rem.length) {\n          const w = downstream.writable.getWriter();\n          await w.write(rem);\n          w.releaseLock();\n        }\n        derived = true;\n        return;\n      }\n\n      // after derivation every chunk is plain ciphertext\n      const w = downstream.writable.getWriter();\n      await w.write(chunk);\n      w.releaseLock();\n    },\n\n    async flush() {\n      if (derived) {\n        const w = downstream.writable.getWriter();\n        await w.close();              // let pump finish\n        w.releaseLock();\n      }\n    }\n  });\n}\n\n  // ──────────────────────────────────────────────────\n  //  Helpers\n  // ──────────────────────────────────────────────────\n  concat(a: Uint8Array, b: Uint8Array): Uint8Array {\n  const out = new Uint8Array(a.length + b.length);\n  out.set(a, 0);\n  out.set(b, a.length);\n  return out;\n}\n\n  private genSalt(): Uint8Array {\n    const len = DefaultConfig.saltLengths[this.saltStrength];\n    return this.provider.getRandomValues(new Uint8Array(len));\n  }\n}",
    "import { webcrypto, randomFillSync } from 'node:crypto';\nimport type { CryptoProvider } from '../../core/src/providers/CryptoProvider.js';\n\nexport const nodeProvider: CryptoProvider = {\n  // cast is safe: Node’s SubtleCrypto is a superset of the browser spec\n  subtle: webcrypto.subtle as unknown as SubtleCrypto,\n  getRandomValues(buf) {\n    randomFillSync(buf);\n    return buf;\n  },\n  isNode: true,\n};\n",
    "import { Cryptit, EncryptionConfig } from '../../core/src/index.js';\nimport { nodeProvider } from './provider.js';\nexport function createCryptit(cfg?: EncryptionConfig) {\n  return new Cryptit(nodeProvider, cfg);\n}\n"
  ],
  "mappings": "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",
  "debugId": "0FCE605F7FF839C164756E2164756E21",
  "names": []
}
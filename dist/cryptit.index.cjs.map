{
  "version": 3,
  "sources": ["../packages/core/src/errors/index.ts", "../packages/core/src/config/SchemeRegistry.ts", "../packages/core/src/algorithms/encryption/base/BaseAEADWithPadAAD.ts", "../packages/core/src/algorithms/encryption/aes-gcm/AESGCM.ts", "../node_modules/@noble/ciphers/utils.js", "../node_modules/@noble/ciphers/_arx.js", "../node_modules/@noble/ciphers/_poly1305.js", "../node_modules/@noble/ciphers/chacha.js", "../packages/core/src/algorithms/encryption/xchacha20poly1305/XChaCha20-Poly1305.ts", "../packages/core/src/algorithms/kdf/argon2-wrapper.ts", "../packages/core/src/algorithms/kdf/Argon2.ts", "../packages/core/src/config/defaults.ts", "../packages/core/src/header/constants.ts", "../packages/core/src/util/bytes.ts", "../packages/core/src/header/encoder.ts", "../packages/core/src/header/decoder.ts", "../packages/core/src/util/convert.ts", "../packages/core/src/util/frame.ts", "../packages/core/src/stream/EncryptTransform.ts", "../packages/core/src/stream/DecryptTransform.ts", "../packages/core/src/util/stream.ts", "../packages/core/src/stream/StreamProcessor.ts", "../packages/core/src/util/Convertible.ts", "../packages/core/src/algorithms/padding/magic48ver-crc8.ts", "../packages/core/src/util/logger.ts", "../packages/core/src/util/range.ts", "../packages/core/src/util/ByteSource.ts", "../packages/core/src/engine/EngineManager.ts", "../packages/core/src/index.ts", "../packages/node-runtime/src/provider.ts", "../packages/node-runtime/src/index.ts"],
  "sourcesContent": [
    "const DISABLE_STACKTRACE : boolean = true;\n\nexport class CryptitError extends Error {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, new.target.prototype);\n    this.name  = new.target.name;\n    if (DISABLE_STACKTRACE) this.stack = undefined;\n  }\n}\n\nexport class InvalidHeaderError   extends CryptitError {}\nexport class DecodingError        extends CryptitError {}\nexport class EncodingError        extends CryptitError {}\nexport class SchemeError          extends CryptitError {}\nexport class HeaderDecodeError    extends CryptitError {}\nexport class KeyDerivationError   extends CryptitError {}\nexport class EncryptionError      extends CryptitError {}\nexport class DecryptionError      extends CryptitError {}\nexport class FilesystemError      extends CryptitError {}",
    "// packages/core/src/config/SchemeRegistry.ts\nimport { SchemeDescriptor } from \"../types/index.js\";\nimport { SchemeError } from \"../errors/index.js\";\n\nexport class SchemeRegistry {\n  private static readonly byId = new Map<number, SchemeDescriptor>();\n\n  static register(s: SchemeDescriptor): void {\n    if (this.byId.has(s.id)) throw new SchemeError(`Scheme ${s.id} already registered`);\n    this.byId.set(s.id, s);\n  }\n  static get(id: number): SchemeDescriptor {\n    const v = this.byId.get(id);\n    if (!v) throw new SchemeError(`Unknown scheme: ${id}`);\n    return v;\n  }\n  // default current scheme\n  static get current(): SchemeDescriptor { return this.get(0); }\n}",
    "// packages/core/src/algorithms/encryption/base/BaseAEADWithPadAAD.ts\nimport { CryptoProvider }       from '../../../providers/CryptoProvider.js';\nimport { DecryptionError }      from '../../../errors/index.js';\nimport type { EncryptionAlgorithm } from '../../../types/index.js';\nimport type { PaddingScheme }   from '../../padding/magic48ver-crc8.js';\n\n/**\n * Padding enforcement policy encoded into AAD and applied during decrypt.\n *\n * - `'require'` — The plaintext **must** carry a valid padding trailer. Encrypt will\n *   add padding; decrypt will throw if it is missing or malformed.\n * - `'forbid'`  — The plaintext **must not** carry a padding trailer. Encrypt will not\n *   add padding; decrypt will throw if a valid trailer is present.\n * - `'auto'`    — *Configuration-derived* behavior:\n *     - If a {@link PaddingScheme} is set via {@link setPaddingScheme}, behaves as `'require'`.\n *     - Otherwise behaves as `'forbid'`.\n *\n * @remarks\n * The resolved policy (after mapping `'auto'`) is encoded into the \"PAD AAD\" fragment,\n * binding the expectation to AEAD integrity. See {@link buildPadAAD}.\n */\nexport type PaddingAADMode = 'auto' | 'require' | 'forbid';\n\n/**\n * ## BaseAEADWithPadAAD\n *\n * An abstract helper for AEAD implementations (e.g., AES-GCM, XChaCha20-Poly1305)\n * that need:\n *\n * - deterministic, versioned **PAD AAD** composition to bind \"padding semantics\" to\n *   the AEAD tag,\n * - consistent **policy resolution** (`require/forbid/auto`) and **enforcement**,\n * - safe **padding/unpadding** calls, and\n * - optional **legacy AAD fallback** for backward compatibility with previously\n *   written ciphertexts that did not include the PAD AAD fragment.\n *\n * Subclasses implement only cipher-specific work:\n * - key management ({@link setKey}, {@link zeroKey}),\n * - encrypt/decrypt primitives that accept an AAD\n *   ({@link encryptWithAAD}, {@link decryptWithAAD}).\n *\n * ### Security model\n * - **All padding trailers are authenticated by the surrounding AEAD**; CRCs inside the\n *   trailer (if any) are used only to reduce accidental false-positives.\n * - **Plaintext zeroization:** {@link encryptChunk} overwrites the caller-supplied\n *   plaintext buffer (and any padded copy) with zeros after use.\n * - **AAD binding:** The class appends a compact PAD AAD fragment to any header AAD\n *   configured via {@link setAAD}. Decrypt will only succeed if the AAD exactly matches.\n *\n * ### PAD AAD (version 0x01)\n * The PAD AAD fragment is:\n * ```\n *   \"PAD1\" (0x50 0x41 0x44 0x31) || VER(0x01) || MODE(1) || ALIGN(1)\n *   where MODE: 0x00=require, 0x01=forbid; ALIGN ∈ [1..255]\n * ```\n * The full AAD used for encryption/decryption is:\n * ```\n *   headerAAD || padAAD\n * ```\n *\n * ### Backward compatibility\n * If enabled (see {@link setLegacyAADFallback}), decrypt will retry with *legacy*\n * AADs (header-only, optionally empty) when decrypt with the composed AAD fails.\n * When a legacy AAD is used, policy enforcement defaults to `'auto'` unless\n * overridden by {@link setLegacyAADFallback}.\n */\nexport abstract class BaseAEADWithPadAAD implements EncryptionAlgorithm {\n  /**\n   * Size of the nonce/IV used by the concrete AEAD in bytes.\n   * @public\n   */\n  public abstract readonly IV_LENGTH: number;\n\n  /**\n   * Size of the authentication tag produced by the concrete AEAD in bytes.\n   * @public\n   */\n  public abstract readonly TAG_LENGTH: number;\n\n  /**\n   * Active padding scheme. If `null`, `'auto'` resolves to `'forbid'`.\n   * @protected\n   */\n  protected padding: PaddingScheme | null = null;\n\n  /**\n   * Caller-provided header AAD (e.g., protocol header). Always copied on set.\n   * @protected\n   */\n  protected headerAAD: Uint8Array = new Uint8Array(0);\n\n  /**\n   * Configured padding policy. See {@link PaddingAADMode} for semantics.\n   * @protected\n   * @defaultValue `'auto'`\n   */\n  protected padAADMode: PaddingAADMode = 'auto';\n\n  /**\n   * Declared alignment stored in PAD AAD (does not change parsing at decrypt-time).\n   * Must be an integer in `[1..255]`.\n   * @protected\n   * @defaultValue `8`\n   */\n  protected padAlign: number = 8;\n\n  // ---- Legacy AAD fallback controls ----\n\n  /**\n   * If `true`, decrypt will retry with legacy AAD(s) (header-only and/or empty)\n   * when decrypt with the composed AAD fails. Use to read old ciphertexts that\n   * did not include the PAD AAD fragment.\n   * @protected\n   * @defaultValue `true`\n   */\n  protected allowLegacyAADFallback = true;\n\n  /**\n   * Policy to apply **when** a legacy AAD path is taken.\n   * - `'auto'`: mimic old behavior (strip trailer if present; otherwise pass-through).\n   * - `'require'`: demand a valid trailer (may break some legacy material).\n   * - `'forbid'`: reject if a valid trailer is present.\n   * @protected\n   * @defaultValue `'auto'`\n   */\n  protected legacyFallbackPolicy: PaddingAADMode = 'auto';\n\n  /**\n   * If `true`, one of the legacy decrypt retries will use an **empty AAD**.\n   * Enable only if very old writers omitted AAD entirely.\n   * @protected\n   * @defaultValue `false`\n   */\n  protected tryEmptyAADOnLegacyFallback = false;\n\n  /**\n   * Configure legacy AAD fallback behavior used during {@link decryptChunk}.\n   *\n   * @param opts - Optional configuration.\n   * @param opts.enabled - Enable/disable the legacy retry logic. Default: `current value` (initially `true`).\n   * @param opts.policy  - Policy to enforce if a legacy AAD succeeds. Default: `'auto'`.\n   * @param opts.tryEmptyAAD - Whether to also retry with empty AAD. Default: `current value` (initially `false`).\n   */\n  public setLegacyAADFallback(opts: {\n    enabled?: boolean;\n    policy?: PaddingAADMode;\n    tryEmptyAAD?: boolean;\n  } = {}): void {\n    if (opts.enabled !== undefined) this.allowLegacyAADFallback = !!opts.enabled;\n    if (opts.policy) this.legacyFallbackPolicy = opts.policy;\n    if (opts.tryEmptyAAD !== undefined) this.tryEmptyAADOnLegacyFallback = !!opts.tryEmptyAAD;\n  }\n\n  // Deterministic, versioned PAD AAD marker\n  /**\n   * Four-byte ASCII magic `\"PAD1\"` used at the start of the PAD AAD fragment.\n   * @internal\n   */\n  protected static readonly PAD_AAD_MAGIC = new Uint8Array([0x50, 0x41, 0x44, 0x31]); // \"PAD1\"\n\n  /**\n   * PAD AAD version byte. Increment if the PAD AAD layout changes.\n   * @internal\n   * @defaultValue `0x01`\n   */\n  protected static readonly PAD_AAD_VER   = 0x01;\n\n  /**\n   * Construct the base class with a {@link CryptoProvider}.\n   * @param p - Platform crypto provider (WebCrypto subtle + CSPRNG).\n   */\n  constructor(protected readonly p: CryptoProvider) {}\n\n  // ---------------- public, common API ----------------\n\n  /**\n   * Set (or clear) the padding scheme used for padding/unpadding.\n   *\n   * @param s - The {@link PaddingScheme} to use, or `null` to disable padding.\n   *\n   * @remarks\n   * - When set, `'auto'` policy resolves to `'require'`. When `null`, `'auto'`\n   *   resolves to `'forbid'`.\n   * - The scheme’s trailer bytes are authenticated because they are part of the\n   *   ciphertext payload covered by the AEAD tag.\n   */\n  public setPaddingScheme(s: PaddingScheme | null) { this.padding = s; }\n\n  /**\n   * Configure the high-level padding policy. See {@link PaddingAADMode}.\n   * @param mode - `'auto' | 'require' | 'forbid'`\n   */\n  public setPaddingAADMode(mode: PaddingAADMode) { this.padAADMode = mode; }\n\n  /**\n   * Set the alignment **declared** in the PAD AAD (one-byte field).\n   *\n   * @param n - Alignment in `[1..255]`.\n   * @throws {Error} If `n` is not an integer in range.\n   *\n   * @remarks\n   * - This value is informational and bound into the AAD. It does not alter\n   *   unpadding logic at decrypt-time (parsers validate the trailer\n   *   structure and ignore align).\n   */\n  public setPaddingAlign(n: number) {\n    if (!Number.isInteger(n) || n < 1 || n > 255) throw new Error('padAlign must be 1..255');\n    this.padAlign = n | 0;\n  }\n\n  /**\n   * Set the **header** AAD (caller-defined protocol header).\n   * @param aadData - Header bytes; an internal copy is stored.\n   *\n   * @remarks\n   * The final AAD used in AEAD operations is `headerAAD || padAAD`.\n   */\n  public setAAD(aadData: Uint8Array): void {\n    this.headerAAD = aadData && aadData.byteLength\n      ? new Uint8Array(aadData) // copy\n      : new Uint8Array(0);\n  }\n\n  /**\n   * Encrypt a plaintext chunk under the current policy and AAD configuration.\n   *\n   * @param plain - Caller-owned plaintext buffer. **Will be zeroed** after encryption.\n   * @returns Ciphertext including nonce/IV prefix and AEAD tag (format decided by subclass).\n   * @throws {Error} If `'require'` policy is in effect and no padding scheme is set.\n   * @throws {Error | DecryptionError} Propagates subclass errors if they surface during encrypt.\n   *\n   * @remarks\n   * - If the resolved policy is `'require'`, the method pads the plaintext\n   *   using {@link PaddingScheme.pad} before calling {@link encryptWithAAD}.\n   * - After encryption, this method zeroes `plain` and the padded copy (if any).\n   */\n  public async encryptChunk(plain: Uint8Array): Promise<Uint8Array> {\n    const effective = this.resolveMode();\n    let toEncrypt = plain;\n\n    if (effective === 'require') {\n      if (!this.padding) throw new Error('Padding required but no scheme set');\n      const rng = (n: number) => this.p.getRandomValues(new Uint8Array(n));\n      toEncrypt = this.padding.pad(plain, rng, this.padAlign);\n    }\n\n    const aad = this.composeAAD(effective);\n    const out = await this.encryptWithAAD(toEncrypt, aad);\n\n    // Zeroize plaintext (and padded variant if different)\n    plain.fill(0);\n    if (toEncrypt !== plain) toEncrypt.fill(0);\n\n    return out;\n  }\n\n  /**\n   * Decrypt a ciphertext chunk, enforcing the configured policy and (optionally)\n   * retrying legacy AADs for backward compatibility.\n   *\n   * @param data - Ciphertext buffer produced by the matching subclass (nonce/IV prefix + ct||tag).\n   * @returns The recovered plaintext (unpadded if policy and trailer permit).\n   * @throws {DecryptionError}\n   *  - If AEAD authentication fails for all eligible AADs,\n   *  - If `'require'` policy is selected and no trailer is present,\n   *  - If `'forbid'` policy is selected and a valid trailer is present,\n   *  - If `'require'` policy is selected but no padding scheme is configured.\n   *\n   * @remarks\n   * 1. The method first tries with **composed AAD** (`headerAAD || padAAD`).\n   * 2. If that fails and {@link allowLegacyAADFallback} is `true`, it retries with:\n   *    - header-only AAD (if present),\n   *    - and, if {@link tryEmptyAADOnLegacyFallback} is `true`, **empty AAD**.\n   * 3. When a legacy AAD succeeds, the enforcement policy is taken from\n   *    {@link legacyFallbackPolicy} (default `'auto'`).\n   */\n  public async decryptChunk(data: Uint8Array): Promise<Uint8Array> {\n    const effective = this.resolveMode();\n    const newAAD = this.composeAAD(effective);\n\n    // 1) Try new-format AAD first\n    try {\n      const plain = await this.decryptWithAAD(data, newAAD);\n      return this.enforcePolicyAfterDecrypt(plain, effective);\n    } catch (primaryErr) {\n      // 2) Optionally retry legacy AADs\n      if (!this.allowLegacyAADFallback) throw primaryErr;\n\n      const candidates: Uint8Array[] = [];\n      if (this.headerAAD.length) candidates.push(this.headerAAD);\n      if (this.tryEmptyAADOnLegacyFallback) candidates.push(new Uint8Array(0));\n\n      let lastErr: unknown = primaryErr;\n      for (const legacyAAD of candidates) {\n        try {\n          const plainLegacy = await this.decryptWithAAD(data, legacyAAD);\n          const legacyMode =\n            this.legacyFallbackPolicy === 'auto'\n              ? 'auto'\n              : (this.legacyFallbackPolicy as Exclude<PaddingAADMode, 'auto'>);\n          return this.enforcePolicyAfterDecrypt(plainLegacy, legacyMode);\n        } catch (e) {\n          lastErr = e;\n        }\n      }\n      throw lastErr;\n    }\n  }\n\n  /**\n   * Apply post-decrypt padding policy to the recovered plaintext.\n   *\n   * @param plain - AEAD-authenticated plaintext (may or may not contain a trailer).\n   * @param mode  - Policy to enforce (`'require' | 'forbid' | 'auto'`).\n   * @returns Either the original plaintext (no trailer stripped) or the trailer-stripped view.\n   * @throws {DecryptionError} When policy requirements are not met.\n   *\n   * @remarks\n   * - `'auto'`: strip trailer if present; otherwise pass through.\n   * - When no {@link PaddingScheme} is configured, only `'require'` can fail.\n   */\n  protected enforcePolicyAfterDecrypt(\n    plain: Uint8Array,\n    mode: PaddingAADMode\n  ): Uint8Array {\n    // No padding scheme configured? Only 'require' needs to error.\n    if (!this.padding) {\n      if (mode === 'require') throw new DecryptionError('Expected padding but no scheme configured');\n      return plain;\n    }\n\n    const { used, plain: unpadded } = this.padding.tryUnpad(plain);\n\n    if (mode === 'require') {\n      if (!used) throw new DecryptionError('Expected padding trailer not found');\n      return new Uint8Array(unpadded);\n    }\n    if (mode === 'forbid') {\n      if (used) throw new DecryptionError('Padding forbidden by policy');\n      return plain;\n    }\n\n    // 'auto' (legacy behavior): strip if present, else pass through\n    return used ? new Uint8Array(unpadded) : plain;\n  }\n\n  // ---------------- abstract hooks for subclasses ----------------\n\n  /**\n   * Import or set the cipher key. Subclasses decide the key format (e.g., CryptoKey\n   * for WebCrypto algorithms, exported raw key for libraries that require it).\n   * @param k - A {@link CryptoKey} handle provided by the caller.\n   */\n  public abstract setKey(k: CryptoKey): Promise<void>;\n\n  /**\n   * Zeroize in-memory key material and render the instance unusable until\n   * {@link setKey} is called again.\n   */\n  public abstract zeroKey(): void;\n\n  /**\n   * **Subclass hook:** perform AEAD encryption with the provided AAD.\n   *\n   * @param toEncrypt - Plaintext (may already include padding trailer).\n   * @param aad - Additional authenticated data to bind (headerAAD || padAAD).\n   * @returns Ciphertext in the subclass’s framing (e.g., `[IV | ct||tag]`).\n   */\n  protected abstract encryptWithAAD(toEncrypt: Uint8Array, aad: Uint8Array): Promise<Uint8Array>;\n\n  /**\n   * **Subclass hook:** perform AEAD decryption with the provided AAD.\n   *\n   * @param data - Ciphertext in the subclass’s framing.\n   * @param aad  - Additional authenticated data used at encryption-time.\n   * @returns The recovered plaintext on success.\n   * @throws {DecryptionError} On authentication failure or framing errors.\n   */\n  protected abstract decryptWithAAD(data: Uint8Array, aad: Uint8Array): Promise<Uint8Array>;\n\n  // ---------------- internals ----------------\n\n  /**\n   * Resolve `'auto'` into a concrete policy using the presence of a padding scheme:\n   * - if {@link padding} is set → `'require'`\n   * - otherwise → `'forbid'`\n   *\n   * @returns The concrete policy used for this operation.\n   */\n  protected resolveMode(): Exclude<PaddingAADMode, 'auto'> {\n    if (this.padAADMode === 'auto') {\n      return this.padding ? 'require' : 'forbid';\n    }\n    return this.padAADMode;\n  }\n\n  /**\n   * Build the deterministic PAD AAD fragment:\n   * `\"PAD1\" || VER(0x01) || MODE(1) || ALIGN(1)`\n   *\n   * @param mode - Concrete policy (`'require' | 'forbid'`).\n   * @returns A new {@link Uint8Array} containing the PAD AAD bytes.\n   * @internal\n   */\n  protected buildPadAAD(mode: Exclude<PaddingAADMode, 'auto'>): Uint8Array {\n    // MODE encoding: 0=require, 1=forbid\n    const modeByte = (mode === 'require') ? 0x00 : 0x01;\n\n    const out = new Uint8Array(\n      BaseAEADWithPadAAD.PAD_AAD_MAGIC.length + 1 /*ver*/ + 1 /*mode*/ + 1 /*align*/\n    );\n    let o = 0;\n    out.set(BaseAEADWithPadAAD.PAD_AAD_MAGIC, o); o += BaseAEADWithPadAAD.PAD_AAD_MAGIC.length;\n    out[o++] = BaseAEADWithPadAAD.PAD_AAD_VER & 0xff;\n    out[o++] = modeByte;\n    out[o++] = this.padAlign & 0xff;\n    return out;\n  }\n\n  /**\n   * Compose the final AAD as `headerAAD || padAAD`.\n   *\n   * @param mode - Concrete policy (`'require' | 'forbid'`).\n   * @returns A new {@link Uint8Array} with the concatenated AAD.\n   * @internal\n   */\n  protected composeAAD(mode: Exclude<PaddingAADMode, 'auto'>): Uint8Array {\n    const padAAD = this.buildPadAAD(mode);\n    if (!this.headerAAD.length) return padAAD;\n    const out = new Uint8Array(this.headerAAD.length + padAAD.length);\n    out.set(this.headerAAD, 0);\n    out.set(padAAD, this.headerAAD.length);\n    return out;\n  }\n}",
    "import { CryptoProvider } from '../../../providers/CryptoProvider.js';\nimport { DecryptionError } from '../../../errors/index.js';\nimport { BaseAEADWithPadAAD } from '../base/BaseAEADWithPadAAD.js';\nimport type { PaddingAwareEncryptionAlgorithm } from '../../../types/index.js';\n\n/**\n * AES-GCM encryption with padding policy binding via {@link BaseAEADWithPadAAD}.\n *\n * ## Framing\n * - Output ciphertext is framed as: `[ IV(12) | ciphertext || tag(16) ]`.\n * - IV is generated per-call via the provided {@link CryptoProvider.getRandomValues}.\n *\n * ## AAD and policy\n * - This subclass relies on the base class to compose the final AAD as\n *   `headerAAD || padAAD` and to enforce the padding policy (`require | forbid | auto`)\n *   after decryption.\n * - The `padAAD` fragment (see base class docs) cryptographically binds the\n *   \"is padding expected?\" decision into the AEAD.\n *\n * ## Zeroization\n * - Plaintext zeroization occurs in {@link BaseAEADWithPadAAD.encryptChunk}, not here.\n *\n * @remarks\n * Interoperates with WebCrypto’s `AES-GCM`. Keys are held as non-extractable\n * {@link CryptoKey} objects in this class by default.\n */\nexport class AESGCM extends BaseAEADWithPadAAD implements PaddingAwareEncryptionAlgorithm {\n  /** AES-GCM nonce/IV length in bytes. */\n  public static readonly IV_LENGTH: number = 12;\n\n  /** AES-GCM tag length in bytes. */\n  public static readonly TAG_LENGTH: number = 16;\n\n  /** Instance IV length (exposed for interface parity). */\n  public readonly IV_LENGTH = AESGCM.IV_LENGTH;\n\n  /** Instance tag length (exposed for interface parity). */\n  public readonly TAG_LENGTH = AESGCM.TAG_LENGTH;\n\n  /**\n   * Current WebCrypto key. When `null`, the instance cannot encrypt/decrypt.\n   * @internal\n   */\n  private key: CryptoKey | null = null;\n\n  /**\n   * Construct an AES-GCM instance backed by the given crypto provider.\n   * @param p - Platform crypto provider (WebCrypto subtle + CSPRNG).\n   */\n  constructor(p: CryptoProvider) { super(p); }\n\n  /**\n   * Set the WebCrypto key used for AES-GCM operations.\n   *\n   * @param k - A {@link CryptoKey} for `AES-GCM` with usages `encrypt` and `decrypt`.\n   * @returns Resolves once the key is associated with the instance.\n   *\n   * @remarks\n   * - The key is stored as-is (no re-wrapping).\n   * - Passing a key with insufficient usages will cause runtime errors on use.\n   */\n  public async setKey(k: CryptoKey) { this.key = k; }\n\n  /**\n   * Zeroize the in-memory key handle and make the instance unusable until\n   * {@link setKey} is called again.\n   *\n   * @remarks\n   * WebCrypto keys are non-extractable by default; this simply drops the handle.\n   */\n  public zeroKey() { this.key = null; }\n\n  /**\n   * **Subclass hook:** Perform AES-GCM encryption with the supplied AAD.\n   *\n   * @param toEncrypt - Plaintext (may already include a padding trailer; see base).\n   * @param aad - AAD produced by the base (`headerAAD || padAAD`).\n   * @returns Ciphertext framed as `[ IV(12) | ciphertext || tag(16) ]`.\n   *\n   * @remarks\n   * - IV is generated fresh using {@link CryptoProvider.getRandomValues}.\n   * - `additionalData` is always supplied and must match on decrypt for auth to succeed.\n   */\n  protected async encryptWithAAD(toEncrypt: Uint8Array, aad: Uint8Array): Promise<Uint8Array> {\n    const iv = this.p.getRandomValues(new Uint8Array(AESGCM.IV_LENGTH));\n    const params: AesGcmParams = { name: 'AES-GCM', iv: iv as BufferSource, additionalData: aad as BufferSource };\n\n    const cipherBuf = await this.p.subtle.encrypt(params, this.requireKey(), toEncrypt as BufferSource);\n    const cipher = new Uint8Array(cipherBuf);\n\n    const out = new Uint8Array(iv.length + cipher.length); // [iv | ciphertext+tag]\n    out.set(iv, 0);\n    out.set(cipher, iv.length);\n    return out;\n  }\n\n  /**\n   * **Subclass hook:** Perform AES-GCM decryption with the supplied AAD.\n   *\n   * @param data - Ciphertext framed as `[ IV(12) | ciphertext || tag(16) ]`.\n   * @param aad  - AAD that must exactly match what was used during encryption.\n   * @returns The recovered plaintext on success (padding policy enforced in base).\n   * @throws {DecryptionError}\n   *  - If the frame is too short,\n   *  - If AEAD authentication fails (AAD mismatch, wrong key/IV/tag),\n   *  - Or if WebCrypto rejects the parameters.\n   */\n  protected async decryptWithAAD(data: Uint8Array, aad: Uint8Array): Promise<Uint8Array> {\n    if (data.byteLength < AESGCM.IV_LENGTH + AESGCM.TAG_LENGTH) {\n      throw new DecryptionError('Invalid ciphertext: too short.');\n    }\n    const iv     = data.subarray(0, AESGCM.IV_LENGTH);\n    const cipher = data.subarray(AESGCM.IV_LENGTH);\n\n    const params: AesGcmParams = { name: 'AES-GCM', iv: iv as BufferSource, additionalData: aad as BufferSource };\n\n    try {\n      const buf = await this.p.subtle.decrypt(params, this.requireKey(), cipher as BufferSource);\n      return new Uint8Array(buf);\n    } catch {\n      throw new DecryptionError('Decryption failed: wrong passphrase or corrupted ciphertext');\n    }\n  }\n\n  /**\n   * Ensure a key is present; throw otherwise.\n   * @returns The current {@link CryptoKey}.\n   * @throws {Error} If no key has been set.\n   * @internal\n   */\n  private requireKey(): CryptoKey {\n    if (!this.key) throw new Error('Encryption key not set');\n    return this.key;\n  }\n}",
    "/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-ciphers - MIT License (c) 2023 Paul Miller (paulmillr.com) */\n/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */\nexport function isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n/** Asserts something is boolean. */\nexport function abool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`boolean expected, not ${b}`);\n}\n/** Asserts something is positive integer. */\nexport function anumber(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error('positive integer expected, got ' + n);\n}\n/** Asserts something is Uint8Array. */\nexport function abytes(value, length, title = '') {\n    const bytes = isBytes(value);\n    const len = value?.length;\n    const needsLen = length !== undefined;\n    if (!bytes || (needsLen && len !== length)) {\n        const prefix = title && `\"${title}\" `;\n        const ofLen = needsLen ? ` of length ${length}` : '';\n        const got = bytes ? `length=${len}` : `type=${typeof value}`;\n        throw new Error(prefix + 'expected Uint8Array' + ofLen + ', got ' + got);\n    }\n    return value;\n}\n/** Asserts a hash instance has not been destroyed / finished */\nexport function aexists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\n/** Asserts output is properly-sized byte array */\nexport function aoutput(out, instance) {\n    abytes(out, undefined, 'output');\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error('digestInto() expects output buffer of length at least ' + min);\n    }\n}\n/** Cast u8 / u16 / u32 to u8. */\nexport function u8(arr) {\n    return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** Cast u8 / u16 / u32 to u32. */\nexport function u32(arr) {\n    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n/** Zeroize a byte array. Warning: JS provides no guarantees. */\nexport function clean(...arrays) {\n    for (let i = 0; i < arrays.length; i++) {\n        arrays[i].fill(0);\n    }\n}\n/** Create DataView of an array for easy byte-level manipulation. */\nexport function createView(arr) {\n    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\nconst hasHexBuiltin = /* @__PURE__ */ (() => \n// @ts-ignore\ntypeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function')();\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * Convert byte array to hex string. Uses built-in function, when available.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return bytes.toHex();\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * Convert hex string to byte array. Uses built-in function, when available.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return Uint8Array.fromHex(hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n// Used in micro\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    return BigInt(hex === '' ? '0' : '0x' + hex); // Big Endian\n}\n// Used in ff1\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\n// Used in micro, ff1\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\n/**\n * Converts string to bytes using UTF8 encoding.\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('string expected');\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(new Uint8Array([97, 98, 99])) // 'abc'\n */\nexport function bytesToUtf8(bytes) {\n    return new TextDecoder().decode(bytes);\n}\n/**\n * Checks if two U8A use same underlying buffer and overlaps.\n * This is invalid and can corrupt data.\n */\nexport function overlapBytes(a, b) {\n    return (a.buffer === b.buffer && // best we can do, may fail with an obscure Proxy\n        a.byteOffset < b.byteOffset + b.byteLength && // a starts before b end\n        b.byteOffset < a.byteOffset + a.byteLength // b starts before a end\n    );\n}\n/**\n * If input and output overlap and input starts before output, we will overwrite end of input before\n * we start processing it, so this is not supported for most ciphers (except chacha/salse, which designed with this)\n */\nexport function complexOverlapBytes(input, output) {\n    // This is very cursed. It works somehow, but I'm completely unsure,\n    // reasoning about overlapping aligned windows is very hard.\n    if (overlapBytes(input, output) && input.byteOffset < output.byteOffset)\n        throw new Error('complex overlap of input and output is not supported');\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\nexport function checkOpts(defaults, opts) {\n    if (opts == null || typeof opts !== 'object')\n        throw new Error('options must be defined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\n/** Compares 2 uint8array-s in kinda constant time. */\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * Wraps a cipher: validates args, ensures encrypt() can only be called once.\n * @__NO_SIDE_EFFECTS__\n */\nexport const wrapCipher = (params, constructor) => {\n    function wrappedCipher(key, ...args) {\n        // Validate key\n        abytes(key, undefined, 'key');\n        // Big-Endian hardware is rare. Just in case someone still decides to run ciphers:\n        if (!isLE)\n            throw new Error('Non little-endian hardware is not yet supported');\n        // Validate nonce if nonceLength is present\n        if (params.nonceLength !== undefined) {\n            const nonce = args[0];\n            abytes(nonce, params.varSizeNonce ? undefined : params.nonceLength, 'nonce');\n        }\n        // Validate AAD if tagLength present\n        const tagl = params.tagLength;\n        if (tagl && args[1] !== undefined)\n            abytes(args[1], undefined, 'AAD');\n        const cipher = constructor(key, ...args);\n        const checkOutput = (fnLength, output) => {\n            if (output !== undefined) {\n                if (fnLength !== 2)\n                    throw new Error('cipher output not supported');\n                abytes(output, undefined, 'output');\n            }\n        };\n        // Create wrapped cipher with validation and single-use encryption\n        let called = false;\n        const wrCipher = {\n            encrypt(data, output) {\n                if (called)\n                    throw new Error('cannot encrypt() twice with same key + nonce');\n                called = true;\n                abytes(data);\n                checkOutput(cipher.encrypt.length, output);\n                return cipher.encrypt(data, output);\n            },\n            decrypt(data, output) {\n                abytes(data);\n                if (tagl && data.length < tagl)\n                    throw new Error('\"ciphertext\" expected length bigger than tagLength=' + tagl);\n                checkOutput(cipher.decrypt.length, output);\n                return cipher.decrypt(data, output);\n            },\n        };\n        return wrCipher;\n    }\n    Object.assign(wrappedCipher, params);\n    return wrappedCipher;\n};\n/**\n * By default, returns u8a of length.\n * When out is available, it checks it for validity and uses it.\n */\nexport function getOutput(expectedLength, out, onlyAligned = true) {\n    if (out === undefined)\n        return new Uint8Array(expectedLength);\n    if (out.length !== expectedLength)\n        throw new Error('\"output\" expected Uint8Array of length ' + expectedLength + ', got: ' + out.length);\n    if (onlyAligned && !isAligned32(out))\n        throw new Error('invalid output, must be aligned');\n    return out;\n}\nexport function u64Lengths(dataLength, aadLength, isLE) {\n    abool(isLE);\n    const num = new Uint8Array(16);\n    const view = createView(num);\n    view.setBigUint64(0, BigInt(aadLength), isLE);\n    view.setBigUint64(8, BigInt(dataLength), isLE);\n    return num;\n}\n// Is byte array aligned to 4 byte offset (u32)?\nexport function isAligned32(bytes) {\n    return bytes.byteOffset % 4 === 0;\n}\n// copy bytes to new u8a (aligned). Because Buffer.slice is broken.\nexport function copyBytes(bytes) {\n    return Uint8Array.from(bytes);\n}\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\nexport function randomBytes(bytesLength = 32) {\n    const cr = typeof globalThis === 'object' ? globalThis.crypto : null;\n    if (typeof cr?.getRandomValues !== 'function')\n        throw new Error('crypto.getRandomValues must be defined');\n    return cr.getRandomValues(new Uint8Array(bytesLength));\n}\n/**\n * Uses CSPRG for nonce, nonce injected in ciphertext.\n * For `encrypt`, a `nonceBytes`-length buffer is fetched from CSPRNG and\n * prepended to encrypted ciphertext. For `decrypt`, first `nonceBytes` of ciphertext\n * are treated as nonce.\n *\n * NOTE: Under the same key, using random nonces (e.g. `managedNonce`) with AES-GCM and ChaCha\n * should be limited to `2**23` (8M) messages to get a collision chance of `2**-50`. Stretching to  * `2**32` (4B) messages, chance would become `2**-33` - still negligible, but creeping up.\n * @example\n * const gcm = managedNonce(aes.gcm);\n * const ciphr = gcm(key).encrypt(data);\n * const plain = gcm(key).decrypt(ciph);\n */\nexport function managedNonce(fn, randomBytes_ = randomBytes) {\n    const { nonceLength } = fn;\n    anumber(nonceLength);\n    const addNonce = (nonce, ciphertext) => {\n        const out = concatBytes(nonce, ciphertext);\n        ciphertext.fill(0);\n        return out;\n    };\n    // NOTE: we cannot support DST here, it would be mistake:\n    // - we don't know how much dst length cipher requires\n    // - nonce may unalign dst and break everything\n    // - we create new u8a anyway (concatBytes)\n    // - previously we passed all args to cipher, but that was mistake!\n    return ((key, ...args) => ({\n        encrypt(plaintext) {\n            abytes(plaintext);\n            const nonce = randomBytes_(nonceLength);\n            const encrypted = fn(key, nonce, ...args).encrypt(plaintext);\n            // @ts-ignore\n            if (encrypted instanceof Promise)\n                return encrypted.then((ct) => addNonce(nonce, ct));\n            return addNonce(nonce, encrypted);\n        },\n        decrypt(ciphertext) {\n            abytes(ciphertext);\n            const nonce = ciphertext.subarray(0, nonceLength);\n            const decrypted = ciphertext.subarray(nonceLength);\n            return fn(key, nonce, ...args).decrypt(decrypted);\n        },\n    }));\n}\n//# sourceMappingURL=utils.js.map",
    "/**\n * Basic utils for ARX (add-rotate-xor) salsa and chacha ciphers.\n\nRFC8439 requires multi-step cipher stream, where\nauthKey starts with counter: 0, actual msg with counter: 1.\n\nFor this, we need a way to re-use nonce / counter:\n\n    const counter = new Uint8Array(4);\n    chacha(..., counter, ...); // counter is now 1\n    chacha(..., counter, ...); // counter is now 2\n\nThis is complicated:\n\n- 32-bit counters are enough, no need for 64-bit: max ArrayBuffer size in JS is 4GB\n- Original papers don't allow mutating counters\n- Counter overflow is undefined [^1]\n- Idea A: allow providing (nonce | counter) instead of just nonce, re-use it\n- Caveat: Cannot be re-used through all cases:\n- * chacha has (counter | nonce)\n- * xchacha has (nonce16 | counter | nonce16)\n- Idea B: separate nonce / counter and provide separate API for counter re-use\n- Caveat: there are different counter sizes depending on an algorithm.\n- salsa & chacha also differ in structures of key & sigma:\n  salsa20:      s[0] | k(4) | s[1] | nonce(2) | cnt(2) | s[2] | k(4) | s[3]\n  chacha:       s(4) | k(8) | cnt(1) | nonce(3)\n  chacha20orig: s(4) | k(8) | cnt(2) | nonce(2)\n- Idea C: helper method such as `setSalsaState(key, nonce, sigma, data)`\n- Caveat: we can't re-use counter array\n\nxchacha [^2] uses the subkey and remaining 8 byte nonce with ChaCha20 as normal\n(prefixed by 4 NUL bytes, since [RFC8439] specifies a 12-byte nonce).\n\n[^1]: https://mailarchive.ietf.org/arch/msg/cfrg/gsOnTJzcbgG6OqD8Sc0GO5aR_tU/\n[^2]: https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha#appendix-A.2\n\n * @module\n */\nimport { abool, abytes, anumber, checkOpts, clean, copyBytes, randomBytes, u32, } from \"./utils.js\";\n// Replaces `TextEncoder`, which is not available in all environments\nconst encodeStr = (str) => Uint8Array.from(str.split(''), (c) => c.charCodeAt(0));\nconst sigma16 = encodeStr('expand 16-byte k');\nconst sigma32 = encodeStr('expand 32-byte k');\nconst sigma16_32 = u32(sigma16);\nconst sigma32_32 = u32(sigma32);\n/** Rotate left. */\nexport function rotl(a, b) {\n    return (a << b) | (a >>> (32 - b));\n}\n// Is byte array aligned to 4 byte offset (u32)?\nfunction isAligned32(b) {\n    return b.byteOffset % 4 === 0;\n}\n// Salsa and Chacha block length is always 512-bit\nconst BLOCK_LEN = 64;\nconst BLOCK_LEN32 = 16;\n// new Uint32Array([2**32])   // => Uint32Array(1) [ 0 ]\n// new Uint32Array([2**32-1]) // => Uint32Array(1) [ 4294967295 ]\nconst MAX_COUNTER = 2 ** 32 - 1;\nconst U32_EMPTY = Uint32Array.of();\nfunction runCipher(core, sigma, key, nonce, data, output, counter, rounds) {\n    const len = data.length;\n    const block = new Uint8Array(BLOCK_LEN);\n    const b32 = u32(block);\n    // Make sure that buffers aligned to 4 bytes\n    const isAligned = isAligned32(data) && isAligned32(output);\n    const d32 = isAligned ? u32(data) : U32_EMPTY;\n    const o32 = isAligned ? u32(output) : U32_EMPTY;\n    for (let pos = 0; pos < len; counter++) {\n        core(sigma, key, nonce, b32, counter, rounds);\n        if (counter >= MAX_COUNTER)\n            throw new Error('arx: counter overflow');\n        const take = Math.min(BLOCK_LEN, len - pos);\n        // aligned to 4 bytes\n        if (isAligned && take === BLOCK_LEN) {\n            const pos32 = pos / 4;\n            if (pos % 4 !== 0)\n                throw new Error('arx: invalid block position');\n            for (let j = 0, posj; j < BLOCK_LEN32; j++) {\n                posj = pos32 + j;\n                o32[posj] = d32[posj] ^ b32[j];\n            }\n            pos += BLOCK_LEN;\n            continue;\n        }\n        for (let j = 0, posj; j < take; j++) {\n            posj = pos + j;\n            output[posj] = data[posj] ^ block[j];\n        }\n        pos += take;\n    }\n}\n/** Creates ARX-like (ChaCha, Salsa) cipher stream from core function. */\nexport function createCipher(core, opts) {\n    const { allowShortKeys, extendNonceFn, counterLength, counterRight, rounds } = checkOpts({ allowShortKeys: false, counterLength: 8, counterRight: false, rounds: 20 }, opts);\n    if (typeof core !== 'function')\n        throw new Error('core must be a function');\n    anumber(counterLength);\n    anumber(rounds);\n    abool(counterRight);\n    abool(allowShortKeys);\n    return (key, nonce, data, output, counter = 0) => {\n        abytes(key, undefined, 'key');\n        abytes(nonce, undefined, 'nonce');\n        abytes(data, undefined, 'data');\n        const len = data.length;\n        if (output === undefined)\n            output = new Uint8Array(len);\n        abytes(output, undefined, 'output');\n        anumber(counter);\n        if (counter < 0 || counter >= MAX_COUNTER)\n            throw new Error('arx: counter overflow');\n        if (output.length < len)\n            throw new Error(`arx: output (${output.length}) is shorter than data (${len})`);\n        const toClean = [];\n        // Key & sigma\n        // key=16 -> sigma16, k=key|key\n        // key=32 -> sigma32, k=key\n        let l = key.length;\n        let k;\n        let sigma;\n        if (l === 32) {\n            toClean.push((k = copyBytes(key)));\n            sigma = sigma32_32;\n        }\n        else if (l === 16 && allowShortKeys) {\n            k = new Uint8Array(32);\n            k.set(key);\n            k.set(key, 16);\n            sigma = sigma16_32;\n            toClean.push(k);\n        }\n        else {\n            abytes(key, 32, 'arx key');\n            throw new Error('invalid key size');\n            // throw new Error(`\"arx key\" expected Uint8Array of length 32, got length=${l}`);\n        }\n        // Nonce\n        // salsa20:      8   (8-byte counter)\n        // chacha20orig: 8   (8-byte counter)\n        // chacha20:     12  (4-byte counter)\n        // xsalsa20:     24  (16 -> hsalsa,  8 -> old nonce)\n        // xchacha20:    24  (16 -> hchacha, 8 -> old nonce)\n        // Align nonce to 4 bytes\n        if (!isAligned32(nonce))\n            toClean.push((nonce = copyBytes(nonce)));\n        const k32 = u32(k);\n        // hsalsa & hchacha: handle extended nonce\n        if (extendNonceFn) {\n            if (nonce.length !== 24)\n                throw new Error(`arx: extended nonce must be 24 bytes`);\n            extendNonceFn(sigma, k32, u32(nonce.subarray(0, 16)), k32);\n            nonce = nonce.subarray(16);\n        }\n        // Handle nonce counter\n        const nonceNcLen = 16 - counterLength;\n        if (nonceNcLen !== nonce.length)\n            throw new Error(`arx: nonce must be ${nonceNcLen} or 16 bytes`);\n        // Pad counter when nonce is 64 bit\n        if (nonceNcLen !== 12) {\n            const nc = new Uint8Array(12);\n            nc.set(nonce, counterRight ? 0 : 12 - nonce.length);\n            nonce = nc;\n            toClean.push(nonce);\n        }\n        const n32 = u32(nonce);\n        runCipher(core, sigma, k32, n32, data, output, counter, rounds);\n        clean(...toClean);\n        return output;\n    };\n}\n/** Internal class which wraps chacha20 or chacha8 to create CSPRNG. */\nexport class _XorStreamPRG {\n    blockLen;\n    keyLen;\n    nonceLen;\n    state;\n    buf;\n    key;\n    nonce;\n    pos;\n    ctr;\n    cipher;\n    constructor(cipher, blockLen, keyLen, nonceLen, seed) {\n        this.cipher = cipher;\n        this.blockLen = blockLen;\n        this.keyLen = keyLen;\n        this.nonceLen = nonceLen;\n        this.state = new Uint8Array(this.keyLen + this.nonceLen);\n        this.reseed(seed);\n        this.ctr = 0;\n        this.pos = this.blockLen;\n        this.buf = new Uint8Array(this.blockLen);\n        this.key = this.state.subarray(0, this.keyLen);\n        this.nonce = this.state.subarray(this.keyLen);\n    }\n    reseed(seed) {\n        abytes(seed);\n        if (!seed || seed.length === 0)\n            throw new Error('entropy required');\n        for (let i = 0; i < seed.length; i++)\n            this.state[i % this.state.length] ^= seed[i];\n        this.ctr = 0;\n        this.pos = this.blockLen;\n    }\n    addEntropy(seed) {\n        this.state.set(this.randomBytes(this.state.length));\n        this.reseed(seed);\n    }\n    randomBytes(len) {\n        anumber(len);\n        if (len === 0)\n            return new Uint8Array(0);\n        const out = new Uint8Array(len);\n        let outPos = 0;\n        // Leftovers\n        if (this.pos < this.blockLen) {\n            const take = Math.min(len, this.blockLen - this.pos);\n            out.set(this.buf.subarray(this.pos, this.pos + take), 0);\n            this.pos += take;\n            outPos += take;\n            if (outPos === len)\n                return out; // fast path\n        }\n        // Full blocks directly to out\n        const blocks = Math.floor((len - outPos) / this.blockLen);\n        if (blocks > 0) {\n            const blockBytes = blocks * this.blockLen;\n            const b = out.subarray(outPos, outPos + blockBytes);\n            this.cipher(this.key, this.nonce, b, b, this.ctr);\n            this.ctr += blocks;\n            outPos += blockBytes;\n        }\n        // Save leftovers\n        const left = len - outPos;\n        if (left > 0) {\n            this.buf.fill(0);\n            // NOTE: cipher will handle overflow\n            this.cipher(this.key, this.nonce, this.buf, this.buf, this.ctr++);\n            out.set(this.buf.subarray(0, left), outPos);\n            this.pos = left;\n        }\n        return out;\n    }\n    clone() {\n        return new _XorStreamPRG(this.cipher, this.blockLen, this.keyLen, this.nonceLen, this.randomBytes(this.state.length));\n    }\n    clean() {\n        this.pos = 0;\n        this.ctr = 0;\n        this.buf.fill(0);\n        this.state.fill(0);\n    }\n}\nexport const createPRG = (cipher, blockLen, keyLen, nonceLen) => {\n    return (seed = randomBytes(32)) => new _XorStreamPRG(cipher, blockLen, keyLen, nonceLen, seed);\n};\n//# sourceMappingURL=_arx.js.map",
    "/**\n * Poly1305 ([PDF](https://cr.yp.to/mac/poly1305-20050329.pdf),\n * [wiki](https://en.wikipedia.org/wiki/Poly1305))\n * is a fast and parallel secret-key message-authentication code suitable for\n * a wide variety of applications. It was standardized in\n * [RFC 8439](https://www.rfc-editor.org/rfc/rfc8439) and is now used in TLS 1.3.\n *\n * Polynomial MACs are not perfect for every situation:\n * they lack Random Key Robustness: the MAC can be forged, and can't be used in PAKE schemes.\n * See [invisible salamanders attack](https://keymaterial.net/2020/09/07/invisible-salamanders-in-aes-gcm-siv/).\n * To combat invisible salamanders, `hash(key)` can be included in ciphertext,\n * however, this would violate ciphertext indistinguishability:\n * an attacker would know which key was used - so `HKDF(key, i)`\n * could be used instead.\n *\n * Check out [original website](https://cr.yp.to/mac.html).\n * Based on Public Domain [poly1305-donna](https://github.com/floodyberry/poly1305-donna).\n * @module\n */\n// prettier-ignore\nimport { abytes, aexists, aoutput, bytesToHex, clean, concatBytes, copyBytes, hexToNumber, numberToBytesBE } from \"./utils.js\";\nfunction u8to16(a, i) {\n    return (a[i++] & 0xff) | ((a[i++] & 0xff) << 8);\n}\nfunction bytesToNumberLE(bytes) {\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n/** Small version of `poly1305` without loop unrolling. Unused, provided for auditability. */\nfunction poly1305_small(msg, key) {\n    abytes(msg);\n    abytes(key, 32, 'key');\n    const POW_2_130_5 = BigInt(2) ** BigInt(130) - BigInt(5); // 2^130-5\n    const POW_2_128_1 = BigInt(2) ** BigInt(128) - BigInt(1); // 2^128-1\n    const CLAMP_R = BigInt('0x0ffffffc0ffffffc0ffffffc0fffffff');\n    const r = bytesToNumberLE(key.subarray(0, 16)) & CLAMP_R;\n    const s = bytesToNumberLE(key.subarray(16));\n    // Process by 16 byte chunks\n    let acc = BigInt(0);\n    for (let i = 0; i < msg.length; i += 16) {\n        const m = msg.subarray(i, i + 16);\n        const n = bytesToNumberLE(m) | (BigInt(1) << BigInt(8 * m.length));\n        acc = ((acc + n) * r) % POW_2_130_5;\n    }\n    const res = (acc + s) & POW_2_128_1;\n    return numberToBytesBE(res, 16).reverse(); // LE\n}\n// Can be used to replace `computeTag` in chacha.ts. Unused, provided for auditability.\n// @ts-expect-error\nfunction poly1305_computeTag_small(authKey, lengths, ciphertext, AAD) {\n    const res = [];\n    const updatePadded2 = (msg) => {\n        res.push(msg);\n        const leftover = msg.length % 16;\n        if (leftover)\n            res.push(new Uint8Array(16).slice(leftover));\n    };\n    if (AAD)\n        updatePadded2(AAD);\n    updatePadded2(ciphertext);\n    res.push(lengths);\n    return poly1305_small(concatBytes(...res), authKey);\n}\n/** Poly1305 class. Prefer poly1305() function instead. */\nexport class Poly1305 {\n    blockLen = 16;\n    outputLen = 16;\n    buffer = new Uint8Array(16);\n    r = new Uint16Array(10); // Allocating 1 array with .subarray() here is slower than 3\n    h = new Uint16Array(10);\n    pad = new Uint16Array(8);\n    pos = 0;\n    finished = false;\n    // Can be speed-up using BigUint64Array, at the cost of complexity\n    constructor(key) {\n        key = copyBytes(abytes(key, 32, 'key'));\n        const t0 = u8to16(key, 0);\n        const t1 = u8to16(key, 2);\n        const t2 = u8to16(key, 4);\n        const t3 = u8to16(key, 6);\n        const t4 = u8to16(key, 8);\n        const t5 = u8to16(key, 10);\n        const t6 = u8to16(key, 12);\n        const t7 = u8to16(key, 14);\n        // https://github.com/floodyberry/poly1305-donna/blob/e6ad6e091d30d7f4ec2d4f978be1fcfcbce72781/poly1305-donna-16.h#L47\n        this.r[0] = t0 & 0x1fff;\n        this.r[1] = ((t0 >>> 13) | (t1 << 3)) & 0x1fff;\n        this.r[2] = ((t1 >>> 10) | (t2 << 6)) & 0x1f03;\n        this.r[3] = ((t2 >>> 7) | (t3 << 9)) & 0x1fff;\n        this.r[4] = ((t3 >>> 4) | (t4 << 12)) & 0x00ff;\n        this.r[5] = (t4 >>> 1) & 0x1ffe;\n        this.r[6] = ((t4 >>> 14) | (t5 << 2)) & 0x1fff;\n        this.r[7] = ((t5 >>> 11) | (t6 << 5)) & 0x1f81;\n        this.r[8] = ((t6 >>> 8) | (t7 << 8)) & 0x1fff;\n        this.r[9] = (t7 >>> 5) & 0x007f;\n        for (let i = 0; i < 8; i++)\n            this.pad[i] = u8to16(key, 16 + 2 * i);\n    }\n    process(data, offset, isLast = false) {\n        const hibit = isLast ? 0 : 1 << 11;\n        const { h, r } = this;\n        const r0 = r[0];\n        const r1 = r[1];\n        const r2 = r[2];\n        const r3 = r[3];\n        const r4 = r[4];\n        const r5 = r[5];\n        const r6 = r[6];\n        const r7 = r[7];\n        const r8 = r[8];\n        const r9 = r[9];\n        const t0 = u8to16(data, offset + 0);\n        const t1 = u8to16(data, offset + 2);\n        const t2 = u8to16(data, offset + 4);\n        const t3 = u8to16(data, offset + 6);\n        const t4 = u8to16(data, offset + 8);\n        const t5 = u8to16(data, offset + 10);\n        const t6 = u8to16(data, offset + 12);\n        const t7 = u8to16(data, offset + 14);\n        let h0 = h[0] + (t0 & 0x1fff);\n        let h1 = h[1] + (((t0 >>> 13) | (t1 << 3)) & 0x1fff);\n        let h2 = h[2] + (((t1 >>> 10) | (t2 << 6)) & 0x1fff);\n        let h3 = h[3] + (((t2 >>> 7) | (t3 << 9)) & 0x1fff);\n        let h4 = h[4] + (((t3 >>> 4) | (t4 << 12)) & 0x1fff);\n        let h5 = h[5] + ((t4 >>> 1) & 0x1fff);\n        let h6 = h[6] + (((t4 >>> 14) | (t5 << 2)) & 0x1fff);\n        let h7 = h[7] + (((t5 >>> 11) | (t6 << 5)) & 0x1fff);\n        let h8 = h[8] + (((t6 >>> 8) | (t7 << 8)) & 0x1fff);\n        let h9 = h[9] + ((t7 >>> 5) | hibit);\n        let c = 0;\n        let d0 = c + h0 * r0 + h1 * (5 * r9) + h2 * (5 * r8) + h3 * (5 * r7) + h4 * (5 * r6);\n        c = d0 >>> 13;\n        d0 &= 0x1fff;\n        d0 += h5 * (5 * r5) + h6 * (5 * r4) + h7 * (5 * r3) + h8 * (5 * r2) + h9 * (5 * r1);\n        c += d0 >>> 13;\n        d0 &= 0x1fff;\n        let d1 = c + h0 * r1 + h1 * r0 + h2 * (5 * r9) + h3 * (5 * r8) + h4 * (5 * r7);\n        c = d1 >>> 13;\n        d1 &= 0x1fff;\n        d1 += h5 * (5 * r6) + h6 * (5 * r5) + h7 * (5 * r4) + h8 * (5 * r3) + h9 * (5 * r2);\n        c += d1 >>> 13;\n        d1 &= 0x1fff;\n        let d2 = c + h0 * r2 + h1 * r1 + h2 * r0 + h3 * (5 * r9) + h4 * (5 * r8);\n        c = d2 >>> 13;\n        d2 &= 0x1fff;\n        d2 += h5 * (5 * r7) + h6 * (5 * r6) + h7 * (5 * r5) + h8 * (5 * r4) + h9 * (5 * r3);\n        c += d2 >>> 13;\n        d2 &= 0x1fff;\n        let d3 = c + h0 * r3 + h1 * r2 + h2 * r1 + h3 * r0 + h4 * (5 * r9);\n        c = d3 >>> 13;\n        d3 &= 0x1fff;\n        d3 += h5 * (5 * r8) + h6 * (5 * r7) + h7 * (5 * r6) + h8 * (5 * r5) + h9 * (5 * r4);\n        c += d3 >>> 13;\n        d3 &= 0x1fff;\n        let d4 = c + h0 * r4 + h1 * r3 + h2 * r2 + h3 * r1 + h4 * r0;\n        c = d4 >>> 13;\n        d4 &= 0x1fff;\n        d4 += h5 * (5 * r9) + h6 * (5 * r8) + h7 * (5 * r7) + h8 * (5 * r6) + h9 * (5 * r5);\n        c += d4 >>> 13;\n        d4 &= 0x1fff;\n        let d5 = c + h0 * r5 + h1 * r4 + h2 * r3 + h3 * r2 + h4 * r1;\n        c = d5 >>> 13;\n        d5 &= 0x1fff;\n        d5 += h5 * r0 + h6 * (5 * r9) + h7 * (5 * r8) + h8 * (5 * r7) + h9 * (5 * r6);\n        c += d5 >>> 13;\n        d5 &= 0x1fff;\n        let d6 = c + h0 * r6 + h1 * r5 + h2 * r4 + h3 * r3 + h4 * r2;\n        c = d6 >>> 13;\n        d6 &= 0x1fff;\n        d6 += h5 * r1 + h6 * r0 + h7 * (5 * r9) + h8 * (5 * r8) + h9 * (5 * r7);\n        c += d6 >>> 13;\n        d6 &= 0x1fff;\n        let d7 = c + h0 * r7 + h1 * r6 + h2 * r5 + h3 * r4 + h4 * r3;\n        c = d7 >>> 13;\n        d7 &= 0x1fff;\n        d7 += h5 * r2 + h6 * r1 + h7 * r0 + h8 * (5 * r9) + h9 * (5 * r8);\n        c += d7 >>> 13;\n        d7 &= 0x1fff;\n        let d8 = c + h0 * r8 + h1 * r7 + h2 * r6 + h3 * r5 + h4 * r4;\n        c = d8 >>> 13;\n        d8 &= 0x1fff;\n        d8 += h5 * r3 + h6 * r2 + h7 * r1 + h8 * r0 + h9 * (5 * r9);\n        c += d8 >>> 13;\n        d8 &= 0x1fff;\n        let d9 = c + h0 * r9 + h1 * r8 + h2 * r7 + h3 * r6 + h4 * r5;\n        c = d9 >>> 13;\n        d9 &= 0x1fff;\n        d9 += h5 * r4 + h6 * r3 + h7 * r2 + h8 * r1 + h9 * r0;\n        c += d9 >>> 13;\n        d9 &= 0x1fff;\n        c = ((c << 2) + c) | 0;\n        c = (c + d0) | 0;\n        d0 = c & 0x1fff;\n        c = c >>> 13;\n        d1 += c;\n        h[0] = d0;\n        h[1] = d1;\n        h[2] = d2;\n        h[3] = d3;\n        h[4] = d4;\n        h[5] = d5;\n        h[6] = d6;\n        h[7] = d7;\n        h[8] = d8;\n        h[9] = d9;\n    }\n    finalize() {\n        const { h, pad } = this;\n        const g = new Uint16Array(10);\n        let c = h[1] >>> 13;\n        h[1] &= 0x1fff;\n        for (let i = 2; i < 10; i++) {\n            h[i] += c;\n            c = h[i] >>> 13;\n            h[i] &= 0x1fff;\n        }\n        h[0] += c * 5;\n        c = h[0] >>> 13;\n        h[0] &= 0x1fff;\n        h[1] += c;\n        c = h[1] >>> 13;\n        h[1] &= 0x1fff;\n        h[2] += c;\n        g[0] = h[0] + 5;\n        c = g[0] >>> 13;\n        g[0] &= 0x1fff;\n        for (let i = 1; i < 10; i++) {\n            g[i] = h[i] + c;\n            c = g[i] >>> 13;\n            g[i] &= 0x1fff;\n        }\n        g[9] -= 1 << 13;\n        let mask = (c ^ 1) - 1;\n        for (let i = 0; i < 10; i++)\n            g[i] &= mask;\n        mask = ~mask;\n        for (let i = 0; i < 10; i++)\n            h[i] = (h[i] & mask) | g[i];\n        h[0] = (h[0] | (h[1] << 13)) & 0xffff;\n        h[1] = ((h[1] >>> 3) | (h[2] << 10)) & 0xffff;\n        h[2] = ((h[2] >>> 6) | (h[3] << 7)) & 0xffff;\n        h[3] = ((h[3] >>> 9) | (h[4] << 4)) & 0xffff;\n        h[4] = ((h[4] >>> 12) | (h[5] << 1) | (h[6] << 14)) & 0xffff;\n        h[5] = ((h[6] >>> 2) | (h[7] << 11)) & 0xffff;\n        h[6] = ((h[7] >>> 5) | (h[8] << 8)) & 0xffff;\n        h[7] = ((h[8] >>> 8) | (h[9] << 5)) & 0xffff;\n        let f = h[0] + pad[0];\n        h[0] = f & 0xffff;\n        for (let i = 1; i < 8; i++) {\n            f = (((h[i] + pad[i]) | 0) + (f >>> 16)) | 0;\n            h[i] = f & 0xffff;\n        }\n        clean(g);\n    }\n    update(data) {\n        aexists(this);\n        abytes(data);\n        data = copyBytes(data);\n        const { buffer, blockLen } = this;\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input\n            if (take === blockLen) {\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(data, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(buffer, 0, false);\n                this.pos = 0;\n            }\n        }\n        return this;\n    }\n    destroy() {\n        clean(this.h, this.r, this.buffer, this.pad);\n    }\n    digestInto(out) {\n        aexists(this);\n        aoutput(out, this);\n        this.finished = true;\n        const { buffer, h } = this;\n        let { pos } = this;\n        if (pos) {\n            buffer[pos++] = 1;\n            for (; pos < 16; pos++)\n                buffer[pos] = 0;\n            this.process(buffer, 0, true);\n        }\n        this.finalize();\n        let opos = 0;\n        for (let i = 0; i < 8; i++) {\n            out[opos++] = h[i] >>> 0;\n            out[opos++] = h[i] >>> 8;\n        }\n        return out;\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n}\nexport function wrapConstructorWithKey(hashCons) {\n    const hashC = (msg, key) => hashCons(key).update(msg).digest();\n    const tmp = hashCons(new Uint8Array(32)); // tmp array, used just once below\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (key) => hashCons(key);\n    return hashC;\n}\n/** Poly1305 MAC from RFC 8439. */\nexport const poly1305 = /** @__PURE__ */ (() => wrapConstructorWithKey((key) => new Poly1305(key)))();\n//# sourceMappingURL=_poly1305.js.map",
    "/**\n * ChaCha stream cipher, released\n * in 2008. Developed after Salsa20, ChaCha aims to increase diffusion per round.\n * It was standardized in [RFC 8439](https://www.rfc-editor.org/rfc/rfc8439) and\n * is now used in TLS 1.3.\n *\n * [XChaCha20](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha)\n * extended-nonce variant is also provided. Similar to XSalsa, it's safe to use with\n * randomly-generated nonces.\n *\n * Check out [PDF](http://cr.yp.to/chacha/chacha-20080128.pdf) and\n * [wiki](https://en.wikipedia.org/wiki/Salsa20) and\n * [website](https://cr.yp.to/chacha.html).\n *\n * @module\n */\nimport { createCipher, createPRG, rotl } from \"./_arx.js\";\nimport { poly1305 } from \"./_poly1305.js\";\nimport { abytes, clean, equalBytes, getOutput, u64Lengths, wrapCipher, } from \"./utils.js\";\n/**\n * ChaCha core function. It is implemented twice:\n * 1. Simple loop (chachaCore_small, hchacha_small)\n * 2. Unrolled loop (chachaCore, hchacha) - 4x faster, but larger & harder to read\n * The specific implementation is selected in `createCipher` below.\n */\n/** quarter-round */\n// prettier-ignore\nfunction chachaQR(x, a, b, c, d) {\n    x[a] = (x[a] + x[b]) | 0;\n    x[d] = rotl(x[d] ^ x[a], 16);\n    x[c] = (x[c] + x[d]) | 0;\n    x[b] = rotl(x[b] ^ x[c], 12);\n    x[a] = (x[a] + x[b]) | 0;\n    x[d] = rotl(x[d] ^ x[a], 8);\n    x[c] = (x[c] + x[d]) | 0;\n    x[b] = rotl(x[b] ^ x[c], 7);\n}\n/** single round */\nfunction chachaRound(x, rounds = 20) {\n    for (let r = 0; r < rounds; r += 2) {\n        chachaQR(x, 0, 4, 8, 12);\n        chachaQR(x, 1, 5, 9, 13);\n        chachaQR(x, 2, 6, 10, 14);\n        chachaQR(x, 3, 7, 11, 15);\n        chachaQR(x, 0, 5, 10, 15);\n        chachaQR(x, 1, 6, 11, 12);\n        chachaQR(x, 2, 7, 8, 13);\n        chachaQR(x, 3, 4, 9, 14);\n    }\n}\nconst ctmp = /* @__PURE__ */ new Uint32Array(16);\n/** Small version of chacha without loop unrolling. Unused, provided for auditability. */\n// prettier-ignore\nfunction chacha(s, k, i, out, isHChacha = true, rounds = 20) {\n    // Create initial array using common pattern\n    const y = Uint32Array.from([\n        s[0], s[1], s[2], s[3], // \"expa\"   \"nd 3\"  \"2-by\"  \"te k\"\n        k[0], k[1], k[2], k[3], // Key      Key     Key     Key\n        k[4], k[5], k[6], k[7], // Key      Key     Key     Key\n        i[0], i[1], i[2], i[3], // Counter  Counter Nonce   Nonce\n    ]);\n    const x = ctmp;\n    x.set(y);\n    chachaRound(x, rounds);\n    // hchacha extracts 8 specific bytes, chacha adds orig to result\n    if (isHChacha) {\n        const xindexes = [0, 1, 2, 3, 12, 13, 14, 15];\n        for (let i = 0; i < 8; i++)\n            out[i] = x[xindexes[i]];\n    }\n    else {\n        for (let i = 0; i < 16; i++)\n            out[i] = (y[i] + x[i]) | 0;\n    }\n}\n/** Identical to `chachaCore`. Unused. */\n// @ts-ignore\nconst chachaCore_small = (s, k, n, out, cnt, rounds) => chacha(s, k, Uint32Array.from([n[0], n[1], cnt, 0]), out, false, rounds);\n/** Identical to `hchacha`. Unused. */\n// @ts-ignore\nconst hchacha_small = chacha;\n/** Identical to `chachaCore_small`. Unused. */\n// prettier-ignore\nfunction chachaCore(s, k, n, out, cnt, rounds = 20) {\n    let y00 = s[0], y01 = s[1], y02 = s[2], y03 = s[3], // \"expa\"   \"nd 3\"  \"2-by\"  \"te k\"\n    y04 = k[0], y05 = k[1], y06 = k[2], y07 = k[3], // Key      Key     Key     Key\n    y08 = k[4], y09 = k[5], y10 = k[6], y11 = k[7], // Key      Key     Key     Key\n    y12 = cnt, y13 = n[0], y14 = n[1], y15 = n[2]; // Counter  Counter\tNonce   Nonce\n    // Save state to temporary variables\n    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;\n    for (let r = 0; r < rounds; r += 2) {\n        x00 = (x00 + x04) | 0;\n        x12 = rotl(x12 ^ x00, 16);\n        x08 = (x08 + x12) | 0;\n        x04 = rotl(x04 ^ x08, 12);\n        x00 = (x00 + x04) | 0;\n        x12 = rotl(x12 ^ x00, 8);\n        x08 = (x08 + x12) | 0;\n        x04 = rotl(x04 ^ x08, 7);\n        x01 = (x01 + x05) | 0;\n        x13 = rotl(x13 ^ x01, 16);\n        x09 = (x09 + x13) | 0;\n        x05 = rotl(x05 ^ x09, 12);\n        x01 = (x01 + x05) | 0;\n        x13 = rotl(x13 ^ x01, 8);\n        x09 = (x09 + x13) | 0;\n        x05 = rotl(x05 ^ x09, 7);\n        x02 = (x02 + x06) | 0;\n        x14 = rotl(x14 ^ x02, 16);\n        x10 = (x10 + x14) | 0;\n        x06 = rotl(x06 ^ x10, 12);\n        x02 = (x02 + x06) | 0;\n        x14 = rotl(x14 ^ x02, 8);\n        x10 = (x10 + x14) | 0;\n        x06 = rotl(x06 ^ x10, 7);\n        x03 = (x03 + x07) | 0;\n        x15 = rotl(x15 ^ x03, 16);\n        x11 = (x11 + x15) | 0;\n        x07 = rotl(x07 ^ x11, 12);\n        x03 = (x03 + x07) | 0;\n        x15 = rotl(x15 ^ x03, 8);\n        x11 = (x11 + x15) | 0;\n        x07 = rotl(x07 ^ x11, 7);\n        x00 = (x00 + x05) | 0;\n        x15 = rotl(x15 ^ x00, 16);\n        x10 = (x10 + x15) | 0;\n        x05 = rotl(x05 ^ x10, 12);\n        x00 = (x00 + x05) | 0;\n        x15 = rotl(x15 ^ x00, 8);\n        x10 = (x10 + x15) | 0;\n        x05 = rotl(x05 ^ x10, 7);\n        x01 = (x01 + x06) | 0;\n        x12 = rotl(x12 ^ x01, 16);\n        x11 = (x11 + x12) | 0;\n        x06 = rotl(x06 ^ x11, 12);\n        x01 = (x01 + x06) | 0;\n        x12 = rotl(x12 ^ x01, 8);\n        x11 = (x11 + x12) | 0;\n        x06 = rotl(x06 ^ x11, 7);\n        x02 = (x02 + x07) | 0;\n        x13 = rotl(x13 ^ x02, 16);\n        x08 = (x08 + x13) | 0;\n        x07 = rotl(x07 ^ x08, 12);\n        x02 = (x02 + x07) | 0;\n        x13 = rotl(x13 ^ x02, 8);\n        x08 = (x08 + x13) | 0;\n        x07 = rotl(x07 ^ x08, 7);\n        x03 = (x03 + x04) | 0;\n        x14 = rotl(x14 ^ x03, 16);\n        x09 = (x09 + x14) | 0;\n        x04 = rotl(x04 ^ x09, 12);\n        x03 = (x03 + x04) | 0;\n        x14 = rotl(x14 ^ x03, 8);\n        x09 = (x09 + x14) | 0;\n        x04 = rotl(x04 ^ x09, 7);\n    }\n    // Write output\n    let oi = 0;\n    out[oi++] = (y00 + x00) | 0;\n    out[oi++] = (y01 + x01) | 0;\n    out[oi++] = (y02 + x02) | 0;\n    out[oi++] = (y03 + x03) | 0;\n    out[oi++] = (y04 + x04) | 0;\n    out[oi++] = (y05 + x05) | 0;\n    out[oi++] = (y06 + x06) | 0;\n    out[oi++] = (y07 + x07) | 0;\n    out[oi++] = (y08 + x08) | 0;\n    out[oi++] = (y09 + x09) | 0;\n    out[oi++] = (y10 + x10) | 0;\n    out[oi++] = (y11 + x11) | 0;\n    out[oi++] = (y12 + x12) | 0;\n    out[oi++] = (y13 + x13) | 0;\n    out[oi++] = (y14 + x14) | 0;\n    out[oi++] = (y15 + x15) | 0;\n}\n/**\n * hchacha hashes key and nonce into key' and nonce' for xchacha20.\n * Identical to `hchacha_small`.\n * Need to find a way to merge it with `chachaCore` without 25% performance hit.\n */\n// prettier-ignore\nexport function hchacha(s, k, i, out) {\n    let x00 = s[0], x01 = s[1], x02 = s[2], x03 = s[3], x04 = k[0], x05 = k[1], x06 = k[2], x07 = k[3], x08 = k[4], x09 = k[5], x10 = k[6], x11 = k[7], x12 = i[0], x13 = i[1], x14 = i[2], x15 = i[3];\n    for (let r = 0; r < 20; r += 2) {\n        x00 = (x00 + x04) | 0;\n        x12 = rotl(x12 ^ x00, 16);\n        x08 = (x08 + x12) | 0;\n        x04 = rotl(x04 ^ x08, 12);\n        x00 = (x00 + x04) | 0;\n        x12 = rotl(x12 ^ x00, 8);\n        x08 = (x08 + x12) | 0;\n        x04 = rotl(x04 ^ x08, 7);\n        x01 = (x01 + x05) | 0;\n        x13 = rotl(x13 ^ x01, 16);\n        x09 = (x09 + x13) | 0;\n        x05 = rotl(x05 ^ x09, 12);\n        x01 = (x01 + x05) | 0;\n        x13 = rotl(x13 ^ x01, 8);\n        x09 = (x09 + x13) | 0;\n        x05 = rotl(x05 ^ x09, 7);\n        x02 = (x02 + x06) | 0;\n        x14 = rotl(x14 ^ x02, 16);\n        x10 = (x10 + x14) | 0;\n        x06 = rotl(x06 ^ x10, 12);\n        x02 = (x02 + x06) | 0;\n        x14 = rotl(x14 ^ x02, 8);\n        x10 = (x10 + x14) | 0;\n        x06 = rotl(x06 ^ x10, 7);\n        x03 = (x03 + x07) | 0;\n        x15 = rotl(x15 ^ x03, 16);\n        x11 = (x11 + x15) | 0;\n        x07 = rotl(x07 ^ x11, 12);\n        x03 = (x03 + x07) | 0;\n        x15 = rotl(x15 ^ x03, 8);\n        x11 = (x11 + x15) | 0;\n        x07 = rotl(x07 ^ x11, 7);\n        x00 = (x00 + x05) | 0;\n        x15 = rotl(x15 ^ x00, 16);\n        x10 = (x10 + x15) | 0;\n        x05 = rotl(x05 ^ x10, 12);\n        x00 = (x00 + x05) | 0;\n        x15 = rotl(x15 ^ x00, 8);\n        x10 = (x10 + x15) | 0;\n        x05 = rotl(x05 ^ x10, 7);\n        x01 = (x01 + x06) | 0;\n        x12 = rotl(x12 ^ x01, 16);\n        x11 = (x11 + x12) | 0;\n        x06 = rotl(x06 ^ x11, 12);\n        x01 = (x01 + x06) | 0;\n        x12 = rotl(x12 ^ x01, 8);\n        x11 = (x11 + x12) | 0;\n        x06 = rotl(x06 ^ x11, 7);\n        x02 = (x02 + x07) | 0;\n        x13 = rotl(x13 ^ x02, 16);\n        x08 = (x08 + x13) | 0;\n        x07 = rotl(x07 ^ x08, 12);\n        x02 = (x02 + x07) | 0;\n        x13 = rotl(x13 ^ x02, 8);\n        x08 = (x08 + x13) | 0;\n        x07 = rotl(x07 ^ x08, 7);\n        x03 = (x03 + x04) | 0;\n        x14 = rotl(x14 ^ x03, 16);\n        x09 = (x09 + x14) | 0;\n        x04 = rotl(x04 ^ x09, 12);\n        x03 = (x03 + x04) | 0;\n        x14 = rotl(x14 ^ x03, 8);\n        x09 = (x09 + x14) | 0;\n        x04 = rotl(x04 ^ x09, 7);\n    }\n    let oi = 0;\n    out[oi++] = x00;\n    out[oi++] = x01;\n    out[oi++] = x02;\n    out[oi++] = x03;\n    out[oi++] = x12;\n    out[oi++] = x13;\n    out[oi++] = x14;\n    out[oi++] = x15;\n}\n/** Original, non-RFC chacha20 from DJB. 8-byte nonce, 8-byte counter. */\nexport const chacha20orig = /* @__PURE__ */ createCipher(chachaCore, {\n    counterRight: false,\n    counterLength: 8,\n    allowShortKeys: true,\n});\n/**\n * ChaCha stream cipher. Conforms to RFC 8439 (IETF, TLS). 12-byte nonce, 4-byte counter.\n * With smaller nonce, it's not safe to make it random (CSPRNG), due to collision chance.\n */\nexport const chacha20 = /* @__PURE__ */ createCipher(chachaCore, {\n    counterRight: false,\n    counterLength: 4,\n    allowShortKeys: false,\n});\n/**\n * XChaCha eXtended-nonce ChaCha. With 24-byte nonce, it's safe to make it random (CSPRNG).\n * See [IRTF draft](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha).\n */\nexport const xchacha20 = /* @__PURE__ */ createCipher(chachaCore, {\n    counterRight: false,\n    counterLength: 8,\n    extendNonceFn: hchacha,\n    allowShortKeys: false,\n});\n/** Reduced 8-round chacha, described in original paper. */\nexport const chacha8 = /* @__PURE__ */ createCipher(chachaCore, {\n    counterRight: false,\n    counterLength: 4,\n    rounds: 8,\n});\n/** Reduced 12-round chacha, described in original paper. */\nexport const chacha12 = /* @__PURE__ */ createCipher(chachaCore, {\n    counterRight: false,\n    counterLength: 4,\n    rounds: 12,\n});\nconst ZEROS16 = /* @__PURE__ */ new Uint8Array(16);\n// Pad to digest size with zeros\nconst updatePadded = (h, msg) => {\n    h.update(msg);\n    const leftover = msg.length % 16;\n    if (leftover)\n        h.update(ZEROS16.subarray(leftover));\n};\nconst ZEROS32 = /* @__PURE__ */ new Uint8Array(32);\nfunction computeTag(fn, key, nonce, ciphertext, AAD) {\n    if (AAD !== undefined)\n        abytes(AAD, undefined, 'AAD');\n    const authKey = fn(key, nonce, ZEROS32);\n    const lengths = u64Lengths(ciphertext.length, AAD ? AAD.length : 0, true);\n    // Methods below can be replaced with\n    // return poly1305_computeTag_small(authKey, lengths, ciphertext, AAD)\n    const h = poly1305.create(authKey);\n    if (AAD)\n        updatePadded(h, AAD);\n    updatePadded(h, ciphertext);\n    h.update(lengths);\n    const res = h.digest();\n    clean(authKey, lengths);\n    return res;\n}\n/**\n * AEAD algorithm from RFC 8439.\n * Salsa20 and chacha (RFC 8439) use poly1305 differently.\n * We could have composed them, but it's hard because of authKey:\n * In salsa20, authKey changes position in salsa stream.\n * In chacha, authKey can't be computed inside computeTag, it modifies the counter.\n */\nexport const _poly1305_aead = (xorStream) => (key, nonce, AAD) => {\n    const tagLength = 16;\n    return {\n        encrypt(plaintext, output) {\n            const plength = plaintext.length;\n            output = getOutput(plength + tagLength, output, false);\n            output.set(plaintext);\n            const oPlain = output.subarray(0, -tagLength);\n            // Actual encryption\n            xorStream(key, nonce, oPlain, oPlain, 1);\n            const tag = computeTag(xorStream, key, nonce, oPlain, AAD);\n            output.set(tag, plength); // append tag\n            clean(tag);\n            return output;\n        },\n        decrypt(ciphertext, output) {\n            output = getOutput(ciphertext.length - tagLength, output, false);\n            const data = ciphertext.subarray(0, -tagLength);\n            const passedTag = ciphertext.subarray(-tagLength);\n            const tag = computeTag(xorStream, key, nonce, data, AAD);\n            if (!equalBytes(passedTag, tag))\n                throw new Error('invalid tag');\n            output.set(ciphertext.subarray(0, -tagLength));\n            // Actual decryption\n            xorStream(key, nonce, output, output, 1); // start stream with i=1\n            clean(tag);\n            return output;\n        },\n    };\n};\n/**\n * ChaCha20-Poly1305 from RFC 8439.\n *\n * Unsafe to use random nonces under the same key, due to collision chance.\n * Prefer XChaCha instead.\n */\nexport const chacha20poly1305 = /* @__PURE__ */ wrapCipher({ blockSize: 64, nonceLength: 12, tagLength: 16 }, _poly1305_aead(chacha20));\n/**\n * XChaCha20-Poly1305 extended-nonce chacha.\n *\n * Can be safely used with random nonces (CSPRNG).\n * See [IRTF draft](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha).\n */\nexport const xchacha20poly1305 = /* @__PURE__ */ wrapCipher({ blockSize: 64, nonceLength: 24, tagLength: 16 }, _poly1305_aead(xchacha20));\n/**\n * Chacha20 CSPRNG (cryptographically secure pseudorandom number generator).\n * It's best to limit usage to non-production, non-critical cases: for example, test-only.\n * Compatible with libtomcrypt. It does not have a specification, so unclear how secure it is.\n */\nexport const rngChacha20 = /* @__PURE__ */ createPRG(chacha20orig, 64, 32, 8);\n/**\n * Chacha20/8 CSPRNG (cryptographically secure pseudorandom number generator).\n * It's best to limit usage to non-production, non-critical cases: for example, test-only.\n * Faster than `rngChacha20`.\n */\nexport const rngChacha8 = /* @__PURE__ */ createPRG(chacha8, 64, 32, 12);\n//# sourceMappingURL=chacha.js.map",
    "import { xchacha20poly1305 } from '@noble/ciphers/chacha.js';\nimport { CryptoProvider }    from '../../../providers/CryptoProvider.js';\nimport { DecryptionError }   from '../../../errors/index.js';\nimport { BaseAEADWithPadAAD } from '../base/BaseAEADWithPadAAD.js';\nimport type { PaddingAwareEncryptionAlgorithm } from '../../../types/index.js';\n\n/**\n * XChaCha20-Poly1305 encryption with padding policy binding via {@link BaseAEADWithPadAAD}.\n *\n * ## Framing\n * - Output ciphertext is framed as: `[ NONCE(24) | ciphertext || tag(16) ]`.\n * - NONCE is generated per-call via the provided {@link CryptoProvider.getRandomValues}.\n *\n * ## AAD and policy\n * - Uses the base class to compose the final AAD (`headerAAD || padAAD`) and to enforce\n *   padding policy after decryption.\n * - The bound AAD ensures decrypt will fail if either header or pad settings differ.\n *\n * ## Key handling\n * - This class accepts a WebCrypto {@link CryptoKey} via {@link setKey}, then exports\n *   its raw bytes to feed `@noble/ciphers` (which requires a raw 32-byte key).\n * - The exported raw key is stored in memory; {@link zeroKey} overwrites and discards it.\n *\n * ## Zeroization\n * - Plaintext zeroization occurs in {@link BaseAEADWithPadAAD.encryptChunk}, not here.\n */\nexport class XChaCha20Poly1305 extends BaseAEADWithPadAAD implements PaddingAwareEncryptionAlgorithm {\n  /** XChaCha20-Poly1305 nonce length in bytes. */\n  public static readonly IV_LENGTH: number = 24;\n\n  /** Poly1305 tag length in bytes. */\n  public static readonly TAG_LENGTH: number = 16;\n\n  /** Instance nonce length (exposed for interface parity). */\n  public readonly IV_LENGTH = XChaCha20Poly1305.IV_LENGTH;\n\n  /** Instance tag length (exposed for interface parity). */\n  public readonly TAG_LENGTH = XChaCha20Poly1305.TAG_LENGTH;\n\n  /**\n   * Raw 32-byte key material for `@noble/ciphers`. When `null`, the instance\n   * cannot encrypt/decrypt.\n   * @internal\n   */\n  private key: Uint8Array | null = null;\n\n  /**\n   * Construct an XChaCha20-Poly1305 instance backed by the given crypto provider.\n   * @param p - Platform crypto provider (WebCrypto subtle + CSPRNG).\n   */\n  constructor(p: CryptoProvider) { super(p); }\n\n  /**\n   * Set the key using a WebCrypto {@link CryptoKey}.\n   *\n   * @param k - A WebCrypto secret key (e.g., imported/generated 256-bit secret).\n   * @returns Resolves once the key is exported and stored.\n   *\n   * @remarks\n   * - The key is **exported as raw bytes** using `subtle.exportKey('raw', k)` and kept\n   *   in memory for use with `@noble/ciphers`.\n   * - Ensure the provided key was created/imported with `extractable: true`.\n   */\n  public async setKey(k: CryptoKey) {\n    this.key = new Uint8Array(await this.p.subtle.exportKey('raw', k));\n  }\n\n  /**\n   * Overwrite and discard the in-memory raw key bytes.\n   * Subsequent calls to encrypt/decrypt will fail until {@link setKey}.\n   */\n  public zeroKey(): void {\n    if (this.key) this.key.fill(0);\n    this.key = null;\n  }\n\n  /**\n   * **Subclass hook:** Perform XChaCha20-Poly1305 encryption with the supplied AAD.\n   *\n   * @param toEncrypt - Plaintext (may already include a padding trailer; see base).\n   * @param aad - AAD produced by the base (`headerAAD || padAAD`).\n   * @returns Ciphertext framed as `[ NONCE(24) | ciphertext || tag(16) ]`.\n   *\n   * @remarks\n   * - NONCE is generated fresh using {@link CryptoProvider.getRandomValues}.\n   * - The same AAD must be provided at decrypt-time or authentication will fail.\n   */\n  protected async encryptWithAAD(toEncrypt: Uint8Array, aad: Uint8Array): Promise<Uint8Array> {\n    const nonce = this.p.getRandomValues(new Uint8Array(XChaCha20Poly1305.IV_LENGTH));\n    const cipher = xchacha20poly1305(this.requireRawKey(), nonce, aad);\n    const cipherAndTag = cipher.encrypt(toEncrypt);\n\n    const out = new Uint8Array(nonce.length + cipherAndTag.length); // [nonce | ct||tag]\n    out.set(nonce, 0);\n    out.set(cipherAndTag, nonce.length);\n    return out;\n  }\n\n  /**\n   * **Subclass hook:** Perform XChaCha20-Poly1305 decryption with the supplied AAD.\n   *\n   * @param data - Ciphertext framed as `[ NONCE(24) | ciphertext || tag(16) ]`.\n   * @param aad  - AAD that must exactly match what was used during encryption.\n   * @returns The recovered plaintext on success (padding policy enforced in base).\n   * @throws {DecryptionError}\n   *  - If the frame is too short,\n   *  - If authentication fails (AAD mismatch, wrong key/nonce/tag),\n   *  - Or if the underlying cipher rejects inputs.\n   */\n  protected async decryptWithAAD(data: Uint8Array, aad: Uint8Array): Promise<Uint8Array> {\n    if (data.byteLength < XChaCha20Poly1305.IV_LENGTH + XChaCha20Poly1305.TAG_LENGTH) {\n      throw new DecryptionError('Invalid ciphertext: too short.');\n    }\n    const nonce        = data.subarray(0, XChaCha20Poly1305.IV_LENGTH);\n    const cipherAndTag = data.subarray(XChaCha20Poly1305.IV_LENGTH);\n\n    const cipher = xchacha20poly1305(this.requireRawKey(), nonce, aad);\n    try {\n      return cipher.decrypt(cipherAndTag);\n    } catch {\n      throw new DecryptionError('Decryption failed: wrong passphrase or corrupted ciphertext');\n    }\n  }\n\n  /**\n   * Ensure a raw key is present; throw otherwise.\n   * @returns The raw 32-byte key.\n   * @throws {Error} If no key has been set.\n   * @internal\n   */\n  private requireRawKey(): Uint8Array {\n    if (!this.key) throw new Error('Encryption key not set');\n    return this.key;\n  }\n}",
    "// packages/core/src/algorithms/argon2.ts\n/**\n * Environment-agnostic Argon2-id wrapper.\n *  • Node / Bun  → native `argon2` addon (fastest)\n *  • Browser     → antelle/argon2-browser (WASM)\n */\n\nimport * as Argon2Browser from 'argon2-browser';\n\nimport { KeyDerivationError } from '../../errors/index.js';\n\n/** Minimal subset of tuning parameters we expose */\nexport interface Argon2Tuning {\n  time: number; // iterations\n  mem: number; // kibibytes\n  parallelism: number; // lanes\n}\n\nexport type ArgonHash = { hash: Uint8Array };\n\ntype Argon2HashResult = {\n  // raw bytes of the derived key\n  hash: Uint8Array;\n  // hex-encoded string of the derived key\n  hashHex: string;\n  // the full Argon2 encoded string (salt, params, hash)\n  encoded: string;\n};\n\n// needed for crossover tests\nasync function ensureArgon2ModuleHook(): Promise<void> {\n  // Only needed in non-browser test runners (Node/Bun). In real browsers we let the default work.\n  if (typeof window !== 'undefined') return;\n\n  if ((globalThis as any).loadArgon2WasmModule) return;\n\n  try {\n    const { createRequire } = await import('node:module');\n    const { readFile }      = await import('node:fs/promises');\n    const require           = createRequire(import.meta.url);\n\n    const jsPath   = require.resolve('argon2-browser/dist/argon2.js');\n    const wasmPath = require.resolve('argon2-browser/dist/argon2.wasm');\n\n    (globalThis as any).loadArgon2WasmModule = async () => {\n\n      const wasmBinary = new Uint8Array(await readFile(wasmPath));\n\n    \n      (globalThis as any).Module = {\n        wasmBinary,\n        // Also provide locateFile as a fallback for any internal lookups\n        locateFile: (p: string) =>\n          p === 'argon2.wasm' ? wasmPath : p,\n      };\n        return require(jsPath);\n    \n    };\n  } catch {\n  }\n}\n\n/**\n * Derive a 32-byte hash with Argon2-id.\n *\n * @param password   UTF-8 string or raw bytes\n * @param salt       random salt\n * @param opts       memory/time/parallelism\n * @param env        'node' (incl. Bun) or 'browser'\n */\nexport async function argon2id(\n  password: Uint8Array | string,\n  salt: Uint8Array,\n  opts: Argon2Tuning,\n  env: 'node' | 'browser'\n): Promise<ArgonHash> {\n  // ————————————————————————————  Node / Bun  ————————————————————————————\n  if (env === 'node') {\n    const argon2 = await import(\"@node-rs/argon2\");\n    const pwdBuf = typeof password === 'string' ? Buffer.from(password, 'utf8') : Buffer.from(password);\n\n\n    const hashString: string = await argon2.hash(pwdBuf, {\n      salt,\n      timeCost: opts.time,\n      memoryCost: opts.mem,\n      parallelism: opts.parallelism,\n      outputLen: 32,\n      algorithm: argon2.Algorithm.Argon2id,\n    });\n\n    const digestBase64 = hashString.split(\"$\").pop();\n    if (!digestBase64) throw new Error(\"Unexpected argon2 hash format\");\n\n    const raw = Buffer.from(digestBase64, \"base64\");\n    \n    pwdBuf.fill(0);\n\n    return { hash: new Uint8Array(raw) };\n  }\n\n  // ————————————————————————————  Browser  ————————————————————————————\n  if (env === 'browser') {\n    await ensureArgon2ModuleHook();\n\n    return Argon2Browser.hash({\n      pass: password,\n      salt: salt,\n      time: opts.time,\n      mem: opts.mem,\n      parallelism: opts.parallelism,\n      hashLen: 32,\n      type: Argon2Browser.ArgonType.Argon2id,\n    })\n      .then((result: Argon2HashResult) => {\n        if (!result || !result.hash) {\n          throw new KeyDerivationError('Failed to produce key derivation');\n        }\n        return { hash: result.hash };\n      })\n      .catch((error: unknown) => {\n        // Narrow the error to extract a message\n        const message = error instanceof Error ? error.message : typeof error === 'string' ? error : 'Unknown error';\n\n        throw new KeyDerivationError(`argon2-browser failure: ${message}`);\n      });\n  }\n\n  throw new Error(`Unsupported environment: ${env}`);\n}\n",
    "// packages/core/src/algorithms/kdf/Argon2.ts\nimport type { KeyDerivation } from '../../types/index.js';\nimport { argon2id, type Argon2Tuning } from './argon2-wrapper.js';\nimport type { CryptoProvider } from '../../providers/CryptoProvider.js';\n\n/**\n * Argon2-id Key-Derivation Function\n */\nexport class Argon2KDF implements KeyDerivation<'low' | 'middle' | 'high'> {\n  readonly name = 'argon2id';\n\n  constructor(\n    private readonly presets: Readonly<Record<'low' | 'middle' | 'high', Argon2Tuning>>,\n    private exportExtractable: boolean = false\n  ) {}\n\n  async derive(\n    passphrase: Uint8Array | string,\n    salt: Uint8Array,\n    difficulty: 'low' | 'middle' | 'high',\n    provider: CryptoProvider,\n  ): Promise<CryptoKey> {\n    const { hash } = await argon2id(\n      passphrase,\n      salt,\n      this.presets[difficulty],\n      provider.isNode ? 'node' : 'browser'\n    );\n    if (this.exportExtractable) {\n      return provider.subtle.importKey(\n        'raw',\n        hash as BufferSource,\n        { name: 'AES-GCM', length: 256 },\n        true,\n        ['encrypt', 'decrypt']\n      );\n    } else {\n      return provider.subtle.importKey(\n        'raw',\n        hash as BufferSource,\n        { name: 'AES-GCM', length: 256 },\n        false,\n        ['encrypt', 'decrypt']\n      );\n    }\n  }\n}",
    "import { SchemeRegistry } from './SchemeRegistry.js';\nimport { AESGCM } from '../algorithms/encryption/aes-gcm/AESGCM.js';\nimport { XChaCha20Poly1305 } from '../algorithms/encryption/xchacha20poly1305/XChaCha20-Poly1305.js';\nimport { Argon2KDF } from '../algorithms/kdf/Argon2.js';\nimport { SchemeDescriptor } from '../types/index.js';\n\nexport const DEFAULT_DIFFICULTIES = {\n  low   : { time:  5, mem:  64 * 1024, parallelism: 1 },\n  middle: { time: 20, mem:  64 * 1024, parallelism: 1 },\n  high  : { time: 40, mem:  64 * 1024, parallelism: 1 },\n} as const;\n\nconst v0: SchemeDescriptor = {\n  id: 0,\n  cipher: AESGCM,\n  kdf: new Argon2KDF(DEFAULT_DIFFICULTIES),\n  saltLengths: { low: 12, high: 16 },\n  difficulties: DEFAULT_DIFFICULTIES,\n  defaultChunkSize: 512 * 1024,\n};\n\nSchemeRegistry.register(v0);\n\nexport const VERSION_1_DIFFICULTIES = {\n  low   : { time:  5, mem:  64 * 1024, parallelism: 2 }, //Browser has no parallelism effect\n  middle: { time: 10, mem:  96 * 1024, parallelism: 4 }, //Browser has no parallelism effect\n  high  : { time: 20, mem:  96 * 1024, parallelism: 4 }, //Browser has no parallelism effect\n} as const;\n\nconst v1: SchemeDescriptor = {\n  id: 1,\n  cipher: XChaCha20Poly1305,\n  kdf: new Argon2KDF(VERSION_1_DIFFICULTIES, true),\n  saltLengths: { low: 12, high: 16 },\n  difficulties: VERSION_1_DIFFICULTIES,\n  defaultChunkSize: 512 * 1024,\n};\n\nSchemeRegistry.register(v1);\n\nexport type SaltStrength = 'low' | 'high';\nexport type Difficulty = keyof typeof DEFAULT_DIFFICULTIES;",
    "// packages/core/src/header/constants.ts\nexport const HEADER_START_BYTE = 0x01;          // magic",
    "import { EncodingError, DecodingError } from \"../errors/index.js\";\n\n/**\n * Tiny run-time test - are we really in Node/Bun\n */\nfunction isNodeLike(): boolean {\n  return (\n    typeof process !== 'undefined' &&\n    typeof process.versions === 'object' &&\n    // `browserify` & friends set `process.browser = true`\n    (process as any).browser !== true\n  );\n}\n\n/* ------------------------------------------------------------------ */\n\nexport function concat(...chunks: Uint8Array[]): Uint8Array {\n  const total = chunks.reduce((n, c) => n + c.byteLength, 0);\n  const out   = new Uint8Array(total);\n  let offset  = 0;\n  for (const c of chunks) {\n    out.set(c, offset);\n    offset += c.byteLength;\n  }\n  return out;\n}\n\n/* ----------  Base64 encode  --------------------------------------- */\nexport function base64Encode(...chunks: Uint8Array[]): string {\n  try {\n    const data = concat(...chunks);\n\n    if (isNodeLike()) {\n      // genuine Node / Bun\n      return Buffer.from(data).toString('base64');\n    }\n\n    // Browser (skip any injected Buffer polyfill)\n    let binary = '';\n    for (let i = 0; i < data.length; i++) binary += String.fromCharCode(data[i]);\n    return btoa(binary);\n  } catch {\n    const msg = \"Base64 Encoding Error\";\n    throw new EncodingError(msg);\n  }\n  \n}\n\n/* ----------  Base64 decode  --------------------------------------- */\nexport function base64Decode(b64: string): Uint8Array {\n  try {\n    if (!/^[A-Za-z0-9+/]+={0,2}$/.test(b64) || b64.length % 4 !== 0) {\n      throw new Error('Invalid Base64');\n    }\n    \n    if (isNodeLike()) {\n      return new Uint8Array((Buffer as any).from(b64, 'base64'));\n    }\n\n    const bin = atob(b64);\n    const out = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; i++) out[i] = bin.charCodeAt(i);\n    return out;\n  } catch {\n      throw new DecodingError(\n      `Invalid Base64: length=${b64.length}, content='${b64.slice(0,12)}…'`,\n    );\n  }  \n}\n\nexport function zeroizeString(ref: { value: string }): void {\n  /* Overwrite the existing string reference before GC kicks in */\n  const len  = ref.value.length;\n  const fill = new Array(len).fill('\\0').join('');\n  (ref as any).value = fill;            // in -place overwrite\n}",
    "// packages/core/src/header/encoder.ts\nimport { HEADER_START_BYTE } from './constants.js';\nimport { concat } from '../util/bytes.js';\nimport { EncryptionAlgorithm } from '../types/index.js';\n\nexport function encodeHeader(\n  scheme: number,\n  difficulty: 'low' | 'middle' | 'high',\n  saltStrength: 'low' | 'high',\n  salt: Uint8Array,\n  cipher?: EncryptionAlgorithm,\n): Uint8Array {\n  const diffMap = { low: 0, middle: 1, high: 2 } as const;\n  if (!(difficulty in diffMap))\n    throw new TypeError(`Unsupported difficulty: ${difficulty}`);\n\n  const diffCode = diffMap[difficulty];\n  const infoByte =\n    (scheme << 5) |\n    ((saltStrength === 'high' ? 1 : 0) << 2) |\n    diffCode;\n\n  const header = concat(new Uint8Array([HEADER_START_BYTE, infoByte]), salt);\n\n  // Make the *raw header bytes* the AAD for this message.\n  if (cipher) cipher.setAAD(header);\n\n  return header;\n}",
    "// packages/core/src/header/decoder.ts\nimport { HEADER_START_BYTE } from './constants.js';\nimport { SchemeRegistry }   from '../config/SchemeRegistry.js';\nimport { InvalidHeaderError, HeaderDecodeError } from '../errors/index.js';\nimport { EncryptionAlgorithm } from '../types/index.js';\n\nexport function decodeHeader(\n  buf: Uint8Array,\n  cipher?: EncryptionAlgorithm,\n) {\n  if (buf[0] !== HEADER_START_BYTE) {\n    throw new InvalidHeaderError('Invalid input format. The input is unknown.');\n  }\n\n  // Minimum header length guard (start + info + minimum salt len = 2 + 12)\n  if (buf.length < 2 + 12) {\n    throw new InvalidHeaderError('Invalid input format. Header too short.');\n  }\n\n  try {\n    const info          = buf[1];\n    const scheme        = info >> 5;\n    const saltStrength: 'low' | 'high' = ((info >> 2) & 1) ? 'high' : 'low';\n    const diffCode      = info & 0b11;\n    const difficulty    = (['low', 'middle', 'high'] as const)[diffCode];\n    const saltLen       = SchemeRegistry.get(scheme).saltLengths[saltStrength];\n    const headerLen     = 2 + saltLen;\n\n    if (buf.length < headerLen) {\n      throw new InvalidHeaderError('Invalid input format. Header truncated.');\n    }\n\n    // IMPORTANT: set AAD to the *exact* bytes that were (or will be) transmitted as header.\n    if (cipher) cipher.setAAD(buf.subarray(0, headerLen));\n\n    const salt          = buf.slice(2, 2 + saltLen);\n\n    return { scheme, difficulty, saltStrength, salt, headerLen };\n  } catch (err) {\n    throw new HeaderDecodeError(err instanceof Error ? err.message : String(err));\n  }\n}",
    "// packages/core/src/util/convert.ts\nexport async function ensureUint8Array(\n  src: Uint8Array | ArrayBuffer | Blob,\n): Promise<Uint8Array> {\n  if (src instanceof Uint8Array)  return src;\n  if (src instanceof ArrayBuffer) return new Uint8Array(src);\n  return new Uint8Array(await src.arrayBuffer());\n}",
    "// packages/core/src/util/frame.ts\nconst LEN_BYTES = 4 as const;\n\nexport function encodeFrameLen(n: number): Uint8Array {\n  const hdr = new Uint8Array(LEN_BYTES);\n  new DataView(hdr.buffer).setUint32(0, n, false);   // big‑endian\n  return hdr;\n}\n\nexport function decodeFrameLen(buf: Uint8Array, off = 0): number {\n  if (buf.length - off < LEN_BYTES) {\n    throw new RangeError('Not enough bytes for frame header');\n  }\n  return new DataView(buf.buffer, buf.byteOffset + off, LEN_BYTES)\n           .getUint32(0, false);\n}\nexport const FRAME_HEADER_BYTES = LEN_BYTES;",
    "// packages/core/src/stream/EncryptTransform.ts\nimport type { EncryptionAlgorithm } from '../types/index.js';\nimport { ensureUint8Array } from '../util/convert.js';\nimport { encodeFrameLen, FRAME_HEADER_BYTES } from '../util/frame.js';\n\n/**\n * TransformStream that:\n *   • collects plaintext into fixed‐size blocks\n *   • encrypts each block\n *   • emits: [4-byte length ‖ encryptedBlock]\n */\nexport class EncryptTransform {\n  private buffer = new Uint8Array(0);\n\n  constructor(\n    private readonly engine: EncryptionAlgorithm,\n    private readonly chunkSize = 512 * 1024,\n  ) {}\n\n  toTransformStream(): TransformStream<Uint8Array | ArrayBuffer | Blob, Uint8Array> {\n    return new TransformStream({\n      transform: async (chunk, ctl) => {\n        await this.transform(\n          await ensureUint8Array(chunk),\n          ctl,\n        );\n      },\n      flush: async ctl => this.flush(ctl),\n    });\n  }\n\n  private async transform(\n    bytes: Uint8Array,\n    ctl: TransformStreamDefaultController<Uint8Array>,\n  ) {\n    const HARD_LIMIT = 64 * 1024 * 1024; // 64 MiB safety\n    if (bytes.length > Math.min(this.chunkSize * 4, HARD_LIMIT)) {\n      throw new RangeError(\n        `Input block (${bytes.length} B) exceeds maximum allowed ` +\n        `${Math.min(this.chunkSize * 4, HARD_LIMIT)} B`,\n      );\n    }\n    const combined = new Uint8Array(this.buffer.length + bytes.length);\n    combined.set(this.buffer);\n    combined.set(bytes, this.buffer.length);\n\n    let offset = 0;\n    while (combined.length - offset >= this.chunkSize) {\n      const block = combined.slice(offset, offset + this.chunkSize);\n      offset += this.chunkSize;\n\n      const encrypted = await this.engine.encryptChunk(block);\n      const out = new Uint8Array(FRAME_HEADER_BYTES + encrypted.length);\n      out.set(encodeFrameLen(encrypted.length));\n      out.set(encrypted, FRAME_HEADER_BYTES);\n      ctl.enqueue(out);\n    \n    }\n\n    this.buffer = combined.slice(offset);\n  }\n\n  private async flush(ctl: TransformStreamDefaultController<Uint8Array>) {\n    if (!this.buffer.length) return;\n    const encrypted = await this.engine.encryptChunk(this.buffer);\n\n    const out = new Uint8Array(FRAME_HEADER_BYTES + encrypted.length);\n    out.set(encodeFrameLen(encrypted.length));\n    out.set(encrypted, FRAME_HEADER_BYTES);\n    ctl.enqueue(out);\n    \n    this.buffer = new Uint8Array(0);\n\n    this.engine.zeroKey();\n  }\n\n}",
    "// packages/core/src/stream/DecryptTransform.ts\nimport type { EncryptionAlgorithm } from '../types/index.js';\nimport { DecryptionError } from '../errors/index.js';\nimport { ensureUint8Array } from '../util/convert.js';\nimport { decodeFrameLen, FRAME_HEADER_BYTES } from '../util/frame.js';\n\n/**\n * Counterpart to EncryptTransform.\n * Streams framed ciphertext → raw plaintext.\n */\nexport class DecryptTransform {\n  private buffer = new Uint8Array(0);\n\n  constructor(\n    private readonly engine: EncryptionAlgorithm,\n    private readonly chunkSize = 512 * 1024,\n  ) {}\n\n  toTransformStream(): TransformStream<Uint8Array | ArrayBuffer | Blob, Uint8Array> {\n    return new TransformStream({\n      transform: async (chunk, ctl) => {\n        await this.transform(\n          await ensureUint8Array(chunk),\n          ctl,\n        );\n      },\n      flush: async ctl => this.flush(ctl),\n    });\n  }\n\n  private async transform(\n    bytes: Uint8Array,\n    ctl: TransformStreamDefaultController<Uint8Array>,\n  ) {\n    const combined = new Uint8Array(this.buffer.length + bytes.length);\n    combined.set(this.buffer);\n    combined.set(bytes, this.buffer.length);\n\n    let offset = 0;\n    while (true) {\n      if (combined.length - offset < FRAME_HEADER_BYTES) break;\n      const cipherLen = decodeFrameLen(combined, offset);\n      const HARD_LIMIT = 64 * 1024 * 1024; // 64 MiB\n      const minFrame   = this.engine.IV_LENGTH + this.engine.TAG_LENGTH;\n\n      if (!Number.isInteger(cipherLen) || cipherLen < minFrame || cipherLen > HARD_LIMIT) {\n        ctl.error(new DecryptionError(\n          `Invalid frame length ${cipherLen} (min=${minFrame}, max=${HARD_LIMIT})`\n        ));\n        return; // IMPORTANT: stop now that the stream is errored\n      }\n      \n      if (combined.length - offset - FRAME_HEADER_BYTES < cipherLen) break;\n      offset += FRAME_HEADER_BYTES;\n      const cipher = combined.slice(offset, offset + cipherLen);\n      offset += cipherLen;\n\n      try {\n        const plain = await this.engine.decryptChunk(cipher);\n        ctl.enqueue(plain);\n      } catch (err) {\n        ctl.error(\n          err instanceof DecryptionError\n            ? err\n            : new DecryptionError('Decryption failed: Wrong passphrase or corrupted ciphertext')\n        );\n        return;\n      }\n    }\n\n    this.buffer = combined.slice(offset);\n  }\n\n  private async flush(ctl: TransformStreamDefaultController<Uint8Array>) {\n    await this.transform(new Uint8Array(0), ctl);\n    const leftover = this.buffer.byteLength;\n    this.buffer = new Uint8Array(0);\n    this.engine.zeroKey();\n    if (leftover !== 0) {\n      ctl.error(new DecryptionError('Truncated ciphertext: incomplete final frame'));\n      return;\n    }\n  }\n}",
    "export async function collectStream(\n  rs: ReadableStream<Uint8Array>,\n  prefix?: Uint8Array,\n): Promise<Uint8Array> {\n  const reader = rs.getReader();\n  const chunks: Uint8Array[] = prefix && prefix.length ? [prefix] : [];\n  try {\n    while (true) {\n      const { value, done } = await reader.read();\n      if (done) break;\n      chunks.push(value);\n    }\n  } finally {\n    reader.releaseLock();\n  }\n  const total = chunks.reduce((n, c) => n + c.byteLength, 0);\n  const out   = new Uint8Array(total);\n  let offset  = 0;\n  for (const c of chunks) { out.set(c, offset); offset += c.byteLength; }\n  return out;\n}",
    "// packages/core/src/stream/StreamProcessor.ts\nimport { EncryptTransform } from './EncryptTransform.js';\nimport { DecryptTransform } from './DecryptTransform.js';\nimport type { PaddingAwareEncryptionAlgorithm } from '../types/index.js';\nimport { collectStream } from '../util/stream.js';\n\nexport class StreamProcessor {\n  constructor(\n    private readonly engine: PaddingAwareEncryptionAlgorithm,\n    private readonly chunkSize = 512 * 1024,\n  ) {}\n\n  encryptionStream(): TransformStream<Uint8Array, Uint8Array> {\n    const enc = new EncryptTransform(this.engine, this.chunkSize)\n                  .toTransformStream();\n    return {\n      writable: enc.writable,\n      readable: enc.readable,\n    } as TransformStream<Uint8Array, Uint8Array>;\n  }\n\n  decryptionStream(headerLen: number): TransformStream<Uint8Array, Uint8Array> {\n    let skip = headerLen;\n    const strip = new TransformStream<Uint8Array, Uint8Array>({\n      transform(chunk, ctl) {\n        if (skip === 0) {\n          ctl.enqueue(chunk);\n          return;\n        }\n        if (chunk.byteLength <= skip) {\n          skip -= chunk.byteLength;\n          return;\n        }\n        ctl.enqueue(chunk.slice(skip));\n        skip = 0;\n      },\n    });\n\n    const decryptTs = new DecryptTransform(this.engine, this.chunkSize)\n                        .toTransformStream();\n\n    return {\n      writable: strip.writable,\n      readable: strip.readable.pipeThrough(decryptTs),\n    } as TransformStream<Uint8Array, Uint8Array>;\n  }\n\n  async collect(\n    readable: ReadableStream<Uint8Array>,\n    transform: TransformStream<Uint8Array, Uint8Array>,\n    prefix: Uint8Array | null = null,\n  ): Promise<Uint8Array> {\n   return collectStream(readable.pipeThrough(transform), prefix ?? undefined);\n  }\n\n  public getEngine() : PaddingAwareEncryptionAlgorithm {\n    return this.engine;\n  }\n}",
    "// packages/core/src/util/convertible.ts\nimport { base64Encode } from './bytes.js';\n\nfunction wipe(buf?: Uint8Array | null) {\n  try { if (buf) buf.fill(0); } catch {}\n}\n\nfunction hexEncode(u8: Uint8Array): string {\n  let s = '';\n  for (let i = 0; i < u8.length; i++) {\n    const v = u8[i].toString(16).padStart(2, '0');\n    s += v;\n  }\n  return s;\n}\n\n/**\n * Normalizes user input (string or Uint8Array) to bytes.\n * You can clear() it to securely wipe the underlying memory.\n */\nexport class ConvertibleInput {\n  private bytes: Uint8Array;\n  private destroyed = false;\n\n  static from(input: string | Uint8Array | ConvertibleInput): ConvertibleInput {\n    if (input instanceof ConvertibleInput) return input;\n    if (typeof input === 'string') return new ConvertibleInput(new TextEncoder().encode(input));\n    if (input instanceof Uint8Array) return new ConvertibleInput(input);\n    throw new TypeError('ConvertibleInput: unsupported input type');\n  }\n\n  constructor(bytes: Uint8Array) { this.bytes = bytes; }\n\n  toUint8Array(): Uint8Array {\n    if (this.destroyed) throw new Error('ConvertibleInput: already cleared');\n    return this.bytes;\n  }\n\n  clear(): void {\n    if (!this.destroyed) {\n      wipe(this.bytes);\n      // keep an empty buffer so accidental reuse throws\n      this.bytes = new Uint8Array(0);\n      this.destroyed = true;\n    }\n  }\n}\n\n/**\n * Wraps bytes and exposes multiple views, with secure wiping via clear().\n * String(result) yields Base64 for convenience.\n */\nexport class ConvertibleOutput {\n  private bytes: Uint8Array;\n  private destroyed = false;\n\n  constructor(bytes: Uint8Array) {\n    this.bytes = bytes;\n  }\n\n  /** Raw bytes view (do NOT mutate). */\n  get uint8array(): Uint8Array {\n    if (this.destroyed) throw new Error('ConvertibleOutput: already cleared');\n    return this.bytes;\n  }\n\n  /** Base64 view of the underlying bytes. */\n  get base64(): string {\n    if (this.destroyed) throw new Error('ConvertibleOutput: already cleared');\n    return base64Encode(this.bytes);\n  }\n\n  /** Hex view of the underlying bytes. */\n  get hex(): string {\n    if (this.destroyed) throw new Error('ConvertibleOutput: already cleared');\n    return hexEncode(this.bytes);\n  }\n\n  /** UTF-8 decoded string (useful for decrypted text). */\n  get text(): string {\n    if (this.destroyed) throw new Error('ConvertibleOutput: already cleared');\n    return new TextDecoder().decode(this.bytes);\n  }\n\n  /** Securely zero the buffer. */\n  clear(): void {\n    if (!this.destroyed) {\n      wipe(this.bytes);\n      this.bytes = new Uint8Array(0);\n      this.destroyed = true;\n    }\n  }\n\n  /** For backwards ergonomics: String(output) -> Base64 */\n  toString(): string { return this.base64; }\n}",
    "/**\n * algorithms/padding/magic48ver-crc8.ts\n *\n * AEAD-friendly padding trailer with a 40-bit magic, 1-byte VERSION, and CRC-8 guard.\n *\n * Trailer layout (appended after plaintext and authenticated by the AEAD):\n *   P || RND[(k-8) bytes] || MAGIC40(5) || VER(1) || LEN(1 = k) || CRC8(1 over MAGIC40||VER||LEN)\n *\n * Where:\n *   - k ≥ 8 and (len(plain) + k) % align === 0\n *   - LEN stores the total trailer length k (1 byte)\n *   - CRC8 is CRC-8-ATM over the 7 bytes: MAGIC40(5) || VER(1) || LEN(1)\n *\n * Design notes:\n *   - VERSION is carried \"within the 48-bit magic scope\": the original 6th magic byte\n *     is now a dedicated VERSION byte. Structure size remains 8 bytes total.\n *   - The 40-bit magic + 8-bit CRC + LEN-range still makes legacy false positives\n *     extremely rare for practical scanning use under an AEAD.\n *   - CRC8 is not for integrity (the AEAD covers that); it's only to minimize\n *     incidental false positives when scanning legacy payloads.\n *   - Equality checks avoid early exits (best-effort constant-time in JS/TS).\n *\n * Defaults in this implementation:\n *   - Default alignment is 8 bytes (align = 8).\n *   - Structure size is 8 bytes (5 + 1 + 1 + 1), so the minimal k is 8.\n *   - With align = 8, the largest k needed is 15 → maxPad (for default align) = 15.\n *\n * Example:\n *   const padder = new Magic48VerCrc8Padding();\n *   const rng = (n: number) => crypto.getRandomValues(new Uint8Array(n));\n *   const padded = padder.pad(new Uint8Array([1,2,3]), rng); // align=8 by default\n *   const { used, plain } = padder.tryUnpad(padded); // used === true, plain === original\n */\n\nexport class MalformedPaddingError extends Error {\n  constructor(msg = 'Malformed padding') { super(msg); }\n}\n\n/** Generic interface for padding schemes used under an AEAD. */\nexport interface PaddingScheme {\n  /** Maximum possible trailer length for this scheme (bytes). */\n  readonly maxPad: number;\n\n  /**\n   * Pad `plain` to an alignment boundary. The RNG MUST be cryptographically secure.\n   * @param plain input (WILL NOT be modified)\n   * @param rng a function that returns `n` random bytes\n   * @param align block size to align to (default 8)\n   */\n  pad(plain: Uint8Array, rng: (n: number) => Uint8Array, align?: number): Uint8Array;\n\n  /**\n   * Try to remove padding. Returns `{ used:false, plain }` when no padding is present (legacy).\n   * Returns `{ used:true, plain }` when a valid trailer is removed.\n   * Invalid/garbled trailers return `{ used:false, plain }` (safe, non-throwing).\n   */\n  tryUnpad(padded: Uint8Array): { used: boolean; plain: Uint8Array };\n}\n\n/**\n * Padding with a 40-bit magic, 1-byte VERSION, and CRC-8-ATM guard.\n *\n * Properties:\n *   - Default align = 8\n *   - Structure size (MAGIC40 + VER + LEN + CRC8) = 8 bytes\n *\n * Security notes:\n *   - Assumes padding happens *inside* an AEAD (ciphertext+tag authenticate the trailer).\n *   - Equality checks are best-effort constant-time; true constant time cannot be\n *     guaranteed in JS engines but this avoids early exits and data-dependent loops.\n *\n * Fixes implemented:\n *   - Fix A (alignment foot-gun): `computeK` derives the maximum feasible `k` from `align`\n *     and the 1-byte LEN constraint (`k ≤ STRUCT_SIZE + align - 1 ≤ 255`). No power-of-two\n *     restriction; any positive integer `align` that fits LEN is accepted.\n *   - Fix C (VERSION const): Introduce a VERSION byte within the magic scope\n *     (MAGIC40(5) + VER(1) replaces the previous MAGIC48(6)).\n */\nexport class Magic48VerCrc8Padding implements PaddingScheme {\n  /** Total size of the trailer structure without the random prefix. */\n  private static readonly STRUCT_SIZE = 8; // MAGIC40(5) + VER(1) + LEN(1) + CRC8(1)\n\n  /** 40-bit magic constant (product/protocol unique). */\n  private static readonly MAGIC40 = new Uint8Array([0xC4, 0xE7, 0x9B, 0xAD, 0xF2]); \n\n  /** Version byte (placed immediately after MAGIC40). */\n  private static readonly VERSION = 0x29;\n\n  /** CRC-8-ATM polynomial. */\n  private static readonly CRC8_POLY = 0x07;\n\n  /**\n   * For the *default* align=8, the largest k needed is STRUCT_SIZE + 8 - 1 = 15.\n   * This property reflects the default configuration for API parity with earlier versions.\n   * (Internally, we derive the feasible k from the provided `align` at runtime.)\n   */\n  public readonly maxPad = Magic48VerCrc8Padding.STRUCT_SIZE + 8 - 1;\n\n  // ---------------------------------------------------------------------------\n  // Constant-time helpers (best-effort in JS/TS)\n  // ---------------------------------------------------------------------------\n\n  /** Constant-time equality for single byte. */\n  private static ctEqU8(a: number, b: number): boolean {\n    const x = ((a | 0) ^ (b | 0)) & 0xff;\n    return x === 0;\n  }\n\n  /**\n   * Constant-time equality for fixed-length byte arrays (no early exit).\n   * Assumes a.length === b.length.\n   */\n  private static ctEqFixedLen(a: Uint8Array, b: Uint8Array): boolean {\n    let diff = 0;\n    const len = a.length;\n    for (let i = 0; i < len; i++) {\n      diff |= (a[i] ^ b[i]);\n    }\n    return diff === 0;\n  }\n\n  // ---------------------------------------------------------------------------\n  // CRC-8-ATM over given buffer\n  // ---------------------------------------------------------------------------\n\n  /** Compute CRC-8-ATM (poly 0x07) over `buf`. */\n  private crc8(buf: Uint8Array): number {\n    let crc = 0x00;\n    for (let i = 0; i < buf.length; i++) {\n      crc ^= buf[i] & 0xff;\n      for (let b = 0; b < 8; b++) {\n        crc = (crc & 0x80) ? ((crc << 1) ^ Magic48VerCrc8Padding.CRC8_POLY) : (crc << 1);\n        crc &= 0xff;\n      }\n    }\n    return crc & 0xff;\n  }\n\n  // ---------------------------------------------------------------------------\n  // Padding length computation (Fix A)\n  // ---------------------------------------------------------------------------\n\n  /**\n   * Compute trailer length k such that:\n   *   - (len + k) % align === 0\n   *   - k >= STRUCT_SIZE (8 bytes)\n   *   - k <= STRUCT_SIZE + align - 1\n   *   - STRUCT_SIZE + align - 1 <= 255  (so LEN fits in one byte)\n   *\n   * @throws {MalformedPaddingError} if constraints cannot be satisfied.\n   */\n  private computeK(len: number, align: number): number {\n    const s = Magic48VerCrc8Padding.STRUCT_SIZE;\n\n    if (!Number.isInteger(align) || align < 1) {\n      throw new MalformedPaddingError('align must be a positive integer');\n    }\n    if (s + align - 1 > 0xff) {\n      throw new MalformedPaddingError('align too large for 1-byte LEN');\n    }\n\n    const maxPadForAlign = s + align - 1;\n\n    // Minimal padding to reach the next multiple of `align`\n    let k = (align - (len % align)) % align;\n    if (k === 0) k = align;           // prefer a full block\n    while (k < s) k += align;         // ensure room for structure\n\n    if (k > maxPadForAlign) {\n      throw new MalformedPaddingError('Cannot satisfy alignment within 1-byte LEN');\n    }\n    return k; // guarantees: (len + k) % align == 0 and k ∈ [STRUCT_SIZE .. s+align-1]\n  }\n\n  // ---------------------------------------------------------------------------\n  // Public API\n  // ---------------------------------------------------------------------------\n\n  /**\n   * Pad `plain` so that its length plus trailer is aligned to `align` (default 8).\n   *\n   * @param plain The plaintext to pad (will not be modified).\n   * @param rng   A CSPRNG: given n, returns exactly n random bytes.\n   * @param align Alignment boundary (positive integer). Default: 8.\n   * @returns A new Uint8Array containing `plain || trailer`.\n   * @throws  {MalformedPaddingError} if RNG misbehaves or constraints cannot be met.\n   */\n  public pad(plain: Uint8Array, rng: (n: number) => Uint8Array, align = 8): Uint8Array {\n    const s = Magic48VerCrc8Padding.STRUCT_SIZE;\n    const k = this.computeK(plain.length, align);\n    const rndLen = k - s;\n\n    const out = new Uint8Array(plain.length + k);\n    out.set(plain, 0);\n\n    if (rndLen > 0) {\n      const rnd = rng(rndLen);\n      if (!rnd || rnd.length !== rndLen) {\n        throw new MalformedPaddingError('rng returned wrong length');\n      }\n      out.set(rnd, plain.length);\n    }\n\n    // Append MAGIC40 (5 bytes)\n    const base = plain.length + rndLen;\n    out.set(Magic48VerCrc8Padding.MAGIC40, base + 0);\n\n    // VERSION byte\n    out[base + 5] = Magic48VerCrc8Padding.VERSION & 0xff;\n\n    // LEN byte (store k directly)\n    out[base + 6] = k & 0xff;\n\n    // CRC8 over MAGIC40 || VER || LEN  (7-byte input)\n    const crcInput = new Uint8Array(7);\n    crcInput.set(Magic48VerCrc8Padding.MAGIC40, 0); // 0..4\n    crcInput[5] = Magic48VerCrc8Padding.VERSION & 0xff;\n    crcInput[6] = k & 0xff;\n    out[base + 7] = this.crc8(crcInput);\n\n    return out;\n  }\n\n  /**\n   * Attempt to remove a MAGIC40+VERSION+CRC8 trailer in a misuse-resistant way.\n   *\n   * Behavior:\n   *   - If no valid trailer is present (legacy/plain input), returns `{ used:false, plain: padded }`.\n   *   - If a valid trailer is present, returns `{ used:true, plain }` with the trailer removed.\n   *   - Malformed/garbled trailers **do not throw**; they return `{ used:false, plain: padded }`.\n   *\n   * NOTE: This parser does not assume a particular `align` at unpad-time. It enforces\n   *       minimal structure size and validates MAGIC40, VERSION, and CRC8. Given AEAD\n   *       authentication, this remains safe while avoiding an align/foot-gun at parse time.\n   *\n   * @param padded Plaintext+trailer (already AEAD-verified ciphertext payload).\n   * @returns `{ used, plain }` as described.\n   */\n  public tryUnpad(padded: Uint8Array): { used: boolean; plain: Uint8Array } {\n    const s = Magic48VerCrc8Padding.STRUCT_SIZE;\n    const fail = () => ({ used: false, plain: padded });\n\n    // Need at least the 8-byte structure to even attempt parsing.\n    if (padded.length < s) return fail();\n\n    const end = padded.length;\n    const crc = padded[end - 1] & 0xff;\n    const lenByte = padded[end - 2] & 0xff;\n    const verByte = padded[end - 3] & 0xff;\n\n    // Bounds & range checks (public values; safe to branch on).\n    // Minimal structure; cap by available bytes. (No maxPad check: align unknown here.)\n    if (lenByte < s || lenByte > padded.length) return fail();\n\n    // MAGIC40 is 5 bytes starting at end - STRUCT_SIZE\n    const magicStart = end - s;\n    const magic = padded.subarray(magicStart, magicStart + 5);\n\n    // Constant-time MAGIC compare.\n    const magicOk = Magic48VerCrc8Padding.ctEqFixedLen(magic, Magic48VerCrc8Padding.MAGIC40);\n    if (!magicOk) return fail();\n\n    // Constant-time VERSION compare.\n    if (!Magic48VerCrc8Padding.ctEqU8(verByte, Magic48VerCrc8Padding.VERSION & 0xff)) return fail();\n\n    // CRC8 over MAGIC40 || VER || LEN  (7-byte input)\n    const crcInput = new Uint8Array(7);\n    crcInput.set(Magic48VerCrc8Padding.MAGIC40, 0);\n    crcInput[5] = verByte;\n    crcInput[6] = lenByte;\n    const expected = this.crc8(crcInput);\n\n    // Constant-time single-byte compare for CRC.\n    if (!Magic48VerCrc8Padding.ctEqU8(expected, crc)) return fail();\n\n    // Success: strip trailer\n    return { used: true, plain: padded.subarray(0, end - lenByte) };\n  }\n}",
    "/* ------------------------------------------------------------------\n   Tiny, dependency-free logger with five verbosity levels\n   ------------------------------------------------------------------ */\nexport type Verbosity = 0 | 1 | 2 | 3 | 4;  // 0 = errors only … 4 = trace\n\nexport interface Logger {\n  level : Verbosity;\n  log(lvl: Verbosity, msg: string): void;\n}\n\nexport function createLogger(\n  level: Verbosity = 0,\n  sink : (msg: string) => void = console.info,\n): Logger {\n  return {\n    level,\n    log(lvl, msg) {\n      if (lvl <= level) sink(`${lvl}| ${msg}`);\n    },\n  };\n}\n/*\nconst loggerSingleton: Logger = createLogger();\n\nexport default loggerSingleton;*/",
    "export function assertSliceBounds(\n  total: number,\n  offset: number,\n  len: number,\n): void {\n  if (offset < 0 || len < 0 || offset + len > total) {\n    throw new RangeError('read() slice exceeds data bounds');\n  }\n}",
    "// packages/core/src/util/ByteSource.ts\nimport { base64Decode } from './bytes.js';\nimport { assertSliceBounds } from './range.js';\n\n/**\n * Unified, zero -copy accessor for Blob | Uint8Array | Base64 -encoded string.\n * Slices are read on -demand so even multi -gigabyte Blobs are handled\n * without loading them fully into memory.\n */\nexport class ByteSource {\n  #buf: Uint8Array | null = null;\n\n  constructor(private readonly src: Blob | Uint8Array | string) {}\n\n  /** Total byte length of the underlying data */\n  get length(): number {\n    if (this.src instanceof Uint8Array) return this.src.byteLength;\n    if (this.src instanceof Blob)      return this.src.size;\n    /* string (Base64) */\n    return this.ensureUint8().byteLength;\n  }\n\n  /**\n   * Read a slice *[offset, offset + len)* as Uint8Array.\n   * The returned view is a fresh copy — safe to mutate by caller.\n   */\n  async read(offset: number, len: number): Promise<Uint8Array> {\n    assertSliceBounds(this.length, offset, len);\n\n    // Uint8Array path - cheapest\n    if (this.src instanceof Uint8Array) {\n      return this.src.slice(offset, offset + len);\n    }\n\n    // Blob path - use slice() + arrayBuffer()\n    if (this.src instanceof Blob) {\n      const buf = await this.src.slice(offset, offset + len).arrayBuffer();\n      return new Uint8Array(buf);\n    }\n\n    // Base64 text path - decode once then reuse\n    return this.ensureUint8().slice(offset, offset + len);\n  }\n\n  /* ------------------------------------------------------------------ */\n  /*  Internals                                                          */\n  /* ------------------------------------------------------------------ */\n\n  /** lazily decode Base64 text into a Uint8Array (once) */\n  private ensureUint8(): Uint8Array {\n    if (!this.#buf) {\n      this.#buf = base64Decode(this.src as string);\n    }\n    return this.#buf;\n  }\n}\n\n// packages/core/src/util/bytes.ts\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\nimport { promises as fs } from 'fs';\n\n/* -------------------------------------------------- */\n/*  Generic random-access reader interface            */\n/* -------------------------------------------------- */\nexport interface RandomAccessSource {\n  /** total length in bytes */\n  readonly length: number;\n\n  /**\n   * return a copy of bytes `[offset, offset + len)`\n   * throws if the range is out of bounds\n   */\n  read(offset: number, len: number): Promise<Uint8Array>;\n}\n\n/* -------------------------------------------------- */\n/*  File-backed implementation (streams on-demand)    */\n/* -------------------------------------------------- */\nexport class FileByteSource implements RandomAccessSource {\n  private constructor(\n    private readonly fd: fs.FileHandle,\n    public readonly length: number,\n  ) {}\n\n  static async open(path: string): Promise<FileByteSource> {\n    const fd   = await fs.open(path, 'r');\n    const stat = await fd.stat();\n    return new FileByteSource(fd, stat.size);\n  }\n\n  async read(offset: number, len: number): Promise<Uint8Array> {\n    assertSliceBounds(this.length, offset, len);\n    const buf = Buffer.allocUnsafe(len);\n    await this.fd.read(buf, 0, len, offset);\n    return new Uint8Array(buf);\n  }\n\n  /** always call after finishing */\n  async close(): Promise<void> {\n    await this.fd.close();\n  }\n}",
    "import { SchemeRegistry } from '../config/SchemeRegistry.js';\nimport type {\n  SchemeDescriptor,\n  PaddingAwareEncryptionAlgorithm,\n  KeyDerivation,\n  Secret,\n} from '../types/index.js';\nimport type { CryptoProvider } from '../providers/CryptoProvider.js';\nimport { KeyDerivationError } from '../errors/index.js';\nimport { zeroizeString } from '../util/bytes.js';\n\nexport interface Engine {\n  desc      : SchemeDescriptor;\n  cipher    : PaddingAwareEncryptionAlgorithm;\n  kdf       : KeyDerivation;\n  chunkSize : number;\n  provider  : CryptoProvider;\n}\n\nconst _cache = new WeakMap<CryptoProvider, Map<number, Engine>>();\n\nexport class EngineManager {\n  static getEngine(provider: CryptoProvider, schemeId: number): Engine {\n    let perProvider = _cache.get(provider);\n    if (!perProvider) {\n      perProvider = new Map<number, Engine>();\n      _cache.set(provider, perProvider);\n    }\n\n    let engine = perProvider.get(schemeId);\n    if (engine) return engine;\n\n    const desc   = SchemeRegistry.get(schemeId);\n    engine = {\n      desc,\n      cipher   : new desc.cipher(provider),\n      kdf      : desc.kdf,\n      chunkSize: desc.defaultChunkSize,\n      provider,\n    };\n    perProvider.set(schemeId, engine);\n    return engine;\n  }\n\n  static async deriveKey(\n    engine : Engine,\n    secret   : Secret,\n    salt   : Uint8Array,\n    difficulty: 'low' | 'middle' | 'high',\n  ): Promise<void> {\n    try {\n      const key = await engine.kdf.derive(secret.value, salt, difficulty, engine.provider);\n      \n      await engine.cipher.setKey(key);\n    } catch (err) {\n      const msg = err instanceof Error ? err.message : String(err);\n      throw new KeyDerivationError(msg);\n    } finally {\n       zeroizeString(secret);\n    }\n  }\n}",
    "// packages/core/src/index.ts\n\nimport './config/defaults.js';\n\nimport type { CryptoProvider }    from './providers/CryptoProvider.js';\nimport { Difficulty, SaltStrength } from './config/defaults.js';\nimport { encodeHeader }             from './header/encoder.js';\nimport { decodeHeader }             from './header/decoder.js';\nimport {\n  KeyDerivation,\n  PaddingAwareEncryptionAlgorithm,\n  SchemeDescriptor,\n  Secret\n} from './types/index.js';\nimport { SchemeRegistry }          from './config/SchemeRegistry.js';\nimport { base64Encode, base64Decode, concat, zeroizeString } from './util/bytes.js';\nimport { StreamProcessor }          from './stream/StreamProcessor.js';\nimport { EncryptTransform }         from './stream/EncryptTransform.js';\nimport { DecryptTransform }         from './stream/DecryptTransform.js';\nimport { ConvertibleInput, ConvertibleOutput } from './util/Convertible.js';\n\nimport { Magic48VerCrc8Padding } from './algorithms/padding/magic48ver-crc8.js';\n\nimport {\n  createLogger,\n  type Verbosity,\n  type Logger,\n} from './util/logger.js';\nimport {  ByteSource, RandomAccessSource }          from './util/ByteSource.js';\n\nimport {\n  EncryptionError,\n  DecryptionError,\n  KeyDerivationError,\n  InvalidHeaderError,\n  HeaderDecodeError,\n  DecodingError,\n} from './errors/index.js';\n\nimport { EngineManager, type Engine } from './engine/EngineManager.js';\n\n// ────────────────────────────────────────────────────────────────────────────\n//  Public configuration shape\n// ────────────────────────────────────────────────────────────────────────────\n\n/**\n * Result of creating an encryption stream: header and paired streams.\n */\nexport interface EncryptStreamResult {\n  /** Binary header for decryption initialization */\n  header   : Uint8Array;\n  /** Writable stream to feed plaintext data */\n  writable : WritableStream<Uint8Array>;\n  /** Readable stream emitting ciphertext data */\n  readable : ReadableStream<Uint8Array>;\n}\n\n/**\n * Options for configuring Cryptit instance behavior.\n */\nexport interface CryptitOptions {\n  /** Version identifier (0…7) to use; defaults to registry's current scheme */\n  scheme?      : number;\n  /** Salt strength: 'low' | 'middle' | 'high'; defaults to descriptor's default */\n  saltStrength? : SaltStrength;\n  /** Key derivation difficulty; defaults to descriptor's default */\n  difficulty?   : Difficulty;\n  /** Chunk size for streaming operations; defaults to descriptor's default */\n  chunkSize?    : number;\n  /** Enable legacy file and text decryption version < 1.0.0 */\n  acceptUnauthenticatedHeader?    : boolean;\n  /** Verbosity level 0-4 for logging (0 = errors only) */\n  verbose?      : Verbosity;\n  /** Optional custom logger callback (receives formatted messages) */\n  logger?       : (msg: string) => void;\n}\n\nexport type DecodeDataResult =\n  | { isChunked: true;  chunks: { chunkSize: number; count: number; totalPayload: number } }\n  | { isChunked: false; payloadLength: number; params: { iv: Uint8Array; ivLength: number; tag: Uint8Array; tagLength: number } };\n\n/**\n * Cryptit provides high-level encryption/decryption utilities for text, blobs, and streams.\n */\nexport class Cryptit {\n  // — runtime-mutable --------------------------------------------------------\n  private v          : SchemeDescriptor;\n  private cipher     : PaddingAwareEncryptionAlgorithm;\n  private kdf        : KeyDerivation;\n  private chunkSize  : number;\n  private stream     : StreamProcessor;\n\n  private acceptUnauthenticatedHeader: boolean;\n\n  private difficulty   : Difficulty;\n  private saltStrength : SaltStrength;\n\n  private readonly engines = new Map<number, Engine>();\n\n  // — diagnostics ------------------------------------------------------------\n  private readonly log : Logger;\n\n  /**\n   * Create a new Cryptit instance with given crypto provider and options.\n   * @param provider - Underlying crypto provider for key derivation and randomness\n   * @param opt - Configuration options for scheme, salts, logging, etc.\n   */\n  constructor(\n    private readonly provider: CryptoProvider,\n    opt: CryptitOptions = {},\n  ) {\n    this.v          = SchemeRegistry.get(opt.scheme ?? SchemeRegistry.current.id);\n    this.cipher     = new this.v.cipher(provider);\n    this.kdf        = this.v.kdf;\n    this.chunkSize  = this.setChunkSize(opt.chunkSize ?? this.v.defaultChunkSize);\n    this.stream     = new StreamProcessor(this.cipher, this.chunkSize);\n\n    this.difficulty     = opt.difficulty   ?? 'middle';\n    this.saltStrength   = opt.saltStrength ?? 'high';\n    this.acceptUnauthenticatedHeader = opt.acceptUnauthenticatedHeader ?? false;\n\n    this.log = createLogger(opt.verbose ?? 0, opt.logger);\n  }\n\n  // ════════════════════════════════════════════════════════════════════════\n  //  PUBLIC  - Informational helpers\n  // ════════════════════════════════════════════════════════════════════════\n\n  /**\n   * Check if the provided input contains a valid Cryptit header.\n   * @param input - Base64 string, Uint8Array, or Blob to inspect\n   * @returns True if header is valid; false otherwise\n   */\n  static async isEncrypted(\n    input: string | Uint8Array | Blob,\n  ): Promise<boolean> {\n    try {\n      await Cryptit.peekHeader(input);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Decode the Cryptit header and return readable metadata.\n   * @param input - Base64 string, Uint8Array, or Blob to decode\n   * @returns Object containing scheme, difficulty, salt (Base64), and salt length\n   */\n  static async decodeHeader(\n    input: string | Uint8Array | Blob,\n  ): Promise<{ scheme: number; difficulty: Difficulty; salt: string; saltBytes: Uint8Array; saltLength: number; }> {\n    const hdr = await Cryptit.peekHeader(input);\n    const h   = decodeHeader(hdr);\n    return {\n      scheme    : h.scheme,\n      difficulty : h.difficulty,\n      salt       : base64Encode(h.salt),\n      saltBytes  : h.salt,\n      saltLength : h.salt.byteLength,\n    };\n  } \n  \n  /**\n   * @deprecated Use `decodeHeader()` instead.\n   */\n  static async headerDecode(\n    input: string | Uint8Array | Blob,\n  ): Promise<{ scheme: number; difficulty: Difficulty; salt: string; saltBytes: Uint8Array; saltLength: number; }> {\n    return this.decodeHeader(input);\n  }\n\n static isRandomAccessSource(\n  input: unknown\n): input is RandomAccessSource {\n  return (\n    typeof input === \"object\" &&\n    input !== null &&\n    typeof (input as RandomAccessSource).read === \"function\"\n  );\n}\n\n  /**\n   * Inspect an encrypted payload and return either:\n   *   • chunk statistics for file/stream containers\n   *   • IV/nonce & auth -tag for single -block text containers\n   *\n   * This never decrypts - it merely parses framing bytes.\n   */\n  static async decodeData(\n    input: string | Uint8Array | Blob | RandomAccessSource,\n  ): Promise<DecodeDataResult> {\n    /* normalise into a random-access reader */\n    const src: RandomAccessSource = Cryptit.isRandomAccessSource(input)\n    ? input\n    : new ByteSource(input);\n    const headSlice = await src.read(0, Math.min(256, src.length));\n    const header    = await Cryptit.peekHeader(headSlice);\n    const { scheme, headerLen } = decodeHeader(header);\n\n    // Compute remaining payload length\n    const totalLen  = src.length;\n    const remain = totalLen - headerLen;\n    if (remain < 0) {\n      throw new InvalidHeaderError('Payload underflow');\n    }\n    if (remain === 0) {\n      return {\n        isChunked: true,\n        chunks: { chunkSize: 0, count: 0, totalPayload: 0 },\n      } as const;\n    }\n\n    const first4   = await src.read(headerLen, 4);\n    const firstLen = new DataView(first4.buffer, first4.byteOffset, 4)\n                      .getUint32(0, false);\n\n    const looksChunked =\n      firstLen + 4 <= remain &&  // frame fits\n      firstLen >= 28;            // at least IV+tag\n\n    if (looksChunked) {\n      // ——— chunked container ———\n      const chunkSize = firstLen;\n      let offset = headerLen;\n      let count  = 0;\n      let total  = 0;\n\n      while (offset + 4 <= totalLen) {\n        const lenBuf = await src.read(offset, 4);\n        const len    = new DataView(lenBuf.buffer, lenBuf.byteOffset, 4)\n                          .getUint32(0, false);\n        if (len === 0 || offset + 4 + len > totalLen) break;\n        count++;\n        total += len;\n        offset += 4 + len;\n      }\n\n      return {\n        isChunked: true,\n        chunks: {\n          chunkSize,\n          count,\n          totalPayload: total,\n        },\n      };\n    }\n\n    // ——— single-block (encryptText) ———\n    const cipher      = await src.read(headerLen, remain);\n    const ivLen       = SchemeRegistry.get(scheme).cipher.IV_LENGTH;\n    const tagLen      = SchemeRegistry.get(scheme).cipher.TAG_LENGTH\n    if (cipher.length < ivLen + tagLen) {\n      throw new InvalidHeaderError('Ciphertext too short for IV & tag');\n    }\n\n    return {\n      isChunked: false,\n      // full encrypted payload length (including IV+cipher+tag)\n      payloadLength: remain - ivLen - tagLen,\n      params: {\n        iv : cipher.slice(0, ivLen),\n        ivLength: ivLen,\n        tag: cipher.slice(cipher.length - tagLen),\n        tagLength: tagLen,\n      },\n    } as const;\n  }\n\n  // ════════════════════════════════════════════════════════════════════════\n  //  PUBLIC  - Setters / getters for run-time flexibility\n  // ════════════════════════════════════════════════════════════════════════\n  /** Set the difficulty level for subsequent operations. */\n  setDifficulty(d: Difficulty): void         { this.difficulty = d; }\n  /** Get the current difficulty setting. */\n  getDifficulty(): Difficulty                { return this.difficulty; }\n\n  /**\n   * Change the protocol scheme for future encrypt/decrypt actions.\n   * @param id - Version identifier from registry\n   */\n  setScheme(id: number): void {\n    this.v       = SchemeRegistry.get(id);\n    this.cipher  = new this.v.cipher(this.provider);\n    this.kdf     = this.v.kdf;\n    this.stream  = new StreamProcessor(this.cipher, this.chunkSize);\n  }\n  /** Retrieve the active protocol scheme identifier. */\n  getScheme(): number                       { return this.v.id; }\n\n  /**\n   * Override salt length (in bytes) for new operations (advanced use).\n   * @param len - Custom salt length in bytes\n   */\n  setSaltDifficulty(d: SaltStrength): void           { this.saltStrength = d; }\n  /** Get the effective salt length for the current strength. */\n  getSaltDifficulty(): SaltStrength {\n    return this.saltStrength;\n  }\n\n  /**\n   * Configure chunk size (bytes) for streaming transforms.\n   * @param bytes - Desired chunk size in bytes\n   */\n  setChunkSize(bytes: number): number {\n     \n      const MAX_ALLOWED_CHUNK_SIZE = 128 * 1024 * 1024; // 128 MiB\n      const rawSize = bytes;\n      let size: number;\n\n      if (rawSize == null) {\n        size = this.v.defaultChunkSize;\n      } else {\n        size = Number(rawSize);\n        if (!Number.isInteger(size) || size < 1) {\n          throw new Error(`Invalid chunkSize: ${rawSize}. Must be a positive integer.`);\n        }\n        if (size > MAX_ALLOWED_CHUNK_SIZE) {\n          throw new RangeError(`chunkSize cannot exceed ${MAX_ALLOWED_CHUNK_SIZE} bytes.`);\n        }\n      }\n\n      // finally assign\n      this.chunkSize = size;\n      if (this.stream) { // Check if stream is initialized\n          this.stream = new StreamProcessor(this.cipher, this.chunkSize);\n      }\n      return size;\n  }\n  /** Retrieve the current streaming chunk size. */\n  getChunkSize(): number                     { return this.chunkSize; }\n\n  /**\n   * Adjust verbosity level of internal logger at runtime.\n   * @param level - Logger verbosity (0-4)\n   */\n  setVerbose(level: Verbosity): void         { this.log.level = level; }\n  /** Get the current logger verbosity setting. */\n  getVerbose(): Verbosity                    { return this.log.level; }\n\n  // ════════════════════════════════════════════════════════════════════════\n  //  TEXT convenience\n  // ════════════════════════════════════════════════════════════════════════\n\n    /**\n   * Encrypt plaintext and return a flexible output wrapper.\n   * @param plain - string | Uint8Array | ConvertibleInput\n   * @param pass  - passphrase (warning logged if empty)\n   * @returns ConvertibleOutput (read via .base64 / .hex / .uint8array)\n   * @throws EncryptionError on failure\n   */\n  async encryptText(\n    plain: string | Uint8Array | ConvertibleInput,\n    pass: string | null,\n  ): Promise<ConvertibleOutput> {\n\n    if (pass === null) throw new EncryptionError(\"Password can't be null\");\n \n    const secret = { value: pass };\n\n    try {\n      if (pass === '') this.log.log(0, 'Empty passphrase provided to encryptText');\n      this.log.log(1, `Start text encryption, scheme: ${this.getScheme()}`);\n\n      // Normalize input once; we’ll wipe after use\n      const inp = ConvertibleInput.from(plain);\n      const plainBytes = inp.toUint8Array();\n\n      this.log.log(2, 'Deriving key for text encryption');\n      const salt = this.genSalt();\n      await this.deriveKey(secret, salt);\n\n      zeroizeString(secret);\n      pass = null;\n\n      this.log.log(3, `Salt generated: ${base64Encode(salt)}, KDF difficulty: ${this.difficulty}`);\n      this.log.log(3, 'Encoding header');\n\n      const header = encodeHeader(this.v.id, this.difficulty, this.saltStrength, salt, this.cipher);\n\n      this.cipher.setPaddingScheme(new Magic48VerCrc8Padding());\n      this.cipher.setPaddingAlign(8);\n      this.cipher.setPaddingAADMode('require');\n\n      this.log.log(2, 'Encrypting text data');\n      const cipher = await this.cipher.encryptChunk(plainBytes);\n      this.cipher.zeroKey();\n\n      // wipe plaintext ASAP\n      try { inp.clear(); } catch {}\n\n      // Return a convertible output over the raw container bytes (header + cipher)\n      const container = concat(header, cipher);\n      this.log.log(1, 'Encryption finished');\n      return new ConvertibleOutput(container);\n\n    } catch (err) {\n      throw new EncryptionError(\n        err instanceof Error ? err.message : String(err),\n      );\n    }\n  }\n\n  /**\n   * Decrypt a ciphertext container and return a flexible output wrapper.\n   * @param data - Base64 string, Uint8Array, or ConvertibleInput of (header + ciphertext)\n   * @param pass - passphrase (warning logged if empty)\n   * @returns ConvertibleOutput over plaintext bytes (.text for UTF-8)\n   * @throws DecryptionError on failure\n   */\n  async decryptText(\n    data: string | Uint8Array | ConvertibleInput,\n    pass: string | null,\n  ): Promise<ConvertibleOutput> {\n    \n    if (pass === null) throw new EncryptionError(\"Password can't be null\");\n \n    const secret = { value: pass };\n\n    try {\n      if (pass === '') this.log.log(0, 'Empty passphrase provided to decryptText');\n      this.log.log(1, `Start text decryption, Version ${this.getScheme()}`);\n\n      // Normalize ciphertext container to bytes\n      let container: Uint8Array;\n      if (typeof data === 'string') {\n        this.log.log(3, 'Decoding Base64 ciphertext');\n        container = base64Decode(data);\n      } else if (data instanceof Uint8Array) {\n        container = data;\n      } else if (data instanceof ConvertibleInput) {\n        container = data.toUint8Array();\n      } else {\n        throw new DecodingError('Unsupported ciphertext input type');\n      }\n\n      this.log.log(3, 'Start header decoding');\n      const hdr = decodeHeader(container);\n\n      this.log.log(3, 'Selecting decryption engine');\n      const engine = EngineManager.getEngine(this.provider, hdr.scheme);\n\n      this.log.log(2, `Deriving key via engine for scheme: ${hdr.scheme}`);\n      this.log.log(3, `Salt use: ${base64Encode(hdr.salt)}, KDF difficulty: ${hdr.difficulty}`);\n\n      try {\n        await EngineManager.deriveKey(engine, secret, hdr.salt, hdr.difficulty);\n      } finally {\n        zeroizeString(secret);\n        pass = null;\n      }\n\n      engine.cipher.setPaddingScheme(new Magic48VerCrc8Padding());\n      engine.cipher.setPaddingAlign(8);\n      engine.cipher.setPaddingAADMode('require');\n      engine.cipher.setLegacyAADFallback({ enabled: true, policy: 'auto', tryEmptyAAD: this.acceptUnauthenticatedHeader ? true : false });\n\n      this.log.log(2, 'Decrypting text data');\n      decodeHeader(container, engine.cipher); // bind AAD on actual cipher\n      const plainBytes = await engine.cipher.decryptChunk(\n        container.slice(hdr.headerLen),\n      );\n      engine.cipher.zeroKey();\n\n      // if input was a ConvertibleInput, wipe it\n      if (data instanceof ConvertibleInput) {\n        try { data.clear(); } catch {}\n      }\n\n      this.log.log(1, 'Decryption finished');\n      return new ConvertibleOutput(plainBytes);\n\n    } catch (err) {\n      if (\n        err instanceof DecryptionError   ||\n        err instanceof InvalidHeaderError||\n        err instanceof HeaderDecodeError ||\n        err instanceof DecodingError ||\n        err instanceof KeyDerivationError\n      ) throw err;\n\n      throw new DecryptionError(\n        'Decryption failed: wrong passphrase or corrupted ciphertext',\n      );\n    }\n  }\n\n  /* ──────────────────────────────────────────────────────────\n     Encrypt a whole Blob and return an opaque binary Blob\n     ────────────────────────────────────────────────────────── */\n  /**\n   * Encrypt a Blob (file) and return a new Blob with embedded header.\n   * @param file - Input Blob to encrypt\n   * @param pass - Passphrase for key derivation\n   * @returns Encrypted Blob (application/octet-stream)\n   * @throws EncryptionError on failure\n   */\n  async encryptFile(file: Blob, pass: string | null): Promise<Blob> {\n    \n    if (pass === null) throw new EncryptionError(\"Password can't be null\");\n \n    const secret = { value: pass };\n    try {\n\n      if (file.size === 0) {\n        const salt = this.genSalt();\n        await this.deriveKey(secret, salt);\n\n        zeroizeString(secret);\n        pass = null;\n\n        const header = encodeHeader(\n          this.v.id,\n          this.difficulty,\n          this.saltStrength,\n          salt,\n        );\n        /* nothing to encrypt ⇒ header alone is a valid container */\n        return new Blob([header as BufferSource], { type: 'application/octet-stream' });\n      }\n      this.log.log(2, 'Deriving key for file encryption');\n      const salt = this.genSalt();\n      await this.deriveKey(secret, salt);\n\n      zeroizeString(secret);\n      pass = null;\n\n      const header = encodeHeader(this.v.id, this.difficulty, this.saltStrength, salt, this.stream.getEngine());\n\n      this.stream.getEngine().setPaddingAADMode('forbid');\n\n      const cipher = await this.stream.collect(\n        file.stream() as ReadableStream<Uint8Array>,\n        new EncryptTransform(this.cipher, this.chunkSize).toTransformStream(),\n        header,\n      );\n\n      return new Blob([cipher as BufferSource], { type: 'application/octet-stream' });\n\n    } catch (err) {\n      throw new EncryptionError(\n        err instanceof Error ? err.message : String(err),\n      );\n    }\n  }\n\n  /* ──────────────────────────────────────────────────────────\n     Decrypt a Blob that carries its own header (any scheme)\n     ────────────────────────────────────────────────────────── */\n  /**\n   * Decrypt an encrypted Blob using the embedded header for parameters.\n   * @param file - Encrypted Blob containing header + ciphertext\n   * @param pass - Passphrase for key derivation\n   * @returns Decrypted Blob (application/octet-stream)\n   * @throws DecryptionError on failure or invalid header\n   */\n  async decryptFile(file: Blob, pass: string | null): Promise<Blob> {\n    \n    if (pass === null) throw new EncryptionError(\"Password can't be null\");\n \n\n    const secret = { value: pass };\n    try {\n      const header = await Cryptit.peekHeader(file);\n      const parsed = decodeHeader(header);\n      const engine = EngineManager.getEngine(this.provider, parsed.scheme);\n      \n\n      try {\n        await EngineManager.deriveKey(engine, secret, parsed.salt, parsed.difficulty);\n      } finally {\n        zeroizeString(secret);\n        pass = null;\n      }\n\n      // ── 0-byte optimisation ────────────────────────────────────────\n      if (file.size === parsed.headerLen) {\n        /* container carries header only - nothing to decrypt */\n        return new Blob([], { type: 'application/octet-stream' });\n      }\n\n      this.log.log(2, 'Decrypting file data');\n      const streamProc = new StreamProcessor(engine.cipher, engine.chunkSize);\n      // again for correc tdata\n      decodeHeader(header, streamProc.getEngine());\n      engine.cipher.setPaddingAADMode('forbid');\n      engine.cipher.setLegacyAADFallback({ enabled: true, policy: 'auto', tryEmptyAAD: this.acceptUnauthenticatedHeader ? true : false });\n      const plain = await streamProc.collect(\n        file.slice(parsed.headerLen).stream() as ReadableStream<Uint8Array>,\n        new DecryptTransform(engine.cipher, engine.chunkSize).toTransformStream(),\n      );\n\n      return new Blob([plain as BufferSource], { type: 'application/octet-stream' });\n\n    } catch (err) {\n      if (err instanceof DecryptionError) throw err;\n      throw new DecryptionError(\n        err instanceof Error ? err.message : String(err),\n      );\n    }\n  }\n\n  /* ──────────────────────────────────────────────────────────\n     Streaming encryption: returns header + TransformStream\n     ────────────────────────────────────────────────────────── */\n  /**\n   * Initialize streaming encryption, returning header and transform streams.\n   * @param pass - Passphrase for key derivation\n   * @returns Streams and header for real-time encryption\n   */\n  async createEncryptionStream(pass: string | null): Promise<EncryptStreamResult> {\n    \n    if (pass === null) throw new EncryptionError(\"Password can't be null\");\n \n    const secret = { value: pass };\n\n    this.log.log(2, 'Deriving key for stream encryption');\n    const salt = this.genSalt();\n    await this.deriveKey(secret, salt);\n\n    zeroizeString(secret);\n    pass = null;\n\n    const header = encodeHeader(this.v.id, this.difficulty, this.saltStrength, salt, this.stream.getEngine());\n    this.stream.getEngine().setPaddingAADMode('forbid');\n    const tf     = this.stream.encryptionStream();\n\n    return { header, writable: tf.writable, readable: tf.readable };\n  }\n\n  /* ──────────────────────────────────────────────────────────\n     Streaming decryption (auto-detect header, any scheme)\n     ────────────────────────────────────────────────────────── */\n  /**\n   * Create a TransformStream for decrypting incoming ciphertext with header auto-detection.\n   * @param pass - Passphrase for key derivation\n   * @returns TransformStream encrypting Uint8Array chunks to Uint8Array plaintext chunks\n   */\n  async createDecryptionStream(\n    pass: string | null,\n  ): Promise<TransformStream<Uint8Array, Uint8Array>> {\n    if (pass === null) throw new EncryptionError(\"Password can't be null\");\n\n    const provider = this.provider;\n\n    const secret = { value: pass };\n    let buf: Uint8Array = new Uint8Array(0);\n    let downstream: TransformStream<Uint8Array, Uint8Array> | null = null;\n\n    const MAX_HEADER_PREFIX = 64 * 1024;\n    const MIN_INFO_BYTES    = 2;\n\n    const pipeOut = async (\n      readable: ReadableStream<Uint8Array>,\n      ctl: TransformStreamDefaultController<Uint8Array>,\n    ) => {\n      const rd = readable.getReader();\n      while (true) {\n        const { value, done } = await rd.read();\n        if (done) break;\n        ctl.enqueue(value!);\n      }\n    };\n\n    return new TransformStream<Uint8Array, Uint8Array>({\n      transform: async (chunk, ctl) => {\n        if (!downstream) {\n          // --- New: only add up to MAX_HEADER_PREFIX bytes to the scan buffer.\n          let tail: Uint8Array = new Uint8Array(0);\n          if (chunk && chunk.byteLength) {\n            const room = Math.max(0, MAX_HEADER_PREFIX - buf.byteLength);\n            const head = room ? chunk.subarray(0, room) : new Uint8Array(0);\n            tail       = chunk.subarray(head.byteLength);\n\n            if (head.byteLength) {\n              const nxt = new Uint8Array(buf.byteLength + head.byteLength);\n              nxt.set(buf);\n              nxt.set(head, buf.byteLength);\n              buf = nxt;\n            }\n          }\n\n          // Need at least the first 2 bytes to read \"info\"\n          if (buf.byteLength < MIN_INFO_BYTES) return;\n\n          // Determine required header length\n          const info         = buf[1];\n          const scheme       = info >> 5;\n          const saltStrength = ((info >> 2) & 1) ? 'high' : 'low';\n\n          let hdrLen = 0;\n          try {\n            const desc = SchemeRegistry.get(scheme);\n            const sLen = desc.saltLengths[saltStrength as 'low' | 'high'];\n            hdrLen     = 2 + sLen;\n          } catch (e) {\n            zeroizeString(secret);\n            ctl.error(new HeaderDecodeError(\n              e instanceof Error ? e.message : String(e),\n            ));\n            return;\n          }\n\n          // Not enough yet to hold the full header? keep waiting unless we've hit the cap.\n          if (buf.byteLength < hdrLen) {\n            if (buf.byteLength >= MAX_HEADER_PREFIX) {\n              zeroizeString(secret);\n              ctl.error(new InvalidHeaderError(\n                `Header not found within ${MAX_HEADER_PREFIX} bytes`,\n              ));\n            }\n            return;\n          }\n\n          // Parse header\n          const headerBytes = buf.subarray(0, hdrLen);\n          let parsed: ReturnType<typeof decodeHeader>;\n          try {\n            parsed = decodeHeader(headerBytes);\n          } catch (err) {\n            zeroizeString(secret);\n            ctl.error(err instanceof Error ? err : new HeaderDecodeError('Invalid header'));\n            return;\n          }\n\n          // Initialize engine and derive key\n          const engine = EngineManager.getEngine(provider, parsed.scheme);\n          try {\n            await EngineManager.deriveKey(engine, secret, parsed.salt, parsed.difficulty);\n          } finally {\n            zeroizeString(secret);\n            pass = null;\n          }\n\n          // Bind AAD, configure cipher\n          decodeHeader(headerBytes, engine.cipher);\n          engine.cipher.setPaddingAADMode('forbid');\n          engine.cipher.setLegacyAADFallback({\n            enabled: true,\n            policy: 'auto',\n            tryEmptyAAD: this.acceptUnauthenticatedHeader ? true : false,\n          });\n\n          // Build downstream using WRITER's chunkSize from the header/engine\n          downstream = new DecryptTransform(engine.cipher, engine.chunkSize).toTransformStream();\n          void pipeOut(downstream.readable, ctl).catch(err => ctl.error(err));\n\n          // Immediately forward remainder of buffered data + any tail from this chunk\n          const remainder = buf.subarray(hdrLen);\n          buf = new Uint8Array(0);\n          if (remainder.byteLength || tail.byteLength) {\n            const w = downstream.writable.getWriter();\n            if (remainder.byteLength) await w.write(remainder);\n            if (tail.byteLength)      await w.write(tail);\n            w.releaseLock();\n          }\n          return;\n        }\n\n        // Already initialized: pass through\n        const writer = downstream.writable.getWriter();\n        await writer.write(chunk);\n        writer.releaseLock();\n      },\n\n      flush: async () => {\n        if (!downstream) {\n          zeroizeString(secret);\n          throw new InvalidHeaderError('Header not found before end of stream');\n        }\n        const writer = downstream.writable.getWriter();\n        await writer.close();\n        writer.releaseLock();\n      },\n    });\n  }\n\n  /**\n   * Generate a syntactically valid Cryptit container consisting of:\n   *   <header><random-bytes>\n   * The header is created from the current scheme, difficulty and salt strength,\n   * so it can be decoded by `decodeHeader()` and `decodeData()`, but the payload\n   * is just random noise (not decryptable).\n   *\n   * @param payloadLength - Number of random bytes to append after the header (>= 0).\n   * @returns Uint8Array containing header + random payload.\n   * @throws RangeError if payloadLength is negative or not an integer.\n   */\n  public generateFakeData(payloadLength: number = 0, usePadding: boolean = false): Uint8Array {\n    if (!Number.isInteger(payloadLength) || payloadLength < 0) {\n      throw new RangeError('payloadLength must be a non-negative integer.');\n    }\n\n    // Create a fresh salt using the configured salt strength\n    const salt = this.genSalt();\n\n    // Build a real header that matches current settings.\n    // Using the text-style header (cipher) keeps the container simple and valid.\n    const header = encodeHeader(\n      this.v.id,\n      this.difficulty,\n      this.saltStrength,\n      salt,\n      this.cipher\n    );\n\n    // Determine tail length\n    let tailLen = payloadLength;\n    if (usePadding) {\n      const MIN = 16;      // minimum bytes\n      const BLOCK = 8;     // must be a multiple of 8\n      const atLeastMin = Math.max(MIN, tailLen);\n      tailLen = Math.ceil(atLeastMin / BLOCK) * BLOCK; // round up to next multiple of 8\n    }\n\n    // Append N random bytes (noise) as the payload.\n    const tail =\n      tailLen > 0\n        ? this.provider.getRandomValues(new Uint8Array(tailLen))\n        : new Uint8Array(0);\n\n    // <header><random>\n    return concat(header, tail);\n  }\n\n  // ════════════════════════════════════════════════════════════════════════\n  //  Helpers\n  // ════════════════════════════════════════════════════════════════════════\n\n  /**\n   * Derive cryptographic key from passphrase and salt using configured KDF.\n   * @param pass - Passphrase to derive key from\n   * @param salt - Random salt value\n   * @param diff - Difficulty level for KDF (optional)\n   * @throws KeyDerivationError on KDF failure\n   */\n  private async deriveKey(\n    secret: Secret,\n    salt: Uint8Array,\n    diff: Difficulty = this.difficulty,\n  ): Promise<void> {\n    const start = performance.now();\n    try {\n      const key = await this.kdf.derive(secret.value, salt, diff, this.provider);\n      zeroizeString(secret);\n      \n      await this.cipher.setKey(key);\n      this.log.log(3, `Key derivation completed in ${(performance.now() - start).toFixed(1)} ms`);\n    } catch (err) {\n      throw new KeyDerivationError(\n        err instanceof Error ? err.message : String(err),\n      );\n    }\n  }\n\n  /** Generate a secure random salt according to configured length. */\n  private genSalt<S extends SaltStrength>(strength: S = this.saltStrength as S): Uint8Array {\n    const len = this.v.saltLengths[strength];\n    return this.provider.getRandomValues(new Uint8Array(len));\n  }\n\n  // ────────────────────────────────────────────────────────────────────\n  //  Static helper - read just enough bytes to parse the header\n  // ────────────────────────────────────────────────────────────────────\n  /**\n   * Read minimal bytes to extract and validate Cryptit header.\n   * @param input - Base64 string, Uint8Array, or Blob containing header\n   * @returns Uint8Array slice of the header bytes\n   * @throws HeaderDecodeError or InvalidHeaderError on invalid input\n   */\n\n  private static async peekHeader(input: string | Uint8Array | Blob): Promise<Uint8Array> {\n    const buf = await this.readAsUint8(input);\n    if (buf.length < 2) throw new InvalidHeaderError('Input too short');\n\n    const { headerLen } = decodeHeader(buf.length >= 32 ? buf : buf.slice());\n\n    if (buf.length < headerLen) throw new InvalidHeaderError('Incomplete header');\n    return buf.slice(0, headerLen);\n  }\n\n  private static async readAsUint8(input: string | Uint8Array | Blob): Promise<Uint8Array> {\n    if (typeof input === 'string') return base64Decode(input);\n    if (input instanceof Uint8Array) return input;\n    if (input instanceof Blob) {\n      const need = Math.max(32, Math.min(256, input.size));\n      const slice = input.slice(0, need);\n      return new Uint8Array(await slice.arrayBuffer());\n    }\n    throw new HeaderDecodeError('Unsupported input type');\n  }\n}\n",
    "import { webcrypto, randomFillSync } from 'node:crypto';\nimport type { CryptoProvider } from '../../core/src/providers/CryptoProvider.js';\n\nexport const nodeProvider: CryptoProvider = {\n  // cast is safe: Node’s SubtleCrypto is a superset of the browser spec\n  subtle: webcrypto.subtle as unknown as SubtleCrypto,\n  getRandomValues(buf) {\n    randomFillSync(buf);\n    return buf;\n  },\n  isNode: true,\n};\n",
    "// packages/node-runtime/src/index.ts\nimport { Cryptit, type CryptitOptions } from '../../core/src/index.js';\nimport { nodeProvider }                from './provider.js';\n\nexport function createCryptit(cfg?: CryptitOptions): Cryptit {\n  return new Cryptit(nodeProvider, cfg);\n}\n\nexport { Cryptit } from '../../core/src/index.js';\nexport { ConvertibleInput, ConvertibleOutput } from '../../core/src/util/Convertible.js';"
  ],
  "mappings": "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",
  "debugId": "94B60A1B964686C364756E2164756E21",
  "names": []
}